
Debug/snake:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 * STARTUP
 */
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 fbf0 	bl	200007e8 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#include "declarations.h"
/*
 * SYS_TICK
 */
void delay_250ns( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1 );
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:

void delay_micro(unsigned int us)
{
20000054:	b580      	push	{r7, lr}
20000056:	b084      	sub	sp, #16
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	us = us/1000;
2000005c:	687b      	ldr	r3, [r7, #4]
2000005e:	22fa      	movs	r2, #250	; 0xfa
20000060:	0091      	lsls	r1, r2, #2
20000062:	0018      	movs	r0, r3
20000064:	f000 fe3e 	bl	20000ce4 <__udivsi3>
20000068:	0003      	movs	r3, r0
2000006a:	607b      	str	r3, [r7, #4]
	us++;
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	3301      	adds	r3, #1
20000070:	607b      	str	r3, [r7, #4]
#endif
	while( us > 0 )
20000072:	e00d      	b.n	20000090 <delay_micro+0x3c>
	{
		for(int i = 0; i<4; i++) delay_250ns();
20000074:	2300      	movs	r3, #0
20000076:	60fb      	str	r3, [r7, #12]
20000078:	e004      	b.n	20000084 <delay_micro+0x30>
2000007a:	f7ff ffc9 	bl	20000010 <delay_250ns>
2000007e:	68fb      	ldr	r3, [r7, #12]
20000080:	3301      	adds	r3, #1
20000082:	60fb      	str	r3, [r7, #12]
20000084:	68fb      	ldr	r3, [r7, #12]
20000086:	2b03      	cmp	r3, #3
20000088:	ddf7      	ble.n	2000007a <delay_micro+0x26>
		us--;
2000008a:	687b      	ldr	r3, [r7, #4]
2000008c:	3b01      	subs	r3, #1
2000008e:	607b      	str	r3, [r7, #4]
	while( us > 0 )
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	2b00      	cmp	r3, #0
20000094:	d1ee      	bne.n	20000074 <delay_micro+0x20>
	}
}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	46c0      	nop			; (mov r8, r8)
2000009a:	46bd      	mov	sp, r7
2000009c:	b004      	add	sp, #16
2000009e:	bd80      	pop	{r7, pc}

200000a0 <delay_milli>:

void delay_milli(unsigned int ms) {
200000a0:	b580      	push	{r7, lr}
200000a2:	b082      	sub	sp, #8
200000a4:	af00      	add	r7, sp, #0
200000a6:	6078      	str	r0, [r7, #4]
	while( ms > 0 )
200000a8:	e005      	b.n	200000b6 <delay_milli+0x16>
	{
		delay_micro(100);
200000aa:	2064      	movs	r0, #100	; 0x64
200000ac:	f7ff ffd2 	bl	20000054 <delay_micro>
		ms--;
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	3b01      	subs	r3, #1
200000b4:	607b      	str	r3, [r7, #4]
	while( ms > 0 )
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	2b00      	cmp	r3, #0
200000ba:	d1f6      	bne.n	200000aa <delay_milli+0xa>
	}
}
200000bc:	46c0      	nop			; (mov r8, r8)
200000be:	46c0      	nop			; (mov r8, r8)
200000c0:	46bd      	mov	sp, r7
200000c2:	b002      	add	sp, #8
200000c4:	bd80      	pop	{r7, pc}

200000c6 <random_number>:

/*
 * TIM6 for randomizing number
 */
 int random_number(int min, int max)
 {
200000c6:	b580      	push	{r7, lr}
200000c8:	b084      	sub	sp, #16
200000ca:	af00      	add	r7, sp, #0
200000cc:	6078      	str	r0, [r7, #4]
200000ce:	6039      	str	r1, [r7, #0]
	short random = (char) *TIM6_CNT;
200000d0:	4b0f      	ldr	r3, [pc, #60]	; (20000110 <random_number+0x4a>)
200000d2:	881b      	ldrh	r3, [r3, #0]
200000d4:	b29b      	uxth	r3, r3
200000d6:	b2da      	uxtb	r2, r3
200000d8:	210e      	movs	r1, #14
200000da:	187b      	adds	r3, r7, r1
200000dc:	801a      	strh	r2, [r3, #0]
	unsigned char c = random % (max-min+1) + min; 
200000de:	187b      	adds	r3, r7, r1
200000e0:	2000      	movs	r0, #0
200000e2:	5e18      	ldrsh	r0, [r3, r0]
200000e4:	683a      	ldr	r2, [r7, #0]
200000e6:	687b      	ldr	r3, [r7, #4]
200000e8:	1ad3      	subs	r3, r2, r3
200000ea:	3301      	adds	r3, #1
200000ec:	0019      	movs	r1, r3
200000ee:	f000 ff69 	bl	20000fc4 <__aeabi_idivmod>
200000f2:	000b      	movs	r3, r1
200000f4:	b2d9      	uxtb	r1, r3
200000f6:	687b      	ldr	r3, [r7, #4]
200000f8:	b2da      	uxtb	r2, r3
200000fa:	200d      	movs	r0, #13
200000fc:	183b      	adds	r3, r7, r0
200000fe:	188a      	adds	r2, r1, r2
20000100:	701a      	strb	r2, [r3, #0]
	return c;
20000102:	183b      	adds	r3, r7, r0
20000104:	781b      	ldrb	r3, [r3, #0]
 }
20000106:	0018      	movs	r0, r3
20000108:	46bd      	mov	sp, r7
2000010a:	b004      	add	sp, #16
2000010c:	bd80      	pop	{r7, pc}
2000010e:	46c0      	nop			; (mov r8, r8)
20000110:	40001024 	andmi	r1, r0, r4, lsr #32

20000114 <ascii_ctrl_bit_set>:
#define B_RW     2
#define B_RS     1

//ASCII------------------------------
void ascii_ctrl_bit_set ( char x )
{
20000114:	b580      	push	{r7, lr}
20000116:	b084      	sub	sp, #16
20000118:	af00      	add	r7, sp, #0
2000011a:	0002      	movs	r2, r0
2000011c:	1dfb      	adds	r3, r7, #7
2000011e:	701a      	strb	r2, [r3, #0]
	char c;
	c = GPIO_E.odrLow;
20000120:	4a09      	ldr	r2, [pc, #36]	; (20000148 <ascii_ctrl_bit_set+0x34>)
20000122:	210f      	movs	r1, #15
20000124:	187b      	adds	r3, r7, r1
20000126:	7d12      	ldrb	r2, [r2, #20]
20000128:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = B_SELECT | x | c;
2000012a:	1dfa      	adds	r2, r7, #7
2000012c:	187b      	adds	r3, r7, r1
2000012e:	7812      	ldrb	r2, [r2, #0]
20000130:	781b      	ldrb	r3, [r3, #0]
20000132:	4313      	orrs	r3, r2
20000134:	b2db      	uxtb	r3, r3
20000136:	4a04      	ldr	r2, [pc, #16]	; (20000148 <ascii_ctrl_bit_set+0x34>)
20000138:	2104      	movs	r1, #4
2000013a:	430b      	orrs	r3, r1
2000013c:	b2db      	uxtb	r3, r3
2000013e:	7513      	strb	r3, [r2, #20]
}
20000140:	46c0      	nop			; (mov r8, r8)
20000142:	46bd      	mov	sp, r7
20000144:	b004      	add	sp, #16
20000146:	bd80      	pop	{r7, pc}
20000148:	40021000 	andmi	r1, r2, r0

2000014c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear ( char x )
{
2000014c:	b580      	push	{r7, lr}
2000014e:	b084      	sub	sp, #16
20000150:	af00      	add	r7, sp, #0
20000152:	0002      	movs	r2, r0
20000154:	1dfb      	adds	r3, r7, #7
20000156:	701a      	strb	r2, [r3, #0]
	char c;
	c = GPIO_E.odrLow;
20000158:	4a0d      	ldr	r2, [pc, #52]	; (20000190 <ascii_ctrl_bit_clear+0x44>)
2000015a:	210f      	movs	r1, #15
2000015c:	187b      	adds	r3, r7, r1
2000015e:	7d12      	ldrb	r2, [r2, #20]
20000160:	701a      	strb	r2, [r3, #0]
	c = c & ~x;
20000162:	1dfb      	adds	r3, r7, #7
20000164:	781b      	ldrb	r3, [r3, #0]
20000166:	b25b      	sxtb	r3, r3
20000168:	43db      	mvns	r3, r3
2000016a:	b25b      	sxtb	r3, r3
2000016c:	187a      	adds	r2, r7, r1
2000016e:	7812      	ldrb	r2, [r2, #0]
20000170:	b252      	sxtb	r2, r2
20000172:	4013      	ands	r3, r2
20000174:	b25a      	sxtb	r2, r3
20000176:	187b      	adds	r3, r7, r1
20000178:	701a      	strb	r2, [r3, #0]
	GPIO_E.odrLow = B_SELECT | c;
2000017a:	4a05      	ldr	r2, [pc, #20]	; (20000190 <ascii_ctrl_bit_clear+0x44>)
2000017c:	187b      	adds	r3, r7, r1
2000017e:	781b      	ldrb	r3, [r3, #0]
20000180:	2104      	movs	r1, #4
20000182:	430b      	orrs	r3, r1
20000184:	b2db      	uxtb	r3, r3
20000186:	7513      	strb	r3, [r2, #20]
}
20000188:	46c0      	nop			; (mov r8, r8)
2000018a:	46bd      	mov	sp, r7
2000018c:	b004      	add	sp, #16
2000018e:	bd80      	pop	{r7, pc}
20000190:	40021000 	andmi	r1, r2, r0

20000194 <ascii_write_controller>:
//time sensitive functions
void ascii_write_controller ( unsigned char c )
{
20000194:	b580      	push	{r7, lr}
20000196:	b082      	sub	sp, #8
20000198:	af00      	add	r7, sp, #0
2000019a:	0002      	movs	r2, r0
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	701a      	strb	r2, [r3, #0]
	//delay 40ns (small delay, no need)
	ascii_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ffb7 	bl	20000114 <ascii_ctrl_bit_set>
	GPIO_E.odrHigh = c;
200001a6:	4a06      	ldr	r2, [pc, #24]	; (200001c0 <ascii_write_controller+0x2c>)
200001a8:	1dfb      	adds	r3, r7, #7
200001aa:	781b      	ldrb	r3, [r3, #0]
200001ac:	7553      	strb	r3, [r2, #21]
	delay_250ns();
200001ae:	f7ff ff2f 	bl	20000010 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200001b2:	2040      	movs	r0, #64	; 0x40
200001b4:	f7ff ffca 	bl	2000014c <ascii_ctrl_bit_clear>
	//delay 10ns
}
200001b8:	46c0      	nop			; (mov r8, r8)
200001ba:	46bd      	mov	sp, r7
200001bc:	b002      	add	sp, #8
200001be:	bd80      	pop	{r7, pc}
200001c0:	40021000 	andmi	r1, r2, r0

200001c4 <ascii_read_controller>:

char ascii_read_controller ( void )
{
200001c4:	b580      	push	{r7, lr}
200001c6:	b082      	sub	sp, #8
200001c8:	af00      	add	r7, sp, #0
	char c;
	ascii_ctrl_bit_set(B_E);
200001ca:	2040      	movs	r0, #64	; 0x40
200001cc:	f7ff ffa2 	bl	20000114 <ascii_ctrl_bit_set>
	delay_250ns;
	delay_250ns;
	c=GPIO_E.idrHigh;
200001d0:	4a06      	ldr	r2, [pc, #24]	; (200001ec <ascii_read_controller+0x28>)
200001d2:	1dfb      	adds	r3, r7, #7
200001d4:	7c52      	ldrb	r2, [r2, #17]
200001d6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
200001d8:	2040      	movs	r0, #64	; 0x40
200001da:	f7ff ffb7 	bl	2000014c <ascii_ctrl_bit_clear>
	return c;
200001de:	1dfb      	adds	r3, r7, #7
200001e0:	781b      	ldrb	r3, [r3, #0]
}
200001e2:	0018      	movs	r0, r3
200001e4:	46bd      	mov	sp, r7
200001e6:	b002      	add	sp, #8
200001e8:	bd80      	pop	{r7, pc}
200001ea:	46c0      	nop			; (mov r8, r8)
200001ec:	40021000 	andmi	r1, r2, r0

200001f0 <ascii_write_cmd>:
//other
void ascii_write_cmd( unsigned char c ) 
{
200001f0:	b580      	push	{r7, lr}
200001f2:	b082      	sub	sp, #8
200001f4:	af00      	add	r7, sp, #0
200001f6:	0002      	movs	r2, r0
200001f8:	1dfb      	adds	r3, r7, #7
200001fa:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
200001fc:	2001      	movs	r0, #1
200001fe:	f7ff ffa5 	bl	2000014c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000202:	2002      	movs	r0, #2
20000204:	f7ff ffa2 	bl	2000014c <ascii_ctrl_bit_clear>
	ascii_write_controller(c);
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	781b      	ldrb	r3, [r3, #0]
2000020c:	0018      	movs	r0, r3
2000020e:	f7ff ffc1 	bl	20000194 <ascii_write_controller>
}
20000212:	46c0      	nop			; (mov r8, r8)
20000214:	46bd      	mov	sp, r7
20000216:	b002      	add	sp, #8
20000218:	bd80      	pop	{r7, pc}

2000021a <ascii_write_data>:

void ascii_write_data( unsigned char c ) 
{
2000021a:	b580      	push	{r7, lr}
2000021c:	b082      	sub	sp, #8
2000021e:	af00      	add	r7, sp, #0
20000220:	0002      	movs	r2, r0
20000222:	1dfb      	adds	r3, r7, #7
20000224:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000226:	2001      	movs	r0, #1
20000228:	f7ff ff74 	bl	20000114 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000022c:	2002      	movs	r0, #2
2000022e:	f7ff ff8d 	bl	2000014c <ascii_ctrl_bit_clear>
	ascii_write_controller(c);
20000232:	1dfb      	adds	r3, r7, #7
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	0018      	movs	r0, r3
20000238:	f7ff ffac 	bl	20000194 <ascii_write_controller>
}
2000023c:	46c0      	nop			; (mov r8, r8)
2000023e:	46bd      	mov	sp, r7
20000240:	b002      	add	sp, #8
20000242:	bd80      	pop	{r7, pc}

20000244 <ascii_read_status>:

unsigned char ascii_read_status ( void )
{
20000244:	b590      	push	{r4, r7, lr}
20000246:	b083      	sub	sp, #12
20000248:	af00      	add	r7, sp, #0
	char c;
	GPIO_E.moder = 0x00005555;
2000024a:	4b0b      	ldr	r3, [pc, #44]	; (20000278 <ascii_read_status+0x34>)
2000024c:	4a0b      	ldr	r2, [pc, #44]	; (2000027c <ascii_read_status+0x38>)
2000024e:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000250:	2002      	movs	r0, #2
20000252:	f7ff ff5f 	bl	20000114 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
20000256:	2001      	movs	r0, #1
20000258:	f7ff ff78 	bl	2000014c <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
2000025c:	1dfc      	adds	r4, r7, #7
2000025e:	f7ff ffb1 	bl	200001c4 <ascii_read_controller>
20000262:	0003      	movs	r3, r0
20000264:	7023      	strb	r3, [r4, #0]
	
	GPIO_E.moder = 0x55555555;
20000266:	4b04      	ldr	r3, [pc, #16]	; (20000278 <ascii_read_status+0x34>)
20000268:	4a05      	ldr	r2, [pc, #20]	; (20000280 <ascii_read_status+0x3c>)
2000026a:	601a      	str	r2, [r3, #0]
	return c;
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
}
20000270:	0018      	movs	r0, r3
20000272:	46bd      	mov	sp, r7
20000274:	b003      	add	sp, #12
20000276:	bd90      	pop	{r4, r7, pc}
20000278:	40021000 	andmi	r1, r2, r0
2000027c:	00005555 	andeq	r5, r0, r5, asr r5
20000280:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000284 <ascii_read_data>:

unsigned char ascii_read_data ( void )
{
20000284:	b590      	push	{r4, r7, lr}
20000286:	b083      	sub	sp, #12
20000288:	af00      	add	r7, sp, #0
	GPIO_E.moder &= 0x0000FFFF;
2000028a:	4b0e      	ldr	r3, [pc, #56]	; (200002c4 <ascii_read_data+0x40>)
2000028c:	681a      	ldr	r2, [r3, #0]
2000028e:	4b0d      	ldr	r3, [pc, #52]	; (200002c4 <ascii_read_data+0x40>)
20000290:	0412      	lsls	r2, r2, #16
20000292:	0c12      	lsrs	r2, r2, #16
20000294:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000296:	2001      	movs	r0, #1
20000298:	f7ff ff3c 	bl	20000114 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
2000029c:	2002      	movs	r0, #2
2000029e:	f7ff ff39 	bl	20000114 <ascii_ctrl_bit_set>
	char c = ascii_read_controller();
200002a2:	1dfc      	adds	r4, r7, #7
200002a4:	f7ff ff8e 	bl	200001c4 <ascii_read_controller>
200002a8:	0003      	movs	r3, r0
200002aa:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder |= 0x55550000;
200002ac:	4b05      	ldr	r3, [pc, #20]	; (200002c4 <ascii_read_data+0x40>)
200002ae:	681a      	ldr	r2, [r3, #0]
200002b0:	4b04      	ldr	r3, [pc, #16]	; (200002c4 <ascii_read_data+0x40>)
200002b2:	4905      	ldr	r1, [pc, #20]	; (200002c8 <ascii_read_data+0x44>)
200002b4:	430a      	orrs	r2, r1
200002b6:	601a      	str	r2, [r3, #0]
	return c;
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	781b      	ldrb	r3, [r3, #0]
}
200002bc:	0018      	movs	r0, r3
200002be:	46bd      	mov	sp, r7
200002c0:	b003      	add	sp, #12
200002c2:	bd90      	pop	{r4, r7, pc}
200002c4:	40021000 	andmi	r1, r2, r0
200002c8:	55550000 	ldrbpl	r0, [r5, #-0]

200002cc <ascii_command>:

void ascii_command( unsigned char command )
{
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
200002d2:	0002      	movs	r2, r0
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80 ){}
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	f7ff ffb3 	bl	20000244 <ascii_read_status>
200002de:	0003      	movs	r3, r0
200002e0:	001a      	movs	r2, r3
200002e2:	2380      	movs	r3, #128	; 0x80
200002e4:	4013      	ands	r3, r2
200002e6:	2b80      	cmp	r3, #128	; 0x80
200002e8:	d0f7      	beq.n	200002da <ascii_command+0xe>
	delay_micro(8);
200002ea:	2008      	movs	r0, #8
200002ec:	f7ff feb2 	bl	20000054 <delay_micro>
	ascii_write_cmd(command);
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	0018      	movs	r0, r3
200002f6:	f7ff ff7b 	bl	200001f0 <ascii_write_cmd>
}
200002fa:	46c0      	nop			; (mov r8, r8)
200002fc:	46bd      	mov	sp, r7
200002fe:	b002      	add	sp, #8
20000300:	bd80      	pop	{r7, pc}

20000302 <ascii_init>:

void ascii_init (void) {
20000302:	b580      	push	{r7, lr}
20000304:	af00      	add	r7, sp, #0
	// function set (2 rows and font size)
	ascii_command(0x38);
20000306:	2038      	movs	r0, #56	; 0x38
20000308:	f7ff ffe0 	bl	200002cc <ascii_command>
	delay_micro(39);
2000030c:	2027      	movs	r0, #39	; 0x27
2000030e:	f7ff fea1 	bl	20000054 <delay_micro>
	// turn on display & cursor constant
	ascii_command(0xE);
20000312:	200e      	movs	r0, #14
20000314:	f7ff ffda 	bl	200002cc <ascii_command>
	delay_micro(39);
20000318:	2027      	movs	r0, #39	; 0x27
2000031a:	f7ff fe9b 	bl	20000054 <delay_micro>
	// clear screen
	ascii_command(1);
2000031e:	2001      	movs	r0, #1
20000320:	f7ff ffd4 	bl	200002cc <ascii_command>
	delay_milli(2);
20000324:	2002      	movs	r0, #2
20000326:	f7ff febb 	bl	200000a0 <delay_milli>
	//adressing with inc.
	ascii_command(6);
2000032a:	2006      	movs	r0, #6
2000032c:	f7ff ffce 	bl	200002cc <ascii_command>
	delay_micro(39);
20000330:	2027      	movs	r0, #39	; 0x27
20000332:	f7ff fe8f 	bl	20000054 <delay_micro>
}
20000336:	46c0      	nop			; (mov r8, r8)
20000338:	46bd      	mov	sp, r7
2000033a:	bd80      	pop	{r7, pc}

2000033c <ascii_write_char>:

void ascii_write_char(char c)
{
2000033c:	b580      	push	{r7, lr}
2000033e:	b082      	sub	sp, #8
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
	while( (ascii_read_status() & 0x80) == 0x80 ){}
20000348:	46c0      	nop			; (mov r8, r8)
2000034a:	f7ff ff7b 	bl	20000244 <ascii_read_status>
2000034e:	0003      	movs	r3, r0
20000350:	001a      	movs	r2, r3
20000352:	2380      	movs	r3, #128	; 0x80
20000354:	4013      	ands	r3, r2
20000356:	2b80      	cmp	r3, #128	; 0x80
20000358:	d0f7      	beq.n	2000034a <ascii_write_char+0xe>
	delay_micro(8);
2000035a:	2008      	movs	r0, #8
2000035c:	f7ff fe7a 	bl	20000054 <delay_micro>
	ascii_write_data(c);
20000360:	1dfb      	adds	r3, r7, #7
20000362:	781b      	ldrb	r3, [r3, #0]
20000364:	0018      	movs	r0, r3
20000366:	f7ff ff58 	bl	2000021a <ascii_write_data>
	delay_micro(43);
2000036a:	202b      	movs	r0, #43	; 0x2b
2000036c:	f7ff fe72 	bl	20000054 <delay_micro>
}
20000370:	46c0      	nop			; (mov r8, r8)
20000372:	46bd      	mov	sp, r7
20000374:	b002      	add	sp, #8
20000376:	bd80      	pop	{r7, pc}

20000378 <ascii_gotxy>:

void ascii_gotxy(unsigned char row, unsigned char column)
{
20000378:	b580      	push	{r7, lr}
2000037a:	b084      	sub	sp, #16
2000037c:	af00      	add	r7, sp, #0
2000037e:	0002      	movs	r2, r0
20000380:	1dfb      	adds	r3, r7, #7
20000382:	701a      	strb	r2, [r3, #0]
20000384:	1dbb      	adds	r3, r7, #6
20000386:	1c0a      	adds	r2, r1, #0
20000388:	701a      	strb	r2, [r3, #0]
	char adr = row-1;
2000038a:	210f      	movs	r1, #15
2000038c:	187b      	adds	r3, r7, r1
2000038e:	1dfa      	adds	r2, r7, #7
20000390:	7812      	ldrb	r2, [r2, #0]
20000392:	3a01      	subs	r2, #1
20000394:	701a      	strb	r2, [r3, #0]
	if(column == 2) adr = adr + 0x40;
20000396:	1dbb      	adds	r3, r7, #6
20000398:	781b      	ldrb	r3, [r3, #0]
2000039a:	2b02      	cmp	r3, #2
2000039c:	d104      	bne.n	200003a8 <ascii_gotxy+0x30>
2000039e:	187b      	adds	r3, r7, r1
200003a0:	187a      	adds	r2, r7, r1
200003a2:	7812      	ldrb	r2, [r2, #0]
200003a4:	3240      	adds	r2, #64	; 0x40
200003a6:	701a      	strb	r2, [r3, #0]
	ascii_write_cmd ( 0x80 | adr );
200003a8:	230f      	movs	r3, #15
200003aa:	18fb      	adds	r3, r7, r3
200003ac:	781b      	ldrb	r3, [r3, #0]
200003ae:	2280      	movs	r2, #128	; 0x80
200003b0:	4252      	negs	r2, r2
200003b2:	4313      	orrs	r3, r2
200003b4:	b2db      	uxtb	r3, r3
200003b6:	0018      	movs	r0, r3
200003b8:	f7ff ff1a 	bl	200001f0 <ascii_write_cmd>
}
200003bc:	46c0      	nop			; (mov r8, r8)
200003be:	46bd      	mov	sp, r7
200003c0:	b004      	add	sp, #16
200003c2:	bd80      	pop	{r7, pc}

200003c4 <write_ascii>:
/*
 * main function
 */
int write_ascii(char line1[], char line2[])
{
200003c4:	b580      	push	{r7, lr}
200003c6:	b084      	sub	sp, #16
200003c8:	af00      	add	r7, sp, #0
200003ca:	6078      	str	r0, [r7, #4]
200003cc:	6039      	str	r1, [r7, #0]
	char *s;
	ascii_init();
200003ce:	f7ff ff98 	bl	20000302 <ascii_init>
	ascii_gotxy(1,1);
200003d2:	2101      	movs	r1, #1
200003d4:	2001      	movs	r0, #1
200003d6:	f7ff ffcf 	bl	20000378 <ascii_gotxy>
	s = line1;
200003da:	687b      	ldr	r3, [r7, #4]
200003dc:	60fb      	str	r3, [r7, #12]
	while( *s ) {
200003de:	e006      	b.n	200003ee <write_ascii+0x2a>
		ascii_write_char(*s++);
200003e0:	68fb      	ldr	r3, [r7, #12]
200003e2:	1c5a      	adds	r2, r3, #1
200003e4:	60fa      	str	r2, [r7, #12]
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	0018      	movs	r0, r3
200003ea:	f7ff ffa7 	bl	2000033c <ascii_write_char>
	while( *s ) {
200003ee:	68fb      	ldr	r3, [r7, #12]
200003f0:	781b      	ldrb	r3, [r3, #0]
200003f2:	2b00      	cmp	r3, #0
200003f4:	d1f4      	bne.n	200003e0 <write_ascii+0x1c>
	}
	ascii_gotxy(1,2);
200003f6:	2102      	movs	r1, #2
200003f8:	2001      	movs	r0, #1
200003fa:	f7ff ffbd 	bl	20000378 <ascii_gotxy>
	s = line2;
200003fe:	683b      	ldr	r3, [r7, #0]
20000400:	60fb      	str	r3, [r7, #12]
	while( *s ) {
20000402:	e006      	b.n	20000412 <write_ascii+0x4e>
		ascii_write_char(*s++);
20000404:	68fb      	ldr	r3, [r7, #12]
20000406:	1c5a      	adds	r2, r3, #1
20000408:	60fa      	str	r2, [r7, #12]
2000040a:	781b      	ldrb	r3, [r3, #0]
2000040c:	0018      	movs	r0, r3
2000040e:	f7ff ff95 	bl	2000033c <ascii_write_char>
	while( *s ) {
20000412:	68fb      	ldr	r3, [r7, #12]
20000414:	781b      	ldrb	r3, [r3, #0]
20000416:	2b00      	cmp	r3, #0
20000418:	d1f4      	bne.n	20000404 <write_ascii+0x40>
	}
	return 0;
2000041a:	2300      	movs	r3, #0
}
2000041c:	0018      	movs	r0, r3
2000041e:	46bd      	mov	sp, r7
20000420:	b004      	add	sp, #16
20000422:	bd80      	pop	{r7, pc}

20000424 <graphic_initalize>:

//GRPAPHICS DRIVERS----------------------------
//OBS! graphic_init. sets up port E for usage
__attribute__((naked))
void graphic_initalize(void)
{
20000424:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
20000428:	46c0      	nop			; (mov r8, r8)

2000042a <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
2000042a:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
2000042e:	46c0      	nop			; (mov r8, r8)

20000430 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
20000430:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
20000434:	46c0      	nop			; (mov r8, r8)

20000436 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
20000436:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
2000043a:	46c0      	nop			; (mov r8, r8)

2000043c <draw_object>:

//GRAPHICS DRIVERS----------------------------
//OBJECT-----------------------------
//general methods
void draw_object(POBJECT obj)
{
2000043c:	b590      	push	{r4, r7, lr}
2000043e:	b087      	sub	sp, #28
20000440:	af00      	add	r7, sp, #0
20000442:	6078      	str	r0, [r7, #4]
	int numpixels = obj -> geo -> numpoints;
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	681b      	ldr	r3, [r3, #0]
20000448:	681b      	ldr	r3, [r3, #0]
2000044a:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < numpixels; i++)
2000044c:	2300      	movs	r3, #0
2000044e:	617b      	str	r3, [r7, #20]
20000450:	e02c      	b.n	200004ac <draw_object+0x70>
	{
		unsigned char x = obj -> geo -> px[i].x + (obj -> posx) * SQUARE_WIDTH;
20000452:	687b      	ldr	r3, [r7, #4]
20000454:	681a      	ldr	r2, [r3, #0]
20000456:	697b      	ldr	r3, [r7, #20]
20000458:	3304      	adds	r3, #4
2000045a:	005b      	lsls	r3, r3, #1
2000045c:	18d3      	adds	r3, r2, r3
2000045e:	3304      	adds	r3, #4
20000460:	7819      	ldrb	r1, [r3, #0]
20000462:	687b      	ldr	r3, [r7, #4]
20000464:	68db      	ldr	r3, [r3, #12]
20000466:	b2db      	uxtb	r3, r3
20000468:	009b      	lsls	r3, r3, #2
2000046a:	b2da      	uxtb	r2, r3
2000046c:	200f      	movs	r0, #15
2000046e:	183b      	adds	r3, r7, r0
20000470:	188a      	adds	r2, r1, r2
20000472:	701a      	strb	r2, [r3, #0]
		unsigned char y = obj -> geo -> px[i].y + (obj -> posy) * SQUARE_WIDTH;
20000474:	687b      	ldr	r3, [r7, #4]
20000476:	681a      	ldr	r2, [r3, #0]
20000478:	697b      	ldr	r3, [r7, #20]
2000047a:	3304      	adds	r3, #4
2000047c:	005b      	lsls	r3, r3, #1
2000047e:	18d3      	adds	r3, r2, r3
20000480:	3305      	adds	r3, #5
20000482:	7819      	ldrb	r1, [r3, #0]
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	691b      	ldr	r3, [r3, #16]
20000488:	b2db      	uxtb	r3, r3
2000048a:	009b      	lsls	r3, r3, #2
2000048c:	b2da      	uxtb	r2, r3
2000048e:	240e      	movs	r4, #14
20000490:	193b      	adds	r3, r7, r4
20000492:	188a      	adds	r2, r1, r2
20000494:	701a      	strb	r2, [r3, #0]
		graphic_pixel_set(x, y);
20000496:	183b      	adds	r3, r7, r0
20000498:	781a      	ldrb	r2, [r3, #0]
2000049a:	193b      	adds	r3, r7, r4
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	0019      	movs	r1, r3
200004a0:	0010      	movs	r0, r2
200004a2:	f7ff ffc2 	bl	2000042a <graphic_pixel_set>
	for(int i = 0; i < numpixels; i++)
200004a6:	697b      	ldr	r3, [r7, #20]
200004a8:	3301      	adds	r3, #1
200004aa:	617b      	str	r3, [r7, #20]
200004ac:	697a      	ldr	r2, [r7, #20]
200004ae:	693b      	ldr	r3, [r7, #16]
200004b0:	429a      	cmp	r2, r3
200004b2:	dbce      	blt.n	20000452 <draw_object+0x16>
	}
}
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46c0      	nop			; (mov r8, r8)
200004b8:	46bd      	mov	sp, r7
200004ba:	b007      	add	sp, #28
200004bc:	bd90      	pop	{r4, r7, pc}

200004be <clear_object>:

void clear_object(POBJECT obj)
{
200004be:	b590      	push	{r4, r7, lr}
200004c0:	b087      	sub	sp, #28
200004c2:	af00      	add	r7, sp, #0
200004c4:	6078      	str	r0, [r7, #4]
	int numpixels = obj -> geo -> numpoints;
200004c6:	687b      	ldr	r3, [r7, #4]
200004c8:	681b      	ldr	r3, [r3, #0]
200004ca:	681b      	ldr	r3, [r3, #0]
200004cc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < numpixels; i++)
200004ce:	2300      	movs	r3, #0
200004d0:	617b      	str	r3, [r7, #20]
200004d2:	e02c      	b.n	2000052e <clear_object+0x70>
	{ 
		unsigned char x = obj -> geo -> px[i].x + (obj -> posx) * SQUARE_WIDTH;
200004d4:	687b      	ldr	r3, [r7, #4]
200004d6:	681a      	ldr	r2, [r3, #0]
200004d8:	697b      	ldr	r3, [r7, #20]
200004da:	3304      	adds	r3, #4
200004dc:	005b      	lsls	r3, r3, #1
200004de:	18d3      	adds	r3, r2, r3
200004e0:	3304      	adds	r3, #4
200004e2:	7819      	ldrb	r1, [r3, #0]
200004e4:	687b      	ldr	r3, [r7, #4]
200004e6:	68db      	ldr	r3, [r3, #12]
200004e8:	b2db      	uxtb	r3, r3
200004ea:	009b      	lsls	r3, r3, #2
200004ec:	b2da      	uxtb	r2, r3
200004ee:	200f      	movs	r0, #15
200004f0:	183b      	adds	r3, r7, r0
200004f2:	188a      	adds	r2, r1, r2
200004f4:	701a      	strb	r2, [r3, #0]
		unsigned char y = obj -> geo -> px[i].y + (obj -> posy) * SQUARE_WIDTH;
200004f6:	687b      	ldr	r3, [r7, #4]
200004f8:	681a      	ldr	r2, [r3, #0]
200004fa:	697b      	ldr	r3, [r7, #20]
200004fc:	3304      	adds	r3, #4
200004fe:	005b      	lsls	r3, r3, #1
20000500:	18d3      	adds	r3, r2, r3
20000502:	3305      	adds	r3, #5
20000504:	7819      	ldrb	r1, [r3, #0]
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	691b      	ldr	r3, [r3, #16]
2000050a:	b2db      	uxtb	r3, r3
2000050c:	009b      	lsls	r3, r3, #2
2000050e:	b2da      	uxtb	r2, r3
20000510:	240e      	movs	r4, #14
20000512:	193b      	adds	r3, r7, r4
20000514:	188a      	adds	r2, r1, r2
20000516:	701a      	strb	r2, [r3, #0]
		graphic_pixel_clear(x, y);
20000518:	183b      	adds	r3, r7, r0
2000051a:	781a      	ldrb	r2, [r3, #0]
2000051c:	193b      	adds	r3, r7, r4
2000051e:	781b      	ldrb	r3, [r3, #0]
20000520:	0019      	movs	r1, r3
20000522:	0010      	movs	r0, r2
20000524:	f7ff ff87 	bl	20000436 <graphic_pixel_clear>
	for(int i = 0; i < numpixels; i++)
20000528:	697b      	ldr	r3, [r7, #20]
2000052a:	3301      	adds	r3, #1
2000052c:	617b      	str	r3, [r7, #20]
2000052e:	697a      	ldr	r2, [r7, #20]
20000530:	693b      	ldr	r3, [r7, #16]
20000532:	429a      	cmp	r2, r3
20000534:	dbce      	blt.n	200004d4 <clear_object+0x16>
	}
}
20000536:	46c0      	nop			; (mov r8, r8)
20000538:	46c0      	nop			; (mov r8, r8)
2000053a:	46bd      	mov	sp, r7
2000053c:	b007      	add	sp, #28
2000053e:	bd90      	pop	{r4, r7, pc}

20000540 <set_object_speed>:

void set_object_speed(POBJECT obj, int x, int y)
{
20000540:	b580      	push	{r7, lr}
20000542:	b084      	sub	sp, #16
20000544:	af00      	add	r7, sp, #0
20000546:	60f8      	str	r0, [r7, #12]
20000548:	60b9      	str	r1, [r7, #8]
2000054a:	607a      	str	r2, [r7, #4]
	obj -> dirx = x;
2000054c:	68fb      	ldr	r3, [r7, #12]
2000054e:	68ba      	ldr	r2, [r7, #8]
20000550:	605a      	str	r2, [r3, #4]
	obj -> diry = y;
20000552:	68fb      	ldr	r3, [r7, #12]
20000554:	687a      	ldr	r2, [r7, #4]
20000556:	609a      	str	r2, [r3, #8]
}
20000558:	46c0      	nop			; (mov r8, r8)
2000055a:	46bd      	mov	sp, r7
2000055c:	b004      	add	sp, #16
2000055e:	bd80      	pop	{r7, pc}

20000560 <move_snake>:

//snake methods
void move_snake(POBJECT snakeO)
{
20000560:	b580      	push	{r7, lr}
20000562:	b082      	sub	sp, #8
20000564:	af00      	add	r7, sp, #0
20000566:	6078      	str	r0, [r7, #4]
	//deside new pos. by adding dir coordinates to list of points
	snakeO-> posx += snakeO-> dirx;
20000568:	687b      	ldr	r3, [r7, #4]
2000056a:	68da      	ldr	r2, [r3, #12]
2000056c:	687b      	ldr	r3, [r7, #4]
2000056e:	685b      	ldr	r3, [r3, #4]
20000570:	18d2      	adds	r2, r2, r3
20000572:	687b      	ldr	r3, [r7, #4]
20000574:	60da      	str	r2, [r3, #12]
	snakeO-> posy += snakeO-> diry;
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	691a      	ldr	r2, [r3, #16]
2000057a:	687b      	ldr	r3, [r7, #4]
2000057c:	689b      	ldr	r3, [r3, #8]
2000057e:	18d2      	adds	r2, r2, r3
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	611a      	str	r2, [r3, #16]
}
20000584:	46c0      	nop			; (mov r8, r8)
20000586:	46bd      	mov	sp, r7
20000588:	b002      	add	sp, #8
2000058a:	bd80      	pop	{r7, pc}

2000058c <move_apple>:

//apple methods
void move_apple(POBJECT appleO)
{
2000058c:	b580      	push	{r7, lr}
2000058e:	b082      	sub	sp, #8
20000590:	af00      	add	r7, sp, #0
20000592:	6078      	str	r0, [r7, #4]
	appleO -> posx = random_number(1, SCREEN_WIDTH);
20000594:	2120      	movs	r1, #32
20000596:	2001      	movs	r0, #1
20000598:	f7ff fd95 	bl	200000c6 <random_number>
2000059c:	0002      	movs	r2, r0
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	60da      	str	r2, [r3, #12]
	appleO -> posy = random_number(1, SCREEN_HEIGHT);
200005a2:	2110      	movs	r1, #16
200005a4:	2001      	movs	r0, #1
200005a6:	f7ff fd8e 	bl	200000c6 <random_number>
200005aa:	0002      	movs	r2, r0
200005ac:	687b      	ldr	r3, [r7, #4]
200005ae:	611a      	str	r2, [r3, #16]
}
200005b0:	46c0      	nop			; (mov r8, r8)
200005b2:	46bd      	mov	sp, r7
200005b4:	b002      	add	sp, #8
200005b6:	bd80      	pop	{r7, pc}

200005b8 <create_tail>:

	}
};


OBJECT create_tail (int x, int y) {
200005b8:	b590      	push	{r4, r7, lr}
200005ba:	b08f      	sub	sp, #60	; 0x3c
200005bc:	af00      	add	r7, sp, #0
200005be:	60f8      	str	r0, [r7, #12]
200005c0:	60b9      	str	r1, [r7, #8]
200005c2:	607a      	str	r2, [r7, #4]
	OBJECT obj = {
200005c4:	2114      	movs	r1, #20
200005c6:	187b      	adds	r3, r7, r1
200005c8:	4a12      	ldr	r2, [pc, #72]	; (20000614 <create_tail+0x5c>)
200005ca:	601a      	str	r2, [r3, #0]
200005cc:	187b      	adds	r3, r7, r1
200005ce:	2200      	movs	r2, #0
200005d0:	605a      	str	r2, [r3, #4]
200005d2:	187b      	adds	r3, r7, r1
200005d4:	2200      	movs	r2, #0
200005d6:	609a      	str	r2, [r3, #8]
200005d8:	187b      	adds	r3, r7, r1
200005da:	68ba      	ldr	r2, [r7, #8]
200005dc:	60da      	str	r2, [r3, #12]
200005de:	187b      	adds	r3, r7, r1
200005e0:	687a      	ldr	r2, [r7, #4]
200005e2:	611a      	str	r2, [r3, #16]
200005e4:	187b      	adds	r3, r7, r1
200005e6:	4a0c      	ldr	r2, [pc, #48]	; (20000618 <create_tail+0x60>)
200005e8:	615a      	str	r2, [r3, #20]
200005ea:	187b      	adds	r3, r7, r1
200005ec:	4a0b      	ldr	r2, [pc, #44]	; (2000061c <create_tail+0x64>)
200005ee:	619a      	str	r2, [r3, #24]
200005f0:	187b      	adds	r3, r7, r1
200005f2:	4a0b      	ldr	r2, [pc, #44]	; (20000620 <create_tail+0x68>)
200005f4:	61da      	str	r2, [r3, #28]
200005f6:	187b      	adds	r3, r7, r1
200005f8:	4a0a      	ldr	r2, [pc, #40]	; (20000624 <create_tail+0x6c>)
200005fa:	621a      	str	r2, [r3, #32]
		draw_object,
		clear_object,
		move_snake,
		set_object_speed
	};
	return obj;
200005fc:	68fb      	ldr	r3, [r7, #12]
200005fe:	187a      	adds	r2, r7, r1
20000600:	ca13      	ldmia	r2!, {r0, r1, r4}
20000602:	c313      	stmia	r3!, {r0, r1, r4}
20000604:	ca13      	ldmia	r2!, {r0, r1, r4}
20000606:	c313      	stmia	r3!, {r0, r1, r4}
20000608:	ca13      	ldmia	r2!, {r0, r1, r4}
2000060a:	c313      	stmia	r3!, {r0, r1, r4}
}
2000060c:	68f8      	ldr	r0, [r7, #12]
2000060e:	46bd      	mov	sp, r7
20000610:	b00f      	add	sp, #60	; 0x3c
20000612:	bd90      	pop	{r4, r7, pc}
20000614:	20007030 	andcs	r7, r0, r0, lsr r0
20000618:	2000043d 	andcs	r0, r0, sp, lsr r4
2000061c:	200004bf 			; <UNDEFINED> instruction: 0x200004bf
20000620:	20000561 	andcs	r0, r0, r1, ror #10
20000624:	20000541 	andcs	r0, r0, r1, asr #10

20000628 <draw_objarr>:

void draw_objarr(OBJECT obj[], int amount) {
20000628:	b580      	push	{r7, lr}
2000062a:	b084      	sub	sp, #16
2000062c:	af00      	add	r7, sp, #0
2000062e:	6078      	str	r0, [r7, #4]
20000630:	6039      	str	r1, [r7, #0]
	// draws amount members of pobject array
	for (int i = 0; i < amount; i++) {
20000632:	2300      	movs	r3, #0
20000634:	60fb      	str	r3, [r7, #12]
20000636:	e00d      	b.n	20000654 <draw_objarr+0x2c>
		draw_object(&obj[i]);
20000638:	68fa      	ldr	r2, [r7, #12]
2000063a:	0013      	movs	r3, r2
2000063c:	00db      	lsls	r3, r3, #3
2000063e:	189b      	adds	r3, r3, r2
20000640:	009b      	lsls	r3, r3, #2
20000642:	001a      	movs	r2, r3
20000644:	687b      	ldr	r3, [r7, #4]
20000646:	189b      	adds	r3, r3, r2
20000648:	0018      	movs	r0, r3
2000064a:	f7ff fef7 	bl	2000043c <draw_object>
	for (int i = 0; i < amount; i++) {
2000064e:	68fb      	ldr	r3, [r7, #12]
20000650:	3301      	adds	r3, #1
20000652:	60fb      	str	r3, [r7, #12]
20000654:	68fa      	ldr	r2, [r7, #12]
20000656:	683b      	ldr	r3, [r7, #0]
20000658:	429a      	cmp	r2, r3
2000065a:	dbed      	blt.n	20000638 <draw_objarr+0x10>
	}
}
2000065c:	46c0      	nop			; (mov r8, r8)
2000065e:	46c0      	nop			; (mov r8, r8)
20000660:	46bd      	mov	sp, r7
20000662:	b004      	add	sp, #16
20000664:	bd80      	pop	{r7, pc}

20000666 <move_o1_o2>:

void move_o1_o2(OBJECT o1, OBJECT o2) {
20000666:	b084      	sub	sp, #16
20000668:	b5b0      	push	{r4, r5, r7, lr}
2000066a:	46c6      	mov	lr, r8
2000066c:	b500      	push	{lr}
2000066e:	af00      	add	r7, sp, #0
20000670:	250c      	movs	r5, #12
20000672:	2408      	movs	r4, #8
20000674:	193c      	adds	r4, r7, r4
20000676:	1964      	adds	r4, r4, r5
20000678:	6020      	str	r0, [r4, #0]
2000067a:	6061      	str	r1, [r4, #4]
2000067c:	60a2      	str	r2, [r4, #8]
2000067e:	60e3      	str	r3, [r4, #12]
	// moves o1 to o2
	if (o1.posx!=o2.posx && o1.posy!=o2.posy) {
20000680:	0029      	movs	r1, r5
20000682:	2308      	movs	r3, #8
20000684:	18fb      	adds	r3, r7, r3
20000686:	185b      	adds	r3, r3, r1
20000688:	68da      	ldr	r2, [r3, #12]
2000068a:	2324      	movs	r3, #36	; 0x24
2000068c:	200c      	movs	r0, #12
2000068e:	4684      	mov	ip, r0
20000690:	2008      	movs	r0, #8
20000692:	1838      	adds	r0, r7, r0
20000694:	4680      	mov	r8, r0
20000696:	44c4      	add	ip, r8
20000698:	4463      	add	r3, ip
2000069a:	68db      	ldr	r3, [r3, #12]
2000069c:	429a      	cmp	r2, r3
2000069e:	d028      	beq.n	200006f2 <move_o1_o2+0x8c>
200006a0:	2308      	movs	r3, #8
200006a2:	18fb      	adds	r3, r7, r3
200006a4:	185b      	adds	r3, r3, r1
200006a6:	691a      	ldr	r2, [r3, #16]
200006a8:	2324      	movs	r3, #36	; 0x24
200006aa:	200c      	movs	r0, #12
200006ac:	4684      	mov	ip, r0
200006ae:	2008      	movs	r0, #8
200006b0:	1838      	adds	r0, r7, r0
200006b2:	4680      	mov	r8, r0
200006b4:	44c4      	add	ip, r8
200006b6:	4463      	add	r3, ip
200006b8:	691b      	ldr	r3, [r3, #16]
200006ba:	429a      	cmp	r2, r3
200006bc:	d019      	beq.n	200006f2 <move_o1_o2+0x8c>
		o1.posx=o2.posx;
200006be:	2324      	movs	r3, #36	; 0x24
200006c0:	220c      	movs	r2, #12
200006c2:	4694      	mov	ip, r2
200006c4:	2208      	movs	r2, #8
200006c6:	18ba      	adds	r2, r7, r2
200006c8:	4690      	mov	r8, r2
200006ca:	44c4      	add	ip, r8
200006cc:	4463      	add	r3, ip
200006ce:	68da      	ldr	r2, [r3, #12]
200006d0:	2308      	movs	r3, #8
200006d2:	18fb      	adds	r3, r7, r3
200006d4:	185b      	adds	r3, r3, r1
200006d6:	60da      	str	r2, [r3, #12]
		o1.posy=o2.posy;
200006d8:	2324      	movs	r3, #36	; 0x24
200006da:	220c      	movs	r2, #12
200006dc:	4694      	mov	ip, r2
200006de:	2208      	movs	r2, #8
200006e0:	18ba      	adds	r2, r7, r2
200006e2:	4690      	mov	r8, r2
200006e4:	44c4      	add	ip, r8
200006e6:	4463      	add	r3, ip
200006e8:	691a      	ldr	r2, [r3, #16]
200006ea:	2308      	movs	r3, #8
200006ec:	18fb      	adds	r3, r7, r3
200006ee:	185b      	adds	r3, r3, r1
200006f0:	611a      	str	r2, [r3, #16]
	}
}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	bc04      	pop	{r2}
200006f8:	4690      	mov	r8, r2
200006fa:	bcb0      	pop	{r4, r5, r7}
200006fc:	bc08      	pop	{r3}
200006fe:	b004      	add	sp, #16
20000700:	4718      	bx	r3

20000702 <object_collides>:
//DEFINED OBJ.------------------------

//collision detection-------------------------------

char object_collides(POBJECT o1, POBJECT o2)
{	
20000702:	b580      	push	{r7, lr}
20000704:	b082      	sub	sp, #8
20000706:	af00      	add	r7, sp, #0
20000708:	6078      	str	r0, [r7, #4]
2000070a:	6039      	str	r1, [r7, #0]
	// objects collides
	return (o1 -> posx == o2 -> posx && o1->posy == o2->posy);
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	68da      	ldr	r2, [r3, #12]
20000710:	683b      	ldr	r3, [r7, #0]
20000712:	68db      	ldr	r3, [r3, #12]
20000714:	429a      	cmp	r2, r3
20000716:	d107      	bne.n	20000728 <object_collides+0x26>
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	691a      	ldr	r2, [r3, #16]
2000071c:	683b      	ldr	r3, [r7, #0]
2000071e:	691b      	ldr	r3, [r3, #16]
20000720:	429a      	cmp	r2, r3
20000722:	d101      	bne.n	20000728 <object_collides+0x26>
20000724:	2301      	movs	r3, #1
20000726:	e000      	b.n	2000072a <object_collides+0x28>
20000728:	2300      	movs	r3, #0
2000072a:	b2db      	uxtb	r3, r3
}
2000072c:	0018      	movs	r0, r3
2000072e:	46bd      	mov	sp, r7
20000730:	b002      	add	sp, #8
20000732:	bd80      	pop	{r7, pc}

20000734 <game_over>:
//FUNC.-------------------------------
char game_over(POBJECT snake_head, OBJECT snake_tail[], int points)
{
20000734:	b580      	push	{r7, lr}
20000736:	b086      	sub	sp, #24
20000738:	af00      	add	r7, sp, #0
2000073a:	60f8      	str	r0, [r7, #12]
2000073c:	60b9      	str	r1, [r7, #8]
2000073e:	607a      	str	r2, [r7, #4]
	// out of bounds detection
	if (snake_head->posx < 0 ||
20000740:	68fb      	ldr	r3, [r7, #12]
20000742:	68db      	ldr	r3, [r3, #12]
20000744:	2b00      	cmp	r3, #0
20000746:	db0b      	blt.n	20000760 <game_over+0x2c>
		snake_head->posx > SCREEN_WIDTH ||
20000748:	68fb      	ldr	r3, [r7, #12]
2000074a:	68db      	ldr	r3, [r3, #12]
	if (snake_head->posx < 0 ||
2000074c:	2b20      	cmp	r3, #32
2000074e:	dc07      	bgt.n	20000760 <game_over+0x2c>
		snake_head->posy < 0 ||
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	691b      	ldr	r3, [r3, #16]
		snake_head->posx > SCREEN_WIDTH ||
20000754:	2b00      	cmp	r3, #0
20000756:	db03      	blt.n	20000760 <game_over+0x2c>
		snake_head->posy > SCREEN_HEIGHT) {
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	691b      	ldr	r3, [r3, #16]
		snake_head->posy < 0 ||
2000075c:	2b10      	cmp	r3, #16
2000075e:	dd01      	ble.n	20000764 <game_over+0x30>
		return 1;
20000760:	2301      	movs	r3, #1
20000762:	e026      	b.n	200007b2 <game_over+0x7e>
	}
	// tail detection
	for (int i=0; i<points; i++) {
20000764:	2300      	movs	r3, #0
20000766:	617b      	str	r3, [r7, #20]
20000768:	e01e      	b.n	200007a8 <game_over+0x74>
		if (snake_tail[i].posx == snake_head->posx &&
2000076a:	697a      	ldr	r2, [r7, #20]
2000076c:	0013      	movs	r3, r2
2000076e:	00db      	lsls	r3, r3, #3
20000770:	189b      	adds	r3, r3, r2
20000772:	009b      	lsls	r3, r3, #2
20000774:	001a      	movs	r2, r3
20000776:	68bb      	ldr	r3, [r7, #8]
20000778:	189b      	adds	r3, r3, r2
2000077a:	68da      	ldr	r2, [r3, #12]
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	68db      	ldr	r3, [r3, #12]
20000780:	429a      	cmp	r2, r3
20000782:	d10e      	bne.n	200007a2 <game_over+0x6e>
			snake_tail[i].posy == snake_head->posy) {
20000784:	697a      	ldr	r2, [r7, #20]
20000786:	0013      	movs	r3, r2
20000788:	00db      	lsls	r3, r3, #3
2000078a:	189b      	adds	r3, r3, r2
2000078c:	009b      	lsls	r3, r3, #2
2000078e:	001a      	movs	r2, r3
20000790:	68bb      	ldr	r3, [r7, #8]
20000792:	189b      	adds	r3, r3, r2
20000794:	691a      	ldr	r2, [r3, #16]
20000796:	68fb      	ldr	r3, [r7, #12]
20000798:	691b      	ldr	r3, [r3, #16]
		if (snake_tail[i].posx == snake_head->posx &&
2000079a:	429a      	cmp	r2, r3
2000079c:	d101      	bne.n	200007a2 <game_over+0x6e>
			return 1;
2000079e:	2301      	movs	r3, #1
200007a0:	e007      	b.n	200007b2 <game_over+0x7e>
	for (int i=0; i<points; i++) {
200007a2:	697b      	ldr	r3, [r7, #20]
200007a4:	3301      	adds	r3, #1
200007a6:	617b      	str	r3, [r7, #20]
200007a8:	697a      	ldr	r2, [r7, #20]
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	429a      	cmp	r2, r3
200007ae:	dbdc      	blt.n	2000076a <game_over+0x36>
		}
	}
	return 0;
200007b0:	2300      	movs	r3, #0
}
200007b2:	0018      	movs	r0, r3
200007b4:	46bd      	mov	sp, r7
200007b6:	b006      	add	sp, #24
200007b8:	bd80      	pop	{r7, pc}

200007ba <main_menu>:



//MAIN------------------------------
void main_menu() {
200007ba:	b580      	push	{r7, lr}
200007bc:	af00      	add	r7, sp, #0
	write_ascii("High score: 3450", "Press any key:");
200007be:	4a08      	ldr	r2, [pc, #32]	; (200007e0 <main_menu+0x26>)
200007c0:	4b08      	ldr	r3, [pc, #32]	; (200007e4 <main_menu+0x2a>)
200007c2:	0011      	movs	r1, r2
200007c4:	0018      	movs	r0, r3
200007c6:	f7ff fdfd 	bl	200003c4 <write_ascii>
	while (keyb() == 0xFF);
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	f000 fa02 	bl	20000bd4 <keyb>
200007d0:	0003      	movs	r3, r0
200007d2:	2bff      	cmp	r3, #255	; 0xff
200007d4:	d0fa      	beq.n	200007cc <main_menu+0x12>
}
200007d6:	46c0      	nop			; (mov r8, r8)
200007d8:	46c0      	nop			; (mov r8, r8)
200007da:	46bd      	mov	sp, r7
200007dc:	bd80      	pop	{r7, pc}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	2000a03c 	andcs	sl, r0, ip, lsr r0
200007e4:	2000a04c 	andcs	sl, r0, ip, asr #32

200007e8 <main>:

void main(void)
{
200007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
200007ea:	4cbd      	ldr	r4, [pc, #756]	; (20000ae0 <main+0x2f8>)
200007ec:	44a5      	add	sp, r4
200007ee:	af0e      	add	r7, sp, #56	; 0x38
	//game init
	init_app();
200007f0:	f000 fa6c 	bl	20000ccc <init_app>
	graphic_initalize();
200007f4:	f7ff fe16 	bl	20000424 <graphic_initalize>
	graphic_clear_screen();
200007f8:	f7ff fe1a 	bl	20000430 <graphic_clear_screen>

	//object declarations
	main_menu();
200007fc:	f7ff ffdd 	bl	200007ba <main_menu>
	POBJECT appleO = &apple;
20000800:	4bb8      	ldr	r3, [pc, #736]	; (20000ae4 <main+0x2fc>)
20000802:	4ab9      	ldr	r2, [pc, #740]	; (20000ae8 <main+0x300>)
20000804:	18b9      	adds	r1, r7, r2
20000806:	600b      	str	r3, [r1, #0]
	POBJECT snake_head = &snake;
20000808:	4bb8      	ldr	r3, [pc, #736]	; (20000aec <main+0x304>)
2000080a:	49b9      	ldr	r1, [pc, #740]	; (20000af0 <main+0x308>)
2000080c:	1879      	adds	r1, r7, r1
2000080e:	600b      	str	r3, [r1, #0]
	OBJECT snake_tail[16*32];	
	appleO -> draw(appleO);
20000810:	18bb      	adds	r3, r7, r2
20000812:	681b      	ldr	r3, [r3, #0]
20000814:	695b      	ldr	r3, [r3, #20]
20000816:	18ba      	adds	r2, r7, r2
20000818:	6812      	ldr	r2, [r2, #0]
2000081a:	0010      	movs	r0, r2
2000081c:	4798      	blx	r3
	// game loop
	while (!game_over(snake_head, snake_tail, points)) 
2000081e:	e140      	b.n	20000aa2 <main+0x2ba>
	{
		graphic_clear_screen();
20000820:	f7ff fe06 	bl	20000430 <graphic_clear_screen>
		// render changes
		appleO -> draw(appleO);
20000824:	4cb0      	ldr	r4, [pc, #704]	; (20000ae8 <main+0x300>)
20000826:	193b      	adds	r3, r7, r4
20000828:	681b      	ldr	r3, [r3, #0]
2000082a:	695b      	ldr	r3, [r3, #20]
2000082c:	193a      	adds	r2, r7, r4
2000082e:	6812      	ldr	r2, [r2, #0]
20000830:	0010      	movs	r0, r2
20000832:	4798      	blx	r3
		draw_object(snake_head);
20000834:	4dae      	ldr	r5, [pc, #696]	; (20000af0 <main+0x308>)
20000836:	197b      	adds	r3, r7, r5
20000838:	681b      	ldr	r3, [r3, #0]
2000083a:	0018      	movs	r0, r3
2000083c:	f7ff fdfe 	bl	2000043c <draw_object>
		draw_objarr(snake_tail, points);
20000840:	4bac      	ldr	r3, [pc, #688]	; (20000af4 <main+0x30c>)
20000842:	681b      	ldr	r3, [r3, #0]
20000844:	001a      	movs	r2, r3
20000846:	2328      	movs	r3, #40	; 0x28
20000848:	18fb      	adds	r3, r7, r3
2000084a:	0011      	movs	r1, r2
2000084c:	0018      	movs	r0, r3
2000084e:	f7ff feeb 	bl	20000628 <draw_objarr>
		// if snake eats apple
		if(object_collides(snake_head, appleO))
20000852:	193b      	adds	r3, r7, r4
20000854:	681a      	ldr	r2, [r3, #0]
20000856:	197b      	adds	r3, r7, r5
20000858:	681b      	ldr	r3, [r3, #0]
2000085a:	0011      	movs	r1, r2
2000085c:	0018      	movs	r0, r3
2000085e:	f7ff ff50 	bl	20000702 <object_collides>
20000862:	1e03      	subs	r3, r0, #0
20000864:	d040      	beq.n	200008e8 <main+0x100>
		{
			//write score
			write_ascii("Score: ", "");
20000866:	4aa4      	ldr	r2, [pc, #656]	; (20000af8 <main+0x310>)
20000868:	4ba4      	ldr	r3, [pc, #656]	; (20000afc <main+0x314>)
2000086a:	0011      	movs	r1, r2
2000086c:	0018      	movs	r0, r3
2000086e:	f7ff fda9 	bl	200003c4 <write_ascii>
			// move apple to random location
			move_apple(appleO);
20000872:	193b      	adds	r3, r7, r4
20000874:	681b      	ldr	r3, [r3, #0]
20000876:	0018      	movs	r0, r3
20000878:	f7ff fe88 	bl	2000058c <move_apple>
			// add tail
			for (int i = 0; i < TAIL_INCREMENT; i++) {
2000087c:	2300      	movs	r3, #0
2000087e:	4aa0      	ldr	r2, [pc, #640]	; (20000b00 <main+0x318>)
20000880:	18ba      	adds	r2, r7, r2
20000882:	6013      	str	r3, [r2, #0]
20000884:	e02a      	b.n	200008dc <main+0xf4>
				snake_tail[points] = create_tail(snake_head->posx,snake_head->posy);
20000886:	4a9a      	ldr	r2, [pc, #616]	; (20000af0 <main+0x308>)
20000888:	18bb      	adds	r3, r7, r2
2000088a:	681b      	ldr	r3, [r3, #0]
2000088c:	68d9      	ldr	r1, [r3, #12]
2000088e:	18bb      	adds	r3, r7, r2
20000890:	681b      	ldr	r3, [r3, #0]
20000892:	691a      	ldr	r2, [r3, #16]
20000894:	4b97      	ldr	r3, [pc, #604]	; (20000af4 <main+0x30c>)
20000896:	681b      	ldr	r3, [r3, #0]
20000898:	489a      	ldr	r0, [pc, #616]	; (20000b04 <main+0x31c>)
2000089a:	4e9b      	ldr	r6, [pc, #620]	; (20000b08 <main+0x320>)
2000089c:	19bc      	adds	r4, r7, r6
2000089e:	1825      	adds	r5, r4, r0
200008a0:	001c      	movs	r4, r3
200008a2:	00e4      	lsls	r4, r4, #3
200008a4:	18e4      	adds	r4, r4, r3
200008a6:	00a3      	lsls	r3, r4, #2
200008a8:	001c      	movs	r4, r3
200008aa:	003b      	movs	r3, r7
200008ac:	0018      	movs	r0, r3
200008ae:	f7ff fe83 	bl	200005b8 <create_tail>
200008b2:	4b96      	ldr	r3, [pc, #600]	; (20000b0c <main+0x324>)
200008b4:	19ba      	adds	r2, r7, r6
200008b6:	18d2      	adds	r2, r2, r3
200008b8:	192b      	adds	r3, r5, r4
200008ba:	ca13      	ldmia	r2!, {r0, r1, r4}
200008bc:	c313      	stmia	r3!, {r0, r1, r4}
200008be:	ca13      	ldmia	r2!, {r0, r1, r4}
200008c0:	c313      	stmia	r3!, {r0, r1, r4}
200008c2:	ca13      	ldmia	r2!, {r0, r1, r4}
200008c4:	c313      	stmia	r3!, {r0, r1, r4}
				// tally new size of snake by increasing points
				points++;
200008c6:	4b8b      	ldr	r3, [pc, #556]	; (20000af4 <main+0x30c>)
200008c8:	681b      	ldr	r3, [r3, #0]
200008ca:	1c5a      	adds	r2, r3, #1
200008cc:	4b89      	ldr	r3, [pc, #548]	; (20000af4 <main+0x30c>)
200008ce:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < TAIL_INCREMENT; i++) {
200008d0:	4a8b      	ldr	r2, [pc, #556]	; (20000b00 <main+0x318>)
200008d2:	18bb      	adds	r3, r7, r2
200008d4:	681b      	ldr	r3, [r3, #0]
200008d6:	3301      	adds	r3, #1
200008d8:	18ba      	adds	r2, r7, r2
200008da:	6013      	str	r3, [r2, #0]
200008dc:	4b88      	ldr	r3, [pc, #544]	; (20000b00 <main+0x318>)
200008de:	18fb      	adds	r3, r7, r3
200008e0:	681b      	ldr	r3, [r3, #0]
200008e2:	2b1d      	cmp	r3, #29
200008e4:	ddcf      	ble.n	20000886 <main+0x9e>
200008e6:	e09b      	b.n	20000a20 <main+0x238>
			}
			
		} else if (points>0) {
200008e8:	4b82      	ldr	r3, [pc, #520]	; (20000af4 <main+0x30c>)
200008ea:	681b      	ldr	r3, [r3, #0]
200008ec:	2b00      	cmp	r3, #0
200008ee:	d100      	bne.n	200008f2 <main+0x10a>
200008f0:	e096      	b.n	20000a20 <main+0x238>
			// else move entire tail forward
			for (int i=0; i<points-1; i++) {
200008f2:	2300      	movs	r3, #0
200008f4:	4a86      	ldr	r2, [pc, #536]	; (20000b10 <main+0x328>)
200008f6:	18ba      	adds	r2, r7, r2
200008f8:	6013      	str	r3, [r2, #0]
200008fa:	e067      	b.n	200009cc <main+0x1e4>
				move_o1_o2(snake_tail[i], snake_tail[i+1]);
200008fc:	4d84      	ldr	r5, [pc, #528]	; (20000b10 <main+0x328>)
200008fe:	197b      	adds	r3, r7, r5
20000900:	681b      	ldr	r3, [r3, #0]
20000902:	1c59      	adds	r1, r3, #1
20000904:	4b7f      	ldr	r3, [pc, #508]	; (20000b04 <main+0x31c>)
20000906:	4e80      	ldr	r6, [pc, #512]	; (20000b08 <main+0x320>)
20000908:	19ba      	adds	r2, r7, r6
2000090a:	18d4      	adds	r4, r2, r3
2000090c:	197b      	adds	r3, r7, r5
2000090e:	681a      	ldr	r2, [r3, #0]
20000910:	0013      	movs	r3, r2
20000912:	00db      	lsls	r3, r3, #3
20000914:	189b      	adds	r3, r3, r2
20000916:	009b      	lsls	r3, r3, #2
20000918:	4a7a      	ldr	r2, [pc, #488]	; (20000b04 <main+0x31c>)
2000091a:	19b8      	adds	r0, r7, r6
2000091c:	1880      	adds	r0, r0, r2
2000091e:	000a      	movs	r2, r1
20000920:	00d2      	lsls	r2, r2, #3
20000922:	1852      	adds	r2, r2, r1
20000924:	0092      	lsls	r2, r2, #2
20000926:	2114      	movs	r1, #20
20000928:	4469      	add	r1, sp
2000092a:	1882      	adds	r2, r0, r2
2000092c:	ca61      	ldmia	r2!, {r0, r5, r6}
2000092e:	c161      	stmia	r1!, {r0, r5, r6}
20000930:	ca61      	ldmia	r2!, {r0, r5, r6}
20000932:	c161      	stmia	r1!, {r0, r5, r6}
20000934:	ca61      	ldmia	r2!, {r0, r5, r6}
20000936:	c161      	stmia	r1!, {r0, r5, r6}
20000938:	2110      	movs	r1, #16
2000093a:	18e2      	adds	r2, r4, r3
2000093c:	1851      	adds	r1, r2, r1
2000093e:	466a      	mov	r2, sp
20000940:	c961      	ldmia	r1!, {r0, r5, r6}
20000942:	c261      	stmia	r2!, {r0, r5, r6}
20000944:	c921      	ldmia	r1!, {r0, r5}
20000946:	c221      	stmia	r2!, {r0, r5}
20000948:	5918      	ldr	r0, [r3, r4]
2000094a:	18e2      	adds	r2, r4, r3
2000094c:	6851      	ldr	r1, [r2, #4]
2000094e:	18e2      	adds	r2, r4, r3
20000950:	6892      	ldr	r2, [r2, #8]
20000952:	18e3      	adds	r3, r4, r3
20000954:	68db      	ldr	r3, [r3, #12]
20000956:	f7ff fe86 	bl	20000666 <move_o1_o2>
				snake_tail[i].posx=snake_tail[i+1].posx;
2000095a:	4d6d      	ldr	r5, [pc, #436]	; (20000b10 <main+0x328>)
2000095c:	197b      	adds	r3, r7, r5
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	1c5a      	adds	r2, r3, #1
20000962:	4b68      	ldr	r3, [pc, #416]	; (20000b04 <main+0x31c>)
20000964:	4e68      	ldr	r6, [pc, #416]	; (20000b08 <main+0x320>)
20000966:	19b9      	adds	r1, r7, r6
20000968:	18c9      	adds	r1, r1, r3
2000096a:	0013      	movs	r3, r2
2000096c:	00db      	lsls	r3, r3, #3
2000096e:	189b      	adds	r3, r3, r2
20000970:	009b      	lsls	r3, r3, #2
20000972:	18cb      	adds	r3, r1, r3
20000974:	330c      	adds	r3, #12
20000976:	6819      	ldr	r1, [r3, #0]
20000978:	4b62      	ldr	r3, [pc, #392]	; (20000b04 <main+0x31c>)
2000097a:	19ba      	adds	r2, r7, r6
2000097c:	18d0      	adds	r0, r2, r3
2000097e:	197b      	adds	r3, r7, r5
20000980:	681a      	ldr	r2, [r3, #0]
20000982:	0013      	movs	r3, r2
20000984:	00db      	lsls	r3, r3, #3
20000986:	189b      	adds	r3, r3, r2
20000988:	009b      	lsls	r3, r3, #2
2000098a:	18c3      	adds	r3, r0, r3
2000098c:	330c      	adds	r3, #12
2000098e:	6019      	str	r1, [r3, #0]
				snake_tail[i].posy=snake_tail[i+1].posy;
20000990:	197b      	adds	r3, r7, r5
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	1c5a      	adds	r2, r3, #1
20000996:	4b5b      	ldr	r3, [pc, #364]	; (20000b04 <main+0x31c>)
20000998:	19b9      	adds	r1, r7, r6
2000099a:	18c9      	adds	r1, r1, r3
2000099c:	0013      	movs	r3, r2
2000099e:	00db      	lsls	r3, r3, #3
200009a0:	189b      	adds	r3, r3, r2
200009a2:	009b      	lsls	r3, r3, #2
200009a4:	18cb      	adds	r3, r1, r3
200009a6:	3310      	adds	r3, #16
200009a8:	6819      	ldr	r1, [r3, #0]
200009aa:	4b56      	ldr	r3, [pc, #344]	; (20000b04 <main+0x31c>)
200009ac:	19ba      	adds	r2, r7, r6
200009ae:	18d0      	adds	r0, r2, r3
200009b0:	197b      	adds	r3, r7, r5
200009b2:	681a      	ldr	r2, [r3, #0]
200009b4:	0013      	movs	r3, r2
200009b6:	00db      	lsls	r3, r3, #3
200009b8:	189b      	adds	r3, r3, r2
200009ba:	009b      	lsls	r3, r3, #2
200009bc:	18c3      	adds	r3, r0, r3
200009be:	3310      	adds	r3, #16
200009c0:	6019      	str	r1, [r3, #0]
			for (int i=0; i<points-1; i++) {
200009c2:	197b      	adds	r3, r7, r5
200009c4:	681b      	ldr	r3, [r3, #0]
200009c6:	3301      	adds	r3, #1
200009c8:	197a      	adds	r2, r7, r5
200009ca:	6013      	str	r3, [r2, #0]
200009cc:	4b49      	ldr	r3, [pc, #292]	; (20000af4 <main+0x30c>)
200009ce:	681b      	ldr	r3, [r3, #0]
200009d0:	1e5a      	subs	r2, r3, #1
200009d2:	4b4f      	ldr	r3, [pc, #316]	; (20000b10 <main+0x328>)
200009d4:	18fb      	adds	r3, r7, r3
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	429a      	cmp	r2, r3
200009da:	d88f      	bhi.n	200008fc <main+0x114>
			}
			// move closest tail piece to previous snake_head position
			snake_tail[points-1].posx = snake_head->posx;
200009dc:	4b45      	ldr	r3, [pc, #276]	; (20000af4 <main+0x30c>)
200009de:	681b      	ldr	r3, [r3, #0]
200009e0:	1e5a      	subs	r2, r3, #1
200009e2:	4c43      	ldr	r4, [pc, #268]	; (20000af0 <main+0x308>)
200009e4:	193b      	adds	r3, r7, r4
200009e6:	681b      	ldr	r3, [r3, #0]
200009e8:	68d9      	ldr	r1, [r3, #12]
200009ea:	4b46      	ldr	r3, [pc, #280]	; (20000b04 <main+0x31c>)
200009ec:	4d46      	ldr	r5, [pc, #280]	; (20000b08 <main+0x320>)
200009ee:	1978      	adds	r0, r7, r5
200009f0:	18c0      	adds	r0, r0, r3
200009f2:	0013      	movs	r3, r2
200009f4:	00db      	lsls	r3, r3, #3
200009f6:	189b      	adds	r3, r3, r2
200009f8:	009b      	lsls	r3, r3, #2
200009fa:	18c3      	adds	r3, r0, r3
200009fc:	330c      	adds	r3, #12
200009fe:	6019      	str	r1, [r3, #0]
			snake_tail[points-1].posy = snake_head->posy;			
20000a00:	4b3c      	ldr	r3, [pc, #240]	; (20000af4 <main+0x30c>)
20000a02:	681b      	ldr	r3, [r3, #0]
20000a04:	1e5a      	subs	r2, r3, #1
20000a06:	193b      	adds	r3, r7, r4
20000a08:	681b      	ldr	r3, [r3, #0]
20000a0a:	6919      	ldr	r1, [r3, #16]
20000a0c:	4b3d      	ldr	r3, [pc, #244]	; (20000b04 <main+0x31c>)
20000a0e:	1978      	adds	r0, r7, r5
20000a10:	18c0      	adds	r0, r0, r3
20000a12:	0013      	movs	r3, r2
20000a14:	00db      	lsls	r3, r3, #3
20000a16:	189b      	adds	r3, r3, r2
20000a18:	009b      	lsls	r3, r3, #2
20000a1a:	18c3      	adds	r3, r0, r3
20000a1c:	3310      	adds	r3, #16
20000a1e:	6019      	str	r1, [r3, #0]
		}
		// game logic
		//keypad input
		switch (keyb()) {
20000a20:	f000 f8d8 	bl	20000bd4 <keyb>
20000a24:	0003      	movs	r3, r0
20000a26:	2b08      	cmp	r3, #8
20000a28:	d028      	beq.n	20000a7c <main+0x294>
20000a2a:	dc31      	bgt.n	20000a90 <main+0x2a8>
20000a2c:	2b06      	cmp	r3, #6
20000a2e:	d005      	beq.n	20000a3c <main+0x254>
20000a30:	dc2e      	bgt.n	20000a90 <main+0x2a8>
20000a32:	2b02      	cmp	r3, #2
20000a34:	d017      	beq.n	20000a66 <main+0x27e>
20000a36:	2b04      	cmp	r3, #4
20000a38:	d00a      	beq.n	20000a50 <main+0x268>
20000a3a:	e029      	b.n	20000a90 <main+0x2a8>
			// right
			case 6: snake_head -> set_speed(snake_head, 1, 0); break;
20000a3c:	4a2c      	ldr	r2, [pc, #176]	; (20000af0 <main+0x308>)
20000a3e:	18bb      	adds	r3, r7, r2
20000a40:	681b      	ldr	r3, [r3, #0]
20000a42:	6a1b      	ldr	r3, [r3, #32]
20000a44:	18ba      	adds	r2, r7, r2
20000a46:	6810      	ldr	r0, [r2, #0]
20000a48:	2200      	movs	r2, #0
20000a4a:	2101      	movs	r1, #1
20000a4c:	4798      	blx	r3
20000a4e:	e01f      	b.n	20000a90 <main+0x2a8>
			// left
			case 4: snake_head -> set_speed(snake_head, -1, 0); break;
20000a50:	4827      	ldr	r0, [pc, #156]	; (20000af0 <main+0x308>)
20000a52:	183b      	adds	r3, r7, r0
20000a54:	681b      	ldr	r3, [r3, #0]
20000a56:	6a1b      	ldr	r3, [r3, #32]
20000a58:	2201      	movs	r2, #1
20000a5a:	4251      	negs	r1, r2
20000a5c:	183a      	adds	r2, r7, r0
20000a5e:	6810      	ldr	r0, [r2, #0]
20000a60:	2200      	movs	r2, #0
20000a62:	4798      	blx	r3
20000a64:	e014      	b.n	20000a90 <main+0x2a8>
			// up
			case 2: snake_head -> set_speed(snake_head, 0, -1); break;
20000a66:	4922      	ldr	r1, [pc, #136]	; (20000af0 <main+0x308>)
20000a68:	187b      	adds	r3, r7, r1
20000a6a:	681b      	ldr	r3, [r3, #0]
20000a6c:	6a1b      	ldr	r3, [r3, #32]
20000a6e:	2201      	movs	r2, #1
20000a70:	4252      	negs	r2, r2
20000a72:	1879      	adds	r1, r7, r1
20000a74:	6808      	ldr	r0, [r1, #0]
20000a76:	2100      	movs	r1, #0
20000a78:	4798      	blx	r3
20000a7a:	e009      	b.n	20000a90 <main+0x2a8>
			// down
			case 8: snake_head -> set_speed(snake_head, 0, 1); break;
20000a7c:	4a1c      	ldr	r2, [pc, #112]	; (20000af0 <main+0x308>)
20000a7e:	18bb      	adds	r3, r7, r2
20000a80:	681b      	ldr	r3, [r3, #0]
20000a82:	6a1b      	ldr	r3, [r3, #32]
20000a84:	18ba      	adds	r2, r7, r2
20000a86:	6810      	ldr	r0, [r2, #0]
20000a88:	2201      	movs	r2, #1
20000a8a:	2100      	movs	r1, #0
20000a8c:	4798      	blx	r3
20000a8e:	46c0      	nop			; (mov r8, r8)
		}
			
		// move snake
		move_snake(snake_head);
20000a90:	4b17      	ldr	r3, [pc, #92]	; (20000af0 <main+0x308>)
20000a92:	18fb      	adds	r3, r7, r3
20000a94:	681b      	ldr	r3, [r3, #0]
20000a96:	0018      	movs	r0, r3
20000a98:	f7ff fd62 	bl	20000560 <move_snake>
		// delay
		delay_milli(30);
20000a9c:	201e      	movs	r0, #30
20000a9e:	f7ff faff 	bl	200000a0 <delay_milli>
	while (!game_over(snake_head, snake_tail, points)) 
20000aa2:	4b14      	ldr	r3, [pc, #80]	; (20000af4 <main+0x30c>)
20000aa4:	681b      	ldr	r3, [r3, #0]
20000aa6:	001a      	movs	r2, r3
20000aa8:	2328      	movs	r3, #40	; 0x28
20000aaa:	18f9      	adds	r1, r7, r3
20000aac:	4b10      	ldr	r3, [pc, #64]	; (20000af0 <main+0x308>)
20000aae:	18fb      	adds	r3, r7, r3
20000ab0:	681b      	ldr	r3, [r3, #0]
20000ab2:	0018      	movs	r0, r3
20000ab4:	f7ff fe3e 	bl	20000734 <game_over>
20000ab8:	1e03      	subs	r3, r0, #0
20000aba:	d100      	bne.n	20000abe <main+0x2d6>
20000abc:	e6b0      	b.n	20000820 <main+0x38>
	}
	// game over
	delay_milli(10);
20000abe:	200a      	movs	r0, #10
20000ac0:	f7ff faee 	bl	200000a0 <delay_milli>
	graphic_clear_screen();
20000ac4:	f7ff fcb4 	bl	20000430 <graphic_clear_screen>
	write_ascii("Game over! ", "");
20000ac8:	4a0b      	ldr	r2, [pc, #44]	; (20000af8 <main+0x310>)
20000aca:	4b12      	ldr	r3, [pc, #72]	; (20000b14 <main+0x32c>)
20000acc:	0011      	movs	r1, r2
20000ace:	0018      	movs	r0, r3
20000ad0:	f7ff fc78 	bl	200003c4 <write_ascii>

}
20000ad4:	46c0      	nop			; (mov r8, r8)
20000ad6:	46bd      	mov	sp, r7
20000ad8:	4b0f      	ldr	r3, [pc, #60]	; (20000b18 <main+0x330>)
20000ada:	449d      	add	sp, r3
20000adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000ade:	46c0      	nop			; (mov r8, r8)
20000ae0:	ffffb78c 			; <UNDEFINED> instruction: 0xffffb78c
20000ae4:	2000700c 	andcs	r7, r0, ip
20000ae8:	0000482c 	andeq	r4, r0, ip, lsr #16
20000aec:	20003fdc 	ldrdcs	r3, [r0], -ip
20000af0:	00004828 	andeq	r4, r0, r8, lsr #16
20000af4:	2000a088 	andcs	sl, r0, r8, lsl #1
20000af8:	2000a060 	andcs	sl, r0, r0, rrx
20000afc:	2000a064 	andcs	sl, r0, r4, rrx
20000b00:	00004834 	andeq	r4, r0, r4, lsr r8
20000b04:	ffffb7f0 			; <UNDEFINED> instruction: 0xffffb7f0
20000b08:	00004838 	andeq	r4, r0, r8, lsr r8
20000b0c:	ffffb7c8 			; <UNDEFINED> instruction: 0xffffb7c8
20000b10:	00004830 	andeq	r4, r0, r0, lsr r8
20000b14:	2000a06c 	andcs	sl, r0, ip, rrx
20000b18:	0000483c 	andeq	r4, r0, ip, lsr r8

20000b1c <activateRow>:

/*
 * Helper Functions
 */
void activateRow(unsigned int row)
{
20000b1c:	b580      	push	{r7, lr}
20000b1e:	b082      	sub	sp, #8
20000b20:	af00      	add	r7, sp, #0
20000b22:	6078      	str	r0, [r7, #4]
	switch(row){
20000b24:	687b      	ldr	r3, [r7, #4]
20000b26:	2b04      	cmp	r3, #4
20000b28:	d01b      	beq.n	20000b62 <activateRow+0x46>
20000b2a:	687b      	ldr	r3, [r7, #4]
20000b2c:	2b04      	cmp	r3, #4
20000b2e:	d81c      	bhi.n	20000b6a <activateRow+0x4e>
20000b30:	687b      	ldr	r3, [r7, #4]
20000b32:	2b03      	cmp	r3, #3
20000b34:	d011      	beq.n	20000b5a <activateRow+0x3e>
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	2b03      	cmp	r3, #3
20000b3a:	d816      	bhi.n	20000b6a <activateRow+0x4e>
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	2b01      	cmp	r3, #1
20000b40:	d003      	beq.n	20000b4a <activateRow+0x2e>
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	2b02      	cmp	r3, #2
20000b46:	d004      	beq.n	20000b52 <activateRow+0x36>
20000b48:	e00f      	b.n	20000b6a <activateRow+0x4e>
		case 1: GPIO_D.odrHigh=0x10; break;
20000b4a:	4b0c      	ldr	r3, [pc, #48]	; (20000b7c <activateRow+0x60>)
20000b4c:	2210      	movs	r2, #16
20000b4e:	755a      	strb	r2, [r3, #21]
20000b50:	e00f      	b.n	20000b72 <activateRow+0x56>
		case 2: GPIO_D.odrHigh=0x20; break;
20000b52:	4b0a      	ldr	r3, [pc, #40]	; (20000b7c <activateRow+0x60>)
20000b54:	2220      	movs	r2, #32
20000b56:	755a      	strb	r2, [r3, #21]
20000b58:	e00b      	b.n	20000b72 <activateRow+0x56>
		case 3: GPIO_D.odrHigh=0x40; break;
20000b5a:	4b08      	ldr	r3, [pc, #32]	; (20000b7c <activateRow+0x60>)
20000b5c:	2240      	movs	r2, #64	; 0x40
20000b5e:	755a      	strb	r2, [r3, #21]
20000b60:	e007      	b.n	20000b72 <activateRow+0x56>
		case 4: GPIO_D.odrHigh=0x80; break;
20000b62:	4b06      	ldr	r3, [pc, #24]	; (20000b7c <activateRow+0x60>)
20000b64:	2280      	movs	r2, #128	; 0x80
20000b66:	755a      	strb	r2, [r3, #21]
20000b68:	e003      	b.n	20000b72 <activateRow+0x56>
		
		default: GPIO_D.odrHigh=0;
20000b6a:	4b04      	ldr	r3, [pc, #16]	; (20000b7c <activateRow+0x60>)
20000b6c:	2200      	movs	r2, #0
20000b6e:	755a      	strb	r2, [r3, #21]
	}
}
20000b70:	46c0      	nop			; (mov r8, r8)
20000b72:	46c0      	nop			; (mov r8, r8)
20000b74:	46bd      	mov	sp, r7
20000b76:	b002      	add	sp, #8
20000b78:	bd80      	pop	{r7, pc}
20000b7a:	46c0      	nop			; (mov r8, r8)
20000b7c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000b80 <readCol>:

int readCol(void)
{
20000b80:	b580      	push	{r7, lr}
20000b82:	b082      	sub	sp, #8
20000b84:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D.idrHigh;
20000b86:	4a12      	ldr	r2, [pc, #72]	; (20000bd0 <readCol+0x50>)
20000b88:	1dfb      	adds	r3, r7, #7
20000b8a:	7c52      	ldrb	r2, [r2, #17]
20000b8c:	701a      	strb	r2, [r3, #0]
	if(c & 8) return 4;
20000b8e:	1dfb      	adds	r3, r7, #7
20000b90:	781b      	ldrb	r3, [r3, #0]
20000b92:	2208      	movs	r2, #8
20000b94:	4013      	ands	r3, r2
20000b96:	d001      	beq.n	20000b9c <readCol+0x1c>
20000b98:	2304      	movs	r3, #4
20000b9a:	e015      	b.n	20000bc8 <readCol+0x48>
	if(c & 4) return 3;
20000b9c:	1dfb      	adds	r3, r7, #7
20000b9e:	781b      	ldrb	r3, [r3, #0]
20000ba0:	2204      	movs	r2, #4
20000ba2:	4013      	ands	r3, r2
20000ba4:	d001      	beq.n	20000baa <readCol+0x2a>
20000ba6:	2303      	movs	r3, #3
20000ba8:	e00e      	b.n	20000bc8 <readCol+0x48>
	if(c & 2) return 2;
20000baa:	1dfb      	adds	r3, r7, #7
20000bac:	781b      	ldrb	r3, [r3, #0]
20000bae:	2202      	movs	r2, #2
20000bb0:	4013      	ands	r3, r2
20000bb2:	d001      	beq.n	20000bb8 <readCol+0x38>
20000bb4:	2302      	movs	r3, #2
20000bb6:	e007      	b.n	20000bc8 <readCol+0x48>
	if(c & 1) return 1;
20000bb8:	1dfb      	adds	r3, r7, #7
20000bba:	781b      	ldrb	r3, [r3, #0]
20000bbc:	2201      	movs	r2, #1
20000bbe:	4013      	ands	r3, r2
20000bc0:	d001      	beq.n	20000bc6 <readCol+0x46>
20000bc2:	2301      	movs	r3, #1
20000bc4:	e000      	b.n	20000bc8 <readCol+0x48>
	return 0;
20000bc6:	2300      	movs	r3, #0
}
20000bc8:	0018      	movs	r0, r3
20000bca:	46bd      	mov	sp, r7
20000bcc:	b002      	add	sp, #8
20000bce:	bd80      	pop	{r7, pc}
20000bd0:	40020c00 	andmi	r0, r2, r0, lsl #24

20000bd4 <keyb>:

/*
 * Main Function
 */
unsigned char keyb(void)
{
20000bd4:	b590      	push	{r4, r7, lr}
20000bd6:	b087      	sub	sp, #28
20000bd8:	af00      	add	r7, sp, #0
	unsigned char key[]=
20000bda:	003b      	movs	r3, r7
20000bdc:	4a16      	ldr	r2, [pc, #88]	; (20000c38 <keyb+0x64>)
20000bde:	ca13      	ldmia	r2!, {r0, r1, r4}
20000be0:	c313      	stmia	r3!, {r0, r1, r4}
20000be2:	6812      	ldr	r2, [r2, #0]
20000be4:	601a      	str	r2, [r3, #0]
	{1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
	int row, col;
	for(row = 1; row <= 4; row++){
20000be6:	2301      	movs	r3, #1
20000be8:	617b      	str	r3, [r7, #20]
20000bea:	e019      	b.n	20000c20 <keyb+0x4c>
		activateRow(row);
20000bec:	697b      	ldr	r3, [r7, #20]
20000bee:	0018      	movs	r0, r3
20000bf0:	f7ff ff94 	bl	20000b1c <activateRow>
		if(col=readCol()){
20000bf4:	f7ff ffc4 	bl	20000b80 <readCol>
20000bf8:	0003      	movs	r3, r0
20000bfa:	613b      	str	r3, [r7, #16]
20000bfc:	693b      	ldr	r3, [r7, #16]
20000bfe:	2b00      	cmp	r3, #0
20000c00:	d00b      	beq.n	20000c1a <keyb+0x46>
			activateRow(0);
20000c02:	2000      	movs	r0, #0
20000c04:	f7ff ff8a 	bl	20000b1c <activateRow>
			return key[4*(row-1)+(col-1)];
20000c08:	697b      	ldr	r3, [r7, #20]
20000c0a:	3b01      	subs	r3, #1
20000c0c:	009a      	lsls	r2, r3, #2
20000c0e:	693b      	ldr	r3, [r7, #16]
20000c10:	3b01      	subs	r3, #1
20000c12:	18d3      	adds	r3, r2, r3
20000c14:	003a      	movs	r2, r7
20000c16:	5cd3      	ldrb	r3, [r2, r3]
20000c18:	e009      	b.n	20000c2e <keyb+0x5a>
	for(row = 1; row <= 4; row++){
20000c1a:	697b      	ldr	r3, [r7, #20]
20000c1c:	3301      	adds	r3, #1
20000c1e:	617b      	str	r3, [r7, #20]
20000c20:	697b      	ldr	r3, [r7, #20]
20000c22:	2b04      	cmp	r3, #4
20000c24:	dde2      	ble.n	20000bec <keyb+0x18>
		}
	}
	activateRow(0);
20000c26:	2000      	movs	r0, #0
20000c28:	f7ff ff78 	bl	20000b1c <activateRow>
	return(0xFF);
20000c2c:	23ff      	movs	r3, #255	; 0xff
20000c2e:	0018      	movs	r0, r3
20000c30:	46bd      	mov	sp, r7
20000c32:	b007      	add	sp, #28
20000c34:	bd90      	pop	{r4, r7, pc}
20000c36:	46c0      	nop			; (mov r8, r8)
20000c38:	2000a078 	andcs	sl, r0, r8, ror r0

20000c3c <init_keypad>:
#include "declarations.h"

// starta klockorna
//	*((unsigned long *) 0x40023830) = 0x18;
 void init_keypad() 
 {
20000c3c:	b580      	push	{r7, lr}
20000c3e:	af00      	add	r7, sp, #0
	GPIO_D.moder = 0x55000000;
20000c40:	4b08      	ldr	r3, [pc, #32]	; (20000c64 <init_keypad+0x28>)
20000c42:	22aa      	movs	r2, #170	; 0xaa
20000c44:	05d2      	lsls	r2, r2, #23
20000c46:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0;
20000c48:	4b06      	ldr	r3, [pc, #24]	; (20000c64 <init_keypad+0x28>)
20000c4a:	2200      	movs	r2, #0
20000c4c:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0xAA0000;
20000c4e:	4b05      	ldr	r3, [pc, #20]	; (20000c64 <init_keypad+0x28>)
20000c50:	22aa      	movs	r2, #170	; 0xaa
20000c52:	0412      	lsls	r2, r2, #16
20000c54:	60da      	str	r2, [r3, #12]
	GPIO_D.ospeedr = 0xFF000000;
20000c56:	4b03      	ldr	r3, [pc, #12]	; (20000c64 <init_keypad+0x28>)
20000c58:	22ff      	movs	r2, #255	; 0xff
20000c5a:	0612      	lsls	r2, r2, #24
20000c5c:	609a      	str	r2, [r3, #8]
}
20000c5e:	46c0      	nop			; (mov r8, r8)
20000c60:	46bd      	mov	sp, r7
20000c62:	bd80      	pop	{r7, pc}
20000c64:	40020c00 	andmi	r0, r2, r0, lsl #24

20000c68 <init_ascii>:

void init_ascii()
{
20000c68:	b580      	push	{r7, lr}
20000c6a:	af00      	add	r7, sp, #0
	GPIO_E.moder = 0x55555555;
20000c6c:	4b05      	ldr	r3, [pc, #20]	; (20000c84 <init_ascii+0x1c>)
20000c6e:	4a06      	ldr	r2, [pc, #24]	; (20000c88 <init_ascii+0x20>)
20000c70:	601a      	str	r2, [r3, #0]
	GPIO_E.pupdr = 0x55550000;
20000c72:	4b04      	ldr	r3, [pc, #16]	; (20000c84 <init_ascii+0x1c>)
20000c74:	4a05      	ldr	r2, [pc, #20]	; (20000c8c <init_ascii+0x24>)
20000c76:	60da      	str	r2, [r3, #12]
	GPIO_E.otyper = 0;
20000c78:	4b02      	ldr	r3, [pc, #8]	; (20000c84 <init_ascii+0x1c>)
20000c7a:	2200      	movs	r2, #0
20000c7c:	809a      	strh	r2, [r3, #4]
}
20000c7e:	46c0      	nop			; (mov r8, r8)
20000c80:	46bd      	mov	sp, r7
20000c82:	bd80      	pop	{r7, pc}
20000c84:	40021000 	andmi	r1, r2, r0
20000c88:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000c8c:	55550000 	ldrbpl	r0, [r5, #-0]

20000c90 <init_timer6>:

void init_timer6()
{
20000c90:	b580      	push	{r7, lr}
20000c92:	af00      	add	r7, sp, #0
	*TIM6_CR1 &= ~CEN; //stoppa räknarmodul
20000c94:	4b0b      	ldr	r3, [pc, #44]	; (20000cc4 <init_timer6+0x34>)
20000c96:	881b      	ldrh	r3, [r3, #0]
20000c98:	b29b      	uxth	r3, r3
20000c9a:	4a0a      	ldr	r2, [pc, #40]	; (20000cc4 <init_timer6+0x34>)
20000c9c:	2101      	movs	r1, #1
20000c9e:	438b      	bics	r3, r1
20000ca0:	b29b      	uxth	r3, r3
20000ca2:	8013      	strh	r3, [r2, #0]
	*TIM6_ARR = 0xFFFF; //sätt räknarreg. till maxvärde
20000ca4:	4b08      	ldr	r3, [pc, #32]	; (20000cc8 <init_timer6+0x38>)
20000ca6:	2201      	movs	r2, #1
20000ca8:	4252      	negs	r2, r2
20000caa:	801a      	strh	r2, [r3, #0]
	*TIM6_CR1 |= (CEN|UDIS); //inget update-event
20000cac:	4b05      	ldr	r3, [pc, #20]	; (20000cc4 <init_timer6+0x34>)
20000cae:	881b      	ldrh	r3, [r3, #0]
20000cb0:	b29b      	uxth	r3, r3
20000cb2:	4a04      	ldr	r2, [pc, #16]	; (20000cc4 <init_timer6+0x34>)
20000cb4:	2103      	movs	r1, #3
20000cb6:	430b      	orrs	r3, r1
20000cb8:	b29b      	uxth	r3, r3
20000cba:	8013      	strh	r3, [r2, #0]
	//starta räknarmodul
}
20000cbc:	46c0      	nop			; (mov r8, r8)
20000cbe:	46bd      	mov	sp, r7
20000cc0:	bd80      	pop	{r7, pc}
20000cc2:	46c0      	nop			; (mov r8, r8)
20000cc4:	40001000 	andmi	r1, r0, r0
20000cc8:	4000102c 	andmi	r1, r0, ip, lsr #32

20000ccc <init_app>:

void init_app()
{
20000ccc:	b580      	push	{r7, lr}
20000cce:	af00      	add	r7, sp, #0
	init_keypad();
20000cd0:	f7ff ffb4 	bl	20000c3c <init_keypad>
	init_ascii();
20000cd4:	f7ff ffc8 	bl	20000c68 <init_ascii>
	init_timer6();
20000cd8:	f7ff ffda 	bl	20000c90 <init_timer6>
20000cdc:	46c0      	nop			; (mov r8, r8)
20000cde:	46bd      	mov	sp, r7
20000ce0:	bd80      	pop	{r7, pc}
20000ce2:	46c0      	nop			; (mov r8, r8)

20000ce4 <__udivsi3>:
20000ce4:	2200      	movs	r2, #0
20000ce6:	0843      	lsrs	r3, r0, #1
20000ce8:	428b      	cmp	r3, r1
20000cea:	d374      	bcc.n	20000dd6 <__udivsi3+0xf2>
20000cec:	0903      	lsrs	r3, r0, #4
20000cee:	428b      	cmp	r3, r1
20000cf0:	d35f      	bcc.n	20000db2 <__udivsi3+0xce>
20000cf2:	0a03      	lsrs	r3, r0, #8
20000cf4:	428b      	cmp	r3, r1
20000cf6:	d344      	bcc.n	20000d82 <__udivsi3+0x9e>
20000cf8:	0b03      	lsrs	r3, r0, #12
20000cfa:	428b      	cmp	r3, r1
20000cfc:	d328      	bcc.n	20000d50 <__udivsi3+0x6c>
20000cfe:	0c03      	lsrs	r3, r0, #16
20000d00:	428b      	cmp	r3, r1
20000d02:	d30d      	bcc.n	20000d20 <__udivsi3+0x3c>
20000d04:	22ff      	movs	r2, #255	; 0xff
20000d06:	0209      	lsls	r1, r1, #8
20000d08:	ba12      	rev	r2, r2
20000d0a:	0c03      	lsrs	r3, r0, #16
20000d0c:	428b      	cmp	r3, r1
20000d0e:	d302      	bcc.n	20000d16 <__udivsi3+0x32>
20000d10:	1212      	asrs	r2, r2, #8
20000d12:	0209      	lsls	r1, r1, #8
20000d14:	d065      	beq.n	20000de2 <__udivsi3+0xfe>
20000d16:	0b03      	lsrs	r3, r0, #12
20000d18:	428b      	cmp	r3, r1
20000d1a:	d319      	bcc.n	20000d50 <__udivsi3+0x6c>
20000d1c:	e000      	b.n	20000d20 <__udivsi3+0x3c>
20000d1e:	0a09      	lsrs	r1, r1, #8
20000d20:	0bc3      	lsrs	r3, r0, #15
20000d22:	428b      	cmp	r3, r1
20000d24:	d301      	bcc.n	20000d2a <__udivsi3+0x46>
20000d26:	03cb      	lsls	r3, r1, #15
20000d28:	1ac0      	subs	r0, r0, r3
20000d2a:	4152      	adcs	r2, r2
20000d2c:	0b83      	lsrs	r3, r0, #14
20000d2e:	428b      	cmp	r3, r1
20000d30:	d301      	bcc.n	20000d36 <__udivsi3+0x52>
20000d32:	038b      	lsls	r3, r1, #14
20000d34:	1ac0      	subs	r0, r0, r3
20000d36:	4152      	adcs	r2, r2
20000d38:	0b43      	lsrs	r3, r0, #13
20000d3a:	428b      	cmp	r3, r1
20000d3c:	d301      	bcc.n	20000d42 <__udivsi3+0x5e>
20000d3e:	034b      	lsls	r3, r1, #13
20000d40:	1ac0      	subs	r0, r0, r3
20000d42:	4152      	adcs	r2, r2
20000d44:	0b03      	lsrs	r3, r0, #12
20000d46:	428b      	cmp	r3, r1
20000d48:	d301      	bcc.n	20000d4e <__udivsi3+0x6a>
20000d4a:	030b      	lsls	r3, r1, #12
20000d4c:	1ac0      	subs	r0, r0, r3
20000d4e:	4152      	adcs	r2, r2
20000d50:	0ac3      	lsrs	r3, r0, #11
20000d52:	428b      	cmp	r3, r1
20000d54:	d301      	bcc.n	20000d5a <__udivsi3+0x76>
20000d56:	02cb      	lsls	r3, r1, #11
20000d58:	1ac0      	subs	r0, r0, r3
20000d5a:	4152      	adcs	r2, r2
20000d5c:	0a83      	lsrs	r3, r0, #10
20000d5e:	428b      	cmp	r3, r1
20000d60:	d301      	bcc.n	20000d66 <__udivsi3+0x82>
20000d62:	028b      	lsls	r3, r1, #10
20000d64:	1ac0      	subs	r0, r0, r3
20000d66:	4152      	adcs	r2, r2
20000d68:	0a43      	lsrs	r3, r0, #9
20000d6a:	428b      	cmp	r3, r1
20000d6c:	d301      	bcc.n	20000d72 <__udivsi3+0x8e>
20000d6e:	024b      	lsls	r3, r1, #9
20000d70:	1ac0      	subs	r0, r0, r3
20000d72:	4152      	adcs	r2, r2
20000d74:	0a03      	lsrs	r3, r0, #8
20000d76:	428b      	cmp	r3, r1
20000d78:	d301      	bcc.n	20000d7e <__udivsi3+0x9a>
20000d7a:	020b      	lsls	r3, r1, #8
20000d7c:	1ac0      	subs	r0, r0, r3
20000d7e:	4152      	adcs	r2, r2
20000d80:	d2cd      	bcs.n	20000d1e <__udivsi3+0x3a>
20000d82:	09c3      	lsrs	r3, r0, #7
20000d84:	428b      	cmp	r3, r1
20000d86:	d301      	bcc.n	20000d8c <__udivsi3+0xa8>
20000d88:	01cb      	lsls	r3, r1, #7
20000d8a:	1ac0      	subs	r0, r0, r3
20000d8c:	4152      	adcs	r2, r2
20000d8e:	0983      	lsrs	r3, r0, #6
20000d90:	428b      	cmp	r3, r1
20000d92:	d301      	bcc.n	20000d98 <__udivsi3+0xb4>
20000d94:	018b      	lsls	r3, r1, #6
20000d96:	1ac0      	subs	r0, r0, r3
20000d98:	4152      	adcs	r2, r2
20000d9a:	0943      	lsrs	r3, r0, #5
20000d9c:	428b      	cmp	r3, r1
20000d9e:	d301      	bcc.n	20000da4 <__udivsi3+0xc0>
20000da0:	014b      	lsls	r3, r1, #5
20000da2:	1ac0      	subs	r0, r0, r3
20000da4:	4152      	adcs	r2, r2
20000da6:	0903      	lsrs	r3, r0, #4
20000da8:	428b      	cmp	r3, r1
20000daa:	d301      	bcc.n	20000db0 <__udivsi3+0xcc>
20000dac:	010b      	lsls	r3, r1, #4
20000dae:	1ac0      	subs	r0, r0, r3
20000db0:	4152      	adcs	r2, r2
20000db2:	08c3      	lsrs	r3, r0, #3
20000db4:	428b      	cmp	r3, r1
20000db6:	d301      	bcc.n	20000dbc <__udivsi3+0xd8>
20000db8:	00cb      	lsls	r3, r1, #3
20000dba:	1ac0      	subs	r0, r0, r3
20000dbc:	4152      	adcs	r2, r2
20000dbe:	0883      	lsrs	r3, r0, #2
20000dc0:	428b      	cmp	r3, r1
20000dc2:	d301      	bcc.n	20000dc8 <__udivsi3+0xe4>
20000dc4:	008b      	lsls	r3, r1, #2
20000dc6:	1ac0      	subs	r0, r0, r3
20000dc8:	4152      	adcs	r2, r2
20000dca:	0843      	lsrs	r3, r0, #1
20000dcc:	428b      	cmp	r3, r1
20000dce:	d301      	bcc.n	20000dd4 <__udivsi3+0xf0>
20000dd0:	004b      	lsls	r3, r1, #1
20000dd2:	1ac0      	subs	r0, r0, r3
20000dd4:	4152      	adcs	r2, r2
20000dd6:	1a41      	subs	r1, r0, r1
20000dd8:	d200      	bcs.n	20000ddc <__udivsi3+0xf8>
20000dda:	4601      	mov	r1, r0
20000ddc:	4152      	adcs	r2, r2
20000dde:	4610      	mov	r0, r2
20000de0:	4770      	bx	lr
20000de2:	e7ff      	b.n	20000de4 <__udivsi3+0x100>
20000de4:	b501      	push	{r0, lr}
20000de6:	2000      	movs	r0, #0
20000de8:	f000 f8f0 	bl	20000fcc <__aeabi_idiv0>
20000dec:	bd02      	pop	{r1, pc}
20000dee:	46c0      	nop			; (mov r8, r8)

20000df0 <__aeabi_uidivmod>:
20000df0:	2900      	cmp	r1, #0
20000df2:	d0f7      	beq.n	20000de4 <__udivsi3+0x100>
20000df4:	e776      	b.n	20000ce4 <__udivsi3>
20000df6:	4770      	bx	lr

20000df8 <__divsi3>:
20000df8:	4603      	mov	r3, r0
20000dfa:	430b      	orrs	r3, r1
20000dfc:	d47f      	bmi.n	20000efe <__divsi3+0x106>
20000dfe:	2200      	movs	r2, #0
20000e00:	0843      	lsrs	r3, r0, #1
20000e02:	428b      	cmp	r3, r1
20000e04:	d374      	bcc.n	20000ef0 <__divsi3+0xf8>
20000e06:	0903      	lsrs	r3, r0, #4
20000e08:	428b      	cmp	r3, r1
20000e0a:	d35f      	bcc.n	20000ecc <__divsi3+0xd4>
20000e0c:	0a03      	lsrs	r3, r0, #8
20000e0e:	428b      	cmp	r3, r1
20000e10:	d344      	bcc.n	20000e9c <__divsi3+0xa4>
20000e12:	0b03      	lsrs	r3, r0, #12
20000e14:	428b      	cmp	r3, r1
20000e16:	d328      	bcc.n	20000e6a <__divsi3+0x72>
20000e18:	0c03      	lsrs	r3, r0, #16
20000e1a:	428b      	cmp	r3, r1
20000e1c:	d30d      	bcc.n	20000e3a <__divsi3+0x42>
20000e1e:	22ff      	movs	r2, #255	; 0xff
20000e20:	0209      	lsls	r1, r1, #8
20000e22:	ba12      	rev	r2, r2
20000e24:	0c03      	lsrs	r3, r0, #16
20000e26:	428b      	cmp	r3, r1
20000e28:	d302      	bcc.n	20000e30 <__divsi3+0x38>
20000e2a:	1212      	asrs	r2, r2, #8
20000e2c:	0209      	lsls	r1, r1, #8
20000e2e:	d065      	beq.n	20000efc <__divsi3+0x104>
20000e30:	0b03      	lsrs	r3, r0, #12
20000e32:	428b      	cmp	r3, r1
20000e34:	d319      	bcc.n	20000e6a <__divsi3+0x72>
20000e36:	e000      	b.n	20000e3a <__divsi3+0x42>
20000e38:	0a09      	lsrs	r1, r1, #8
20000e3a:	0bc3      	lsrs	r3, r0, #15
20000e3c:	428b      	cmp	r3, r1
20000e3e:	d301      	bcc.n	20000e44 <__divsi3+0x4c>
20000e40:	03cb      	lsls	r3, r1, #15
20000e42:	1ac0      	subs	r0, r0, r3
20000e44:	4152      	adcs	r2, r2
20000e46:	0b83      	lsrs	r3, r0, #14
20000e48:	428b      	cmp	r3, r1
20000e4a:	d301      	bcc.n	20000e50 <__divsi3+0x58>
20000e4c:	038b      	lsls	r3, r1, #14
20000e4e:	1ac0      	subs	r0, r0, r3
20000e50:	4152      	adcs	r2, r2
20000e52:	0b43      	lsrs	r3, r0, #13
20000e54:	428b      	cmp	r3, r1
20000e56:	d301      	bcc.n	20000e5c <__divsi3+0x64>
20000e58:	034b      	lsls	r3, r1, #13
20000e5a:	1ac0      	subs	r0, r0, r3
20000e5c:	4152      	adcs	r2, r2
20000e5e:	0b03      	lsrs	r3, r0, #12
20000e60:	428b      	cmp	r3, r1
20000e62:	d301      	bcc.n	20000e68 <__divsi3+0x70>
20000e64:	030b      	lsls	r3, r1, #12
20000e66:	1ac0      	subs	r0, r0, r3
20000e68:	4152      	adcs	r2, r2
20000e6a:	0ac3      	lsrs	r3, r0, #11
20000e6c:	428b      	cmp	r3, r1
20000e6e:	d301      	bcc.n	20000e74 <__divsi3+0x7c>
20000e70:	02cb      	lsls	r3, r1, #11
20000e72:	1ac0      	subs	r0, r0, r3
20000e74:	4152      	adcs	r2, r2
20000e76:	0a83      	lsrs	r3, r0, #10
20000e78:	428b      	cmp	r3, r1
20000e7a:	d301      	bcc.n	20000e80 <__divsi3+0x88>
20000e7c:	028b      	lsls	r3, r1, #10
20000e7e:	1ac0      	subs	r0, r0, r3
20000e80:	4152      	adcs	r2, r2
20000e82:	0a43      	lsrs	r3, r0, #9
20000e84:	428b      	cmp	r3, r1
20000e86:	d301      	bcc.n	20000e8c <__divsi3+0x94>
20000e88:	024b      	lsls	r3, r1, #9
20000e8a:	1ac0      	subs	r0, r0, r3
20000e8c:	4152      	adcs	r2, r2
20000e8e:	0a03      	lsrs	r3, r0, #8
20000e90:	428b      	cmp	r3, r1
20000e92:	d301      	bcc.n	20000e98 <__divsi3+0xa0>
20000e94:	020b      	lsls	r3, r1, #8
20000e96:	1ac0      	subs	r0, r0, r3
20000e98:	4152      	adcs	r2, r2
20000e9a:	d2cd      	bcs.n	20000e38 <__divsi3+0x40>
20000e9c:	09c3      	lsrs	r3, r0, #7
20000e9e:	428b      	cmp	r3, r1
20000ea0:	d301      	bcc.n	20000ea6 <__divsi3+0xae>
20000ea2:	01cb      	lsls	r3, r1, #7
20000ea4:	1ac0      	subs	r0, r0, r3
20000ea6:	4152      	adcs	r2, r2
20000ea8:	0983      	lsrs	r3, r0, #6
20000eaa:	428b      	cmp	r3, r1
20000eac:	d301      	bcc.n	20000eb2 <__divsi3+0xba>
20000eae:	018b      	lsls	r3, r1, #6
20000eb0:	1ac0      	subs	r0, r0, r3
20000eb2:	4152      	adcs	r2, r2
20000eb4:	0943      	lsrs	r3, r0, #5
20000eb6:	428b      	cmp	r3, r1
20000eb8:	d301      	bcc.n	20000ebe <__divsi3+0xc6>
20000eba:	014b      	lsls	r3, r1, #5
20000ebc:	1ac0      	subs	r0, r0, r3
20000ebe:	4152      	adcs	r2, r2
20000ec0:	0903      	lsrs	r3, r0, #4
20000ec2:	428b      	cmp	r3, r1
20000ec4:	d301      	bcc.n	20000eca <__divsi3+0xd2>
20000ec6:	010b      	lsls	r3, r1, #4
20000ec8:	1ac0      	subs	r0, r0, r3
20000eca:	4152      	adcs	r2, r2
20000ecc:	08c3      	lsrs	r3, r0, #3
20000ece:	428b      	cmp	r3, r1
20000ed0:	d301      	bcc.n	20000ed6 <__divsi3+0xde>
20000ed2:	00cb      	lsls	r3, r1, #3
20000ed4:	1ac0      	subs	r0, r0, r3
20000ed6:	4152      	adcs	r2, r2
20000ed8:	0883      	lsrs	r3, r0, #2
20000eda:	428b      	cmp	r3, r1
20000edc:	d301      	bcc.n	20000ee2 <__divsi3+0xea>
20000ede:	008b      	lsls	r3, r1, #2
20000ee0:	1ac0      	subs	r0, r0, r3
20000ee2:	4152      	adcs	r2, r2
20000ee4:	0843      	lsrs	r3, r0, #1
20000ee6:	428b      	cmp	r3, r1
20000ee8:	d301      	bcc.n	20000eee <__divsi3+0xf6>
20000eea:	004b      	lsls	r3, r1, #1
20000eec:	1ac0      	subs	r0, r0, r3
20000eee:	4152      	adcs	r2, r2
20000ef0:	1a41      	subs	r1, r0, r1
20000ef2:	d200      	bcs.n	20000ef6 <__divsi3+0xfe>
20000ef4:	4601      	mov	r1, r0
20000ef6:	4152      	adcs	r2, r2
20000ef8:	4610      	mov	r0, r2
20000efa:	4770      	bx	lr
20000efc:	e05d      	b.n	20000fba <__divsi3+0x1c2>
20000efe:	0fca      	lsrs	r2, r1, #31
20000f00:	d000      	beq.n	20000f04 <__divsi3+0x10c>
20000f02:	4249      	negs	r1, r1
20000f04:	1003      	asrs	r3, r0, #32
20000f06:	d300      	bcc.n	20000f0a <__divsi3+0x112>
20000f08:	4240      	negs	r0, r0
20000f0a:	4053      	eors	r3, r2
20000f0c:	2200      	movs	r2, #0
20000f0e:	469c      	mov	ip, r3
20000f10:	0903      	lsrs	r3, r0, #4
20000f12:	428b      	cmp	r3, r1
20000f14:	d32d      	bcc.n	20000f72 <__divsi3+0x17a>
20000f16:	0a03      	lsrs	r3, r0, #8
20000f18:	428b      	cmp	r3, r1
20000f1a:	d312      	bcc.n	20000f42 <__divsi3+0x14a>
20000f1c:	22fc      	movs	r2, #252	; 0xfc
20000f1e:	0189      	lsls	r1, r1, #6
20000f20:	ba12      	rev	r2, r2
20000f22:	0a03      	lsrs	r3, r0, #8
20000f24:	428b      	cmp	r3, r1
20000f26:	d30c      	bcc.n	20000f42 <__divsi3+0x14a>
20000f28:	0189      	lsls	r1, r1, #6
20000f2a:	1192      	asrs	r2, r2, #6
20000f2c:	428b      	cmp	r3, r1
20000f2e:	d308      	bcc.n	20000f42 <__divsi3+0x14a>
20000f30:	0189      	lsls	r1, r1, #6
20000f32:	1192      	asrs	r2, r2, #6
20000f34:	428b      	cmp	r3, r1
20000f36:	d304      	bcc.n	20000f42 <__divsi3+0x14a>
20000f38:	0189      	lsls	r1, r1, #6
20000f3a:	d03a      	beq.n	20000fb2 <__divsi3+0x1ba>
20000f3c:	1192      	asrs	r2, r2, #6
20000f3e:	e000      	b.n	20000f42 <__divsi3+0x14a>
20000f40:	0989      	lsrs	r1, r1, #6
20000f42:	09c3      	lsrs	r3, r0, #7
20000f44:	428b      	cmp	r3, r1
20000f46:	d301      	bcc.n	20000f4c <__divsi3+0x154>
20000f48:	01cb      	lsls	r3, r1, #7
20000f4a:	1ac0      	subs	r0, r0, r3
20000f4c:	4152      	adcs	r2, r2
20000f4e:	0983      	lsrs	r3, r0, #6
20000f50:	428b      	cmp	r3, r1
20000f52:	d301      	bcc.n	20000f58 <__divsi3+0x160>
20000f54:	018b      	lsls	r3, r1, #6
20000f56:	1ac0      	subs	r0, r0, r3
20000f58:	4152      	adcs	r2, r2
20000f5a:	0943      	lsrs	r3, r0, #5
20000f5c:	428b      	cmp	r3, r1
20000f5e:	d301      	bcc.n	20000f64 <__divsi3+0x16c>
20000f60:	014b      	lsls	r3, r1, #5
20000f62:	1ac0      	subs	r0, r0, r3
20000f64:	4152      	adcs	r2, r2
20000f66:	0903      	lsrs	r3, r0, #4
20000f68:	428b      	cmp	r3, r1
20000f6a:	d301      	bcc.n	20000f70 <__divsi3+0x178>
20000f6c:	010b      	lsls	r3, r1, #4
20000f6e:	1ac0      	subs	r0, r0, r3
20000f70:	4152      	adcs	r2, r2
20000f72:	08c3      	lsrs	r3, r0, #3
20000f74:	428b      	cmp	r3, r1
20000f76:	d301      	bcc.n	20000f7c <__divsi3+0x184>
20000f78:	00cb      	lsls	r3, r1, #3
20000f7a:	1ac0      	subs	r0, r0, r3
20000f7c:	4152      	adcs	r2, r2
20000f7e:	0883      	lsrs	r3, r0, #2
20000f80:	428b      	cmp	r3, r1
20000f82:	d301      	bcc.n	20000f88 <__divsi3+0x190>
20000f84:	008b      	lsls	r3, r1, #2
20000f86:	1ac0      	subs	r0, r0, r3
20000f88:	4152      	adcs	r2, r2
20000f8a:	d2d9      	bcs.n	20000f40 <__divsi3+0x148>
20000f8c:	0843      	lsrs	r3, r0, #1
20000f8e:	428b      	cmp	r3, r1
20000f90:	d301      	bcc.n	20000f96 <__divsi3+0x19e>
20000f92:	004b      	lsls	r3, r1, #1
20000f94:	1ac0      	subs	r0, r0, r3
20000f96:	4152      	adcs	r2, r2
20000f98:	1a41      	subs	r1, r0, r1
20000f9a:	d200      	bcs.n	20000f9e <__divsi3+0x1a6>
20000f9c:	4601      	mov	r1, r0
20000f9e:	4663      	mov	r3, ip
20000fa0:	4152      	adcs	r2, r2
20000fa2:	105b      	asrs	r3, r3, #1
20000fa4:	4610      	mov	r0, r2
20000fa6:	d301      	bcc.n	20000fac <__divsi3+0x1b4>
20000fa8:	4240      	negs	r0, r0
20000faa:	2b00      	cmp	r3, #0
20000fac:	d500      	bpl.n	20000fb0 <__divsi3+0x1b8>
20000fae:	4249      	negs	r1, r1
20000fb0:	4770      	bx	lr
20000fb2:	4663      	mov	r3, ip
20000fb4:	105b      	asrs	r3, r3, #1
20000fb6:	d300      	bcc.n	20000fba <__divsi3+0x1c2>
20000fb8:	4240      	negs	r0, r0
20000fba:	b501      	push	{r0, lr}
20000fbc:	2000      	movs	r0, #0
20000fbe:	f000 f805 	bl	20000fcc <__aeabi_idiv0>
20000fc2:	bd02      	pop	{r1, pc}

20000fc4 <__aeabi_idivmod>:
20000fc4:	2900      	cmp	r1, #0
20000fc6:	d0f8      	beq.n	20000fba <__divsi3+0x1c2>
20000fc8:	e716      	b.n	20000df8 <__divsi3>
20000fca:	4770      	bx	lr

20000fcc <__aeabi_idiv0>:
20000fcc:	4770      	bx	lr
20000fce:	46c0      	nop			; (mov r8, r8)

20000fd0 <snake_geometry>:
20000fd0:	00000010 	andeq	r0, r0, r0, lsl r0
20000fd4:	00000001 	andeq	r0, r0, r1
20000fd8:	00000001 	andeq	r0, r0, r1
20000fdc:	00010000 	andeq	r0, r1, r0
20000fe0:	00030002 	andeq	r0, r3, r2
20000fe4:	01010100 	mrseq	r0, (UNDEF: 17)
20000fe8:	01030102 	tsteq	r3, r2, lsl #2
20000fec:	02010200 	andeq	r0, r1, #0, 4
20000ff0:	02030202 	andeq	r0, r3, #536870912	; 0x20000000
20000ff4:	03010300 	movweq	r0, #4864	; 0x1300
20000ff8:	03030302 	movweq	r0, #13058	; 0x3302
	...

20003fdc <snake>:
20003fdc:	20000fd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20003fe0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
20003fe4:	00000000 	andeq	r0, r0, r0
20003fe8:	00000018 	andeq	r0, r0, r8, lsl r0
20003fec:	00000008 	andeq	r0, r0, r8
20003ff0:	2000043d 	andcs	r0, r0, sp, lsr r4
20003ff4:	200004bf 			; <UNDEFINED> instruction: 0x200004bf
20003ff8:	20000561 	andcs	r0, r0, r1, ror #10
20003ffc:	20000541 	andcs	r0, r0, r1, asr #10

20004000 <apple_geometry>:
20004000:	0000000c 	andeq	r0, r0, ip
20004004:	00000001 	andeq	r0, r0, r1
20004008:	00000001 	andeq	r0, r0, r1
2000400c:	02000100 	andeq	r0, r0, #0, 2
20004010:	01010001 	tsteq	r1, r1
20004014:	03010201 	movweq	r0, #4609	; 0x1201
20004018:	01020002 	tsteq	r2, r2
2000401c:	03020202 	movweq	r0, #8706	; 0x2202
20004020:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000700c <apple>:
2000700c:	20004000 	andcs	r4, r0, r0
	...
20007018:	00000008 	andeq	r0, r0, r8
2000701c:	00000008 	andeq	r0, r0, r8
20007020:	2000043d 	andcs	r0, r0, sp, lsr r4
20007024:	200004bf 			; <UNDEFINED> instruction: 0x200004bf
20007028:	2000058d 	andcs	r0, r0, sp, lsl #11
2000702c:	20000541 	andcs	r0, r0, r1, asr #10

20007030 <tail_geometry>:
20007030:	0000000c 	andeq	r0, r0, ip
20007034:	00000001 	andeq	r0, r0, r1
20007038:	00000001 	andeq	r0, r0, r1
2000703c:	00010000 	andeq	r0, r1, r0
20007040:	00030002 	andeq	r0, r3, r2
20007044:	01030100 	mrseq	r0, (UNDEF: 19)
20007048:	02030200 	andeq	r0, r3, #0, 4
2000704c:	03010300 	movweq	r0, #4864	; 0x1300
20007050:	03030302 	movweq	r0, #13058	; 0x3302
	...
2000a03c:	73657250 	cmnvc	r5, #80, 4
2000a040:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
2000a044:	656b2079 	strbvs	r2, [fp, #-121]!	; 0xffffff87
2000a048:	00003a79 	andeq	r3, r0, r9, ror sl
2000a04c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
2000a050:	6f637320 	svcvs	0x00637320
2000a054:	203a6572 	eorscs	r6, sl, r2, ror r5
2000a058:	30353433 	eorscc	r3, r5, r3, lsr r4
	...
2000a064:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
2000a068:	00203a65 	eoreq	r3, r0, r5, ror #20
2000a06c:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
2000a070:	65766f20 	ldrbvs	r6, [r6, #-3872]!	; 0xfffff0e0
2000a074:	00202172 	eoreq	r2, r0, r2, ror r1
2000a078:	0a030201 	beq	200ca884 <points+0xc07fc>
2000a07c:	0b060504 	bleq	2018b494 <points+0x18140c>
2000a080:	0c090807 	stceq	8, cr0, [r9], {7}
2000a084:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000a054 <tail_geometry+0x3024>

2000a088 <points>:
2000a088:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000010d 	andeq	r0, r0, sp, lsl #2
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000c8 	andeq	r0, r0, r8, asr #1
  10:	0000400c 	andeq	r4, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	00010420 	andeq	r0, r1, r0, lsr #8
  20:	00000000 	andeq	r0, r0, r0
  24:	07040200 	streq	r0, [r4, -r0, lsl #4]
  28:	000000a1 	andeq	r0, r0, r1, lsr #1
  2c:	9b070202 	blls	1c083c <startup-0x1fe3f7c4>
  30:	02000000 	andeq	r0, r0, #0
  34:	008d0801 	addeq	r0, sp, r1, lsl #16
  38:	04030000 	streq	r0, [r3], #-0
  3c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
  40:	00ae0400 	adceq	r0, lr, r0, lsl #8
  44:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
  48:	00003a06 	andeq	r3, r0, r6, lsl #20
  4c:	0000c600 	andeq	ip, r0, r0, lsl #12
  50:	00004e20 	andeq	r4, r0, r0, lsr #28
  54:	969c0100 	ldrls	r0, [ip], r0, lsl #2
  58:	05000000 	streq	r0, [r0, #-0]
  5c:	006e696d 	rsbeq	r6, lr, sp, ror #18
  60:	3a182801 	bcc	60a06c <startup-0x1f9f5f94>
  64:	02000000 	andeq	r0, r0, #0
  68:	6d056c91 	stcvs	12, cr6, [r5, #-580]	; 0xfffffdbc
  6c:	01007861 	tsteq	r0, r1, ror #16
  70:	003a2128 	eorseq	r2, sl, r8, lsr #2
  74:	91020000 	mrsls	r0, (UNDEF: 2)
  78:	00390668 	eorseq	r0, r9, r8, ror #12
  7c:	2a010000 	bcs	40084 <startup-0x1ffbff7c>
  80:	00009608 	andeq	r9, r0, r8, lsl #12
  84:	76910200 	ldrvc	r0, [r1], r0, lsl #4
  88:	01006307 	tsteq	r0, r7, lsl #6
  8c:	0033102b 	eorseq	r1, r3, fp, lsr #32
  90:	91020000 	mrsls	r0, (UNDEF: 2)
  94:	02020075 	andeq	r0, r2, #117	; 0x75
  98:	00015005 	andeq	r5, r1, r5
  9c:	01440800 	cmpeq	r4, r0, lsl #16
  a0:	1d010000 	stcne	0, cr0, [r1, #-0]
  a4:	0000a006 	andeq	sl, r0, r6
  a8:	00002620 	andeq	r2, r0, r0, lsr #12
  ac:	c29c0100 	addsgt	r0, ip, #0, 2
  b0:	05000000 	streq	r0, [r0, #-0]
  b4:	0100736d 	tsteq	r0, sp, ror #6
  b8:	00251f1d 	eoreq	r1, r5, sp, lsl pc
  bc:	91020000 	mrsls	r0, (UNDEF: 2)
  c0:	5a080074 	bpl	200298 <startup-0x1fdffd68>
  c4:	01000001 	tsteq	r0, r1
  c8:	00540610 	subseq	r0, r4, r0, lsl r6
  cc:	004c2000 	subeq	r2, ip, r0
  d0:	9c010000 	stcls	0, cr0, [r1], {-0}
  d4:	000000fe 	strdeq	r0, [r0], -lr
  d8:	00737505 	rsbseq	r7, r3, r5, lsl #10
  dc:	251f1001 	ldrcs	r1, [pc, #-1]	; e3 <startup-0x1fffff1d>
  e0:	02000000 	andeq	r0, r0, #0
  e4:	74096c91 	strvc	r6, [r9], #-3217	; 0xfffff36f
  e8:	16200000 	strtne	r0, [r0], -r0
  ec:	07000000 	streq	r0, [r0, -r0]
  f0:	18010069 	stmdane	r1, {r0, r3, r5, r6}
  f4:	00003a0b 	andeq	r3, r0, fp, lsl #20
  f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  fc:	bc0a0000 	stclt	0, cr0, [sl], {-0}
 100:	01000000 	mrseq	r0, (UNDEF: 0)
 104:	00100605 	andseq	r0, r0, r5, lsl #12
 108:	00442000 	subeq	r2, r4, r0
 10c:	9c010000 	stcls	0, cr0, [r1], {-0}
 110:	00036400 	andeq	r6, r3, r0, lsl #8
 114:	ba000400 	blt	111c <startup-0x1fffeee4>
 118:	04000000 	streq	r0, [r0], #-0
 11c:	0000c801 	andeq	ip, r0, r1, lsl #16
 120:	02b20c00 	adcseq	r0, r2, #0, 24
 124:	00000000 	andeq	r0, r0, r0
 128:	01140000 	tsteq	r4, r0
 12c:	03102000 	tsteq	r0, #0
 130:	01190000 	tsteq	r9, r0
 134:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
 138:	ff122002 			; <UNDEFINED> instruction: 0xff122002
 13c:	03000000 	movweq	r0, #0
 140:	000002fb 	strdeq	r0, [r0], -fp
 144:	040e2102 	streq	r2, [lr], #-258	; 0xfffffefe
 148:	00000001 	andeq	r0, r0, r1
 14c:	0001a003 	andeq	sl, r1, r3
 150:	14220200 	strtne	r0, [r2], #-512	; 0xfffffe00
 154:	0000010b 	andeq	r0, r0, fp, lsl #2
 158:	021c0304 	andseq	r0, ip, #4, 6	; 0x10000000
 15c:	23020000 	movwcs	r0, #8192	; 0x2000
 160:	00010b14 	andeq	r0, r1, r4, lsl fp
 164:	72030600 	andvc	r0, r3, #0, 12
 168:	02000002 	andeq	r0, r0, #2
 16c:	01040e24 	tsteq	r4, r4, lsr #28
 170:	03080000 	movweq	r0, #32768	; 0x8000
 174:	00000216 	andeq	r0, r0, r6, lsl r2
 178:	040e2502 	streq	r2, [lr], #-1282	; 0xfffffafe
 17c:	0c000001 	stceq	0, cr0, [r0], {1}
 180:	00028603 	andeq	r8, r2, r3, lsl #12
 184:	0f260200 	svceq	0x00260200
 188:	00000112 	andeq	r0, r0, r2, lsl r1
 18c:	026a0310 	rsbeq	r0, sl, #16, 6	; 0x40000000
 190:	27020000 	strcs	r0, [r2, -r0]
 194:	0001120f 	andeq	r1, r1, pc, lsl #4
 198:	26031100 	strcs	r1, [r3], -r0, lsl #2
 19c:	02000002 	andeq	r0, r0, #2
 1a0:	010b1428 	tsteq	fp, r8, lsr #8
 1a4:	03120000 	tsteq	r2, #0
 1a8:	00000244 	andeq	r0, r0, r4, asr #4
 1ac:	120f2902 	andne	r2, pc, #32768	; 0x8000
 1b0:	14000001 	strne	r0, [r0], #-1
 1b4:	0001a703 	andeq	sl, r1, r3, lsl #14
 1b8:	0f2a0200 	svceq	0x002a0200
 1bc:	00000112 	andeq	r0, r0, r2, lsl r1
 1c0:	02300315 	eorseq	r0, r0, #1409286144	; 0x54000000
 1c4:	2b020000 	blcs	801cc <startup-0x1ff7fe34>
 1c8:	00010b14 	andeq	r0, r1, r4, lsl fp
 1cc:	90031600 	andls	r1, r3, r0, lsl #12
 1d0:	02000001 	andeq	r0, r0, #1
 1d4:	01040e2c 	tsteq	r4, ip, lsr #28
 1d8:	03180000 	tsteq	r8, #0
 1dc:	00000301 	andeq	r0, r0, r1, lsl #6
 1e0:	0b142d02 	bleq	50b5f0 <startup-0x1faf4a10>
 1e4:	1c000001 	stcne	0, cr0, [r0], {1}
 1e8:	00023a03 	andeq	r3, r2, r3, lsl #20
 1ec:	142e0200 	strtne	r0, [lr], #-512	; 0xfffffe00
 1f0:	0000010b 	andeq	r0, r0, fp, lsl #2
 1f4:	01d2031e 	bicseq	r0, r2, lr, lsl r3
 1f8:	2f020000 	svccs	0x00020000
 1fc:	0001040e 	andeq	r0, r1, lr, lsl #8
 200:	cd032000 	stcgt	0, cr2, [r3, #-0]
 204:	02000001 	andeq	r0, r0, #1
 208:	01040e30 	tsteq	r4, r0, lsr lr
 20c:	00240000 	eoreq	r0, r4, r0
 210:	00002504 	andeq	r2, r0, r4, lsl #10
 214:	07040500 	streq	r0, [r4, -r0, lsl #10]
 218:	000000a1 	andeq	r0, r0, r1, lsr #1
 21c:	9b070205 	blls	1c0a38 <startup-0x1fe3f5c8>
 220:	05000000 	streq	r0, [r0, #-0]
 224:	008d0801 	addeq	r0, sp, r1, lsl #16
 228:	c7060000 	strgt	r0, [r6, -r0]
 22c:	02000001 	andeq	r0, r0, #1
 230:	01250a31 			; <UNDEFINED> instruction: 0x01250a31
 234:	04070000 	streq	r0, [r7], #-0
 238:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 23c:	69050408 	stmdbvs	r5, {r3, sl}
 240:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 244:	00000184 	andeq	r0, r0, r4, lsl #3
 248:	2b057801 	blcs	15e254 <startup-0x1fea1dac>
 24c:	c4000001 	strgt	r0, [r0], #-1
 250:	60200003 	eorvs	r0, r0, r3
 254:	01000000 	mrseq	r0, (UNDEF: 0)
 258:	0001789c 	muleq	r1, ip, r8
 25c:	01c10a00 	biceq	r0, r1, r0, lsl #20
 260:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 264:	00017816 	andeq	r7, r1, r6, lsl r8
 268:	6c910200 	lfmvs	f0, 4, [r1], {0}
 26c:	0001d70a 	andeq	sp, r1, sl, lsl #14
 270:	24780100 	ldrbtcs	r0, [r8], #-256	; 0xffffff00
 274:	00000178 	andeq	r0, r0, r8, ror r1
 278:	0b689102 	bleq	1a24688 <startup-0x1e5db978>
 27c:	7a010073 	bvc	40450 <startup-0x1ffbfbb0>
 280:	00017808 	andeq	r7, r1, r8, lsl #16
 284:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 288:	7e040700 	cdpvc	7, 0, cr0, cr4, cr0, {0}
 28c:	05000001 	streq	r0, [r0, #-1]
 290:	00960801 	addseq	r0, r6, r1, lsl #16
 294:	7a0c0000 	bvc	30029c <startup-0x1fcffd64>
 298:	01000002 	tsteq	r0, r2
 29c:	0378066f 	cmneq	r8, #116391936	; 0x6f00000
 2a0:	004c2000 	subeq	r2, ip, r0
 2a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a8:	000001c9 	andeq	r0, r0, r9, asr #3
 2ac:	776f720d 	strbvc	r7, [pc, -sp, lsl #4]!
 2b0:	206f0100 	rsbcs	r0, pc, r0, lsl #2
 2b4:	00000112 	andeq	r0, r0, r2, lsl r1
 2b8:	0a6f9102 	beq	1be46c8 <startup-0x1e41b938>
 2bc:	0000017d 	andeq	r0, r0, sp, ror r1
 2c0:	12336f01 	eorsne	r6, r3, #1, 30
 2c4:	02000001 	andeq	r0, r0, #1
 2c8:	610b6e91 			; <UNDEFINED> instruction: 0x610b6e91
 2cc:	01007264 	tsteq	r0, r4, ror #4
 2d0:	017e0771 	cmneq	lr, r1, ror r7
 2d4:	91020000 	mrsls	r0, (UNDEF: 2)
 2d8:	060c0077 			; <UNDEFINED> instruction: 0x060c0077
 2dc:	01000003 	tsteq	r0, r3
 2e0:	033c0667 	teqeq	ip, #108003328	; 0x6700000
 2e4:	003c2000 	eorseq	r2, ip, r0
 2e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2ec:	000001ed 	andeq	r0, r0, sp, ror #3
 2f0:	0100630d 	tsteq	r0, sp, lsl #6
 2f4:	017e1c67 	cmneq	lr, r7, ror #24
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	950e0077 	strls	r0, [lr, #-119]	; 0xffffff89
 300:	01000001 	tsteq	r0, r1
 304:	03020658 	movweq	r0, #9816	; 0x2658
 308:	003a2000 	eorseq	r2, sl, r0
 30c:	9c010000 	stcls	0, cr0, [r1], {-0}
 310:	00025c0c 	andeq	r5, r2, ip, lsl #24
 314:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
 318:	200002cc 	andcs	r0, r0, ip, asr #5
 31c:	00000036 	andeq	r0, r0, r6, lsr r0
 320:	02259c01 	eoreq	r9, r5, #256	; 0x100
 324:	620a0000 	andvs	r0, sl, #0
 328:	01000002 	tsteq	r0, r2
 32c:	01122351 	tsteq	r2, r1, asr r3
 330:	91020000 	mrsls	r0, (UNDEF: 2)
 334:	a2090077 	andge	r0, r9, #119	; 0x77
 338:	01000002 	tsteq	r0, r2
 33c:	01120f47 	tsteq	r2, r7, asr #30
 340:	02840000 	addeq	r0, r4, #0
 344:	00482000 	subeq	r2, r8, r0
 348:	9c010000 	stcls	0, cr0, [r1], {-0}
 34c:	0000024d 	andeq	r0, r0, sp, asr #4
 350:	0100630b 	tsteq	r0, fp, lsl #6
 354:	017e074c 	cmneq	lr, ip, asr #14
 358:	91020000 	mrsls	r0, (UNDEF: 2)
 35c:	af09006f 	svcge	0x0009006f
 360:	01000001 	tsteq	r0, r1
 364:	01120f3b 	tsteq	r2, fp, lsr pc
 368:	02440000 	subeq	r0, r4, #0
 36c:	00402000 	subeq	r2, r0, r0
 370:	9c010000 	stcls	0, cr0, [r1], {-0}
 374:	00000275 	andeq	r0, r0, r5, ror r2
 378:	0100630b 	tsteq	r0, fp, lsl #6
 37c:	017e073d 	cmneq	lr, sp, lsr r7
 380:	91020000 	mrsls	r0, (UNDEF: 2)
 384:	4b0c006f 	blmi	300548 <startup-0x1fcffab8>
 388:	01000002 	tsteq	r0, r2
 38c:	021a0634 	andseq	r0, sl, #52, 12	; 0x3400000
 390:	002a2000 	eoreq	r2, sl, r0
 394:	9c010000 	stcls	0, cr0, [r1], {-0}
 398:	00000299 	muleq	r0, r9, r2
 39c:	0100630d 	tsteq	r0, sp, lsl #6
 3a0:	01122634 	tsteq	r2, r4, lsr r6
 3a4:	91020000 	mrsls	r0, (UNDEF: 2)
 3a8:	060c0077 			; <UNDEFINED> instruction: 0x060c0077
 3ac:	01000002 	tsteq	r0, r2
 3b0:	01f0062d 	mvnseq	r0, sp, lsr #12
 3b4:	002a2000 	eoreq	r2, sl, r0
 3b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3bc:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
 3c0:	0100630d 	tsteq	r0, sp, lsl #6
 3c4:	0112252d 	tsteq	r2, sp, lsr #10
 3c8:	91020000 	mrsls	r0, (UNDEF: 2)
 3cc:	dd090077 	stcle	0, cr0, [r9, #-476]	; 0xfffffe24
 3d0:	01000001 	tsteq	r0, r1
 3d4:	017e0622 	cmneq	lr, r2, lsr #12
 3d8:	01c40000 	biceq	r0, r4, r0
 3dc:	002c2000 	eoreq	r2, ip, r0
 3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e4:	000002e5 	andeq	r0, r0, r5, ror #5
 3e8:	0100630b 	tsteq	r0, fp, lsl #6
 3ec:	017e0724 	cmneq	lr, r4, lsr #14
 3f0:	91020000 	mrsls	r0, (UNDEF: 2)
 3f4:	660c0077 			; <UNDEFINED> instruction: 0x660c0077
 3f8:	01000001 	tsteq	r0, r1
 3fc:	01940618 	orrseq	r0, r4, r8, lsl r6
 400:	00302000 	eorseq	r2, r0, r0
 404:	9c010000 	stcls	0, cr0, [r1], {-0}
 408:	00000309 	andeq	r0, r0, r9, lsl #6
 40c:	0100630d 	tsteq	r0, sp, lsl #6
 410:	01122d18 	tsteq	r2, r8, lsl sp
 414:	91020000 	mrsls	r0, (UNDEF: 2)
 418:	8d0f0077 	stchi	0, cr0, [pc, #-476]	; 244 <startup-0x1ffffdbc>
 41c:	01000002 	tsteq	r0, r2
 420:	014c0610 	cmpeq	ip, r0, lsl r6
 424:	00482000 	subeq	r2, r8, r0
 428:	9c010000 	stcls	0, cr0, [r1], {-0}
 42c:	0000033a 	andeq	r0, r0, sl, lsr r3
 430:	0100780d 	tsteq	r0, sp, lsl #16
 434:	017e2210 	cmneq	lr, r0, lsl r2
 438:	91020000 	mrsls	r0, (UNDEF: 2)
 43c:	00630b6f 	rsbeq	r0, r3, pc, ror #22
 440:	7e071201 	cdpvc	2, 0, cr1, cr7, cr1, {0}
 444:	02000001 	andeq	r0, r0, #1
 448:	10007791 	mulne	r0, r1, r7
 44c:	000001f3 	strdeq	r0, [r0], -r3
 450:	14060901 	strne	r0, [r6], #-2305	; 0xfffff6ff
 454:	38200001 	stmdacc	r0!, {r0}
 458:	01000000 	mrseq	r0, (UNDEF: 0)
 45c:	00780d9c 			; <UNDEFINED> instruction: 0x00780d9c
 460:	7e200901 	vmulvc.f16	s0, s0, s2	; <UNPREDICTABLE>
 464:	02000001 	andeq	r0, r0, #1
 468:	630b6f91 	movwvs	r6, #49041	; 0xbf91
 46c:	070b0100 	streq	r0, [fp, -r0, lsl #2]
 470:	0000017e 	andeq	r0, r0, lr, ror r1
 474:	00779102 	rsbseq	r9, r7, r2, lsl #2
 478:	00062500 	andeq	r2, r6, r0, lsl #10
 47c:	e0000400 	and	r0, r0, r0, lsl #8
 480:	04000001 	streq	r0, [r0], #-1
 484:	0000c801 	andeq	ip, r0, r1, lsl #16
 488:	03f20c00 	mvnseq	r0, #0, 24
	...
 498:	02c60000 	sbceq	r0, r6, #0
 49c:	04020000 	streq	r0, [r2], #-0
 4a0:	0000a107 	andeq	sl, r0, r7, lsl #2
 4a4:	07020200 	streq	r0, [r2, -r0, lsl #4]
 4a8:	0000009b 	muleq	r0, fp, r0
 4ac:	8d080102 	stfhis	f0, [r8, #-8]
 4b0:	03000000 	movweq	r0, #0
 4b4:	09340202 	ldmdbeq	r4!, {r1, r9}
 4b8:	0000005a 	andeq	r0, r0, sl, asr r0
 4bc:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
 4c0:	00331036 	eorseq	r1, r3, r6, lsr r0
 4c4:	04000000 	streq	r0, [r0], #-0
 4c8:	36020079 			; <UNDEFINED> instruction: 0x36020079
 4cc:	00003313 	andeq	r3, r0, r3, lsl r3
 4d0:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 4d4:	00000362 	andeq	r0, r0, r2, ror #6
 4d8:	3a033702 	bcc	ce0e8 <startup-0x1ff31f18>
 4dc:	06000000 	streq	r0, [r0], -r0
 4e0:	3b02300c 	blcc	8c518 <startup-0x1ff73ae8>
 4e4:	0000a409 	andeq	sl, r0, r9, lsl #8
 4e8:	04c20700 	strbeq	r0, [r2], #1792	; 0x700
 4ec:	3d020000 	stccc	0, cr0, [r2, #-0]
 4f0:	0000a406 	andeq	sl, r0, r6, lsl #8
 4f4:	d9070000 	stmdble	r7, {}	; <UNPREDICTABLE>
 4f8:	02000003 	andeq	r0, r0, #3
 4fc:	00a4063e 	adceq	r0, r4, lr, lsr r6
 500:	07040000 	streq	r0, [r4, -r0]
 504:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 508:	a4063f02 	strge	r3, [r6], #-3842	; 0xfffff0fe
 50c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 510:	00787004 	rsbseq	r7, r8, r4
 514:	ab084002 	blge	210524 <startup-0x1fdefadc>
 518:	0c000000 	stceq	0, cr0, [r0], {-0}
 51c:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
 520:	00746e69 	rsbseq	r6, r4, r9, ror #28
 524:	00005a09 	andeq	r5, r0, r9, lsl #20
 528:	0000bc00 	andeq	fp, r0, r0, lsl #24
 52c:	00250a00 	eoreq	r0, r5, r0, lsl #20
 530:	17ff0000 	ldrbne	r0, [pc, r0]!
 534:	03180500 	tsteq	r8, #0, 10
 538:	41020000 	mrsmi	r0, (UNDEF: 2)
 53c:	00006603 	andeq	r6, r0, r3, lsl #12
 540:	03170500 	tsteq	r7, #0, 10
 544:	41020000 	mrsmi	r0, (UNDEF: 2)
 548:	0000d40e 	andeq	sp, r0, lr, lsl #8
 54c:	66040b00 	strvs	r0, [r4], -r0, lsl #22
 550:	0c000000 	stceq	0, cr0, [r0], {-0}
 554:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
 558:	10430224 	subne	r0, r3, r4, lsr #4
 55c:	0000015d 	andeq	r0, r0, sp, asr r1
 560:	6f656704 	svcvs	0x00656704
 564:	0c450200 	sfmeq	f0, 2, [r5], {-0}
 568:	000000c8 	andeq	r0, r0, r8, asr #1
 56c:	033d0700 	teqeq	sp, #0, 14
 570:	46020000 	strmi	r0, [r2], -r0
 574:	0000a406 	andeq	sl, r0, r6, lsl #8
 578:	42070400 	andmi	r0, r7, #0, 8
 57c:	02000003 	andeq	r0, r0, #3
 580:	00a40c46 	adceq	r0, r4, r6, asr #24
 584:	07080000 	streq	r0, [r8, -r0]
 588:	00000379 	andeq	r0, r0, r9, ror r3
 58c:	a4064702 	strge	r4, [r6], #-1794	; 0xfffff8fe
 590:	0c000000 	stceq	0, cr0, [r0], {-0}
 594:	00037e07 	andeq	r7, r3, r7, lsl #28
 598:	0c470200 	sfmeq	f0, 2, [r7], {-0}
 59c:	000000a4 	andeq	r0, r0, r4, lsr #1
 5a0:	03ed0710 	mvneq	r0, #16, 14	; 0x400000
 5a4:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
 5a8:	00016e0a 	andeq	r6, r1, sl, lsl #28
 5ac:	da071400 	ble	1c55b4 <startup-0x1fe3aa4c>
 5b0:	02000004 	andeq	r0, r0, #4
 5b4:	016e0a49 	cmneq	lr, r9, asr #20
 5b8:	07180000 	ldreq	r0, [r8, -r0]
 5bc:	00000338 	andeq	r0, r0, r8, lsr r3
 5c0:	6e0a4a02 	vmlavs.f32	s8, s20, s4
 5c4:	1c000001 	stcne	0, cr0, [r0], {1}
 5c8:	00036f07 	andeq	r6, r3, r7, lsl #30
 5cc:	0a4b0200 	beq	12c0dd4 <startup-0x1ed3f22c>
 5d0:	00000189 	andeq	r0, r0, r9, lsl #3
 5d4:	680d0020 	stmdavs	sp, {r5}
 5d8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 5dc:	00000168 	andeq	r0, r0, r8, ror #2
 5e0:	da040b00 	ble	1031e8 <startup-0x1fefce18>
 5e4:	0b000000 	bleq	5ec <startup-0x1ffffa14>
 5e8:	00015d04 	andeq	r5, r1, r4, lsl #26
 5ec:	01890d00 	orreq	r0, r9, r0, lsl #26
 5f0:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
 5f4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 5f8:	000000a4 	andeq	r0, r0, r4, lsr #1
 5fc:	0000a40e 	andeq	sl, r0, lr, lsl #8
 600:	040b0000 	streq	r0, [fp], #-0
 604:	00000174 	andeq	r0, r0, r4, ror r1
 608:	0004eb05 	andeq	lr, r4, r5, lsl #22
 60c:	034c0200 	movteq	r0, #49664	; 0xc200
 610:	000000da 	ldrdeq	r0, [r0], -sl
 614:	0004ea05 	andeq	lr, r4, r5, lsl #20
 618:	0c4c0200 	sfmeq	f0, 2, [ip], {-0}
 61c:	00000168 	andeq	r0, r0, r8, ror #2
 620:	0004c50f 	andeq	ip, r4, pc, lsl #10
 624:	0e2d0100 	sufeqe	f0, f5, f0
 628:	00000025 	andeq	r0, r0, r5, lsr #32
 62c:	a0880305 	addge	r0, r8, r5, lsl #6
 630:	a70f2000 	strge	r2, [pc, -r0]
 634:	01000004 	tsteq	r0, r4
 638:	00bc0a62 	adcseq	r0, ip, r2, ror #20
 63c:	03050000 	movweq	r0, #20480	; 0x5000
 640:	20000fd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 644:	00003310 	andeq	r3, r0, r0, lsl r3
 648:	0f700100 	svceq	0x00700100
 64c:	0000018f 	andeq	r0, r0, pc, lsl #3
 650:	3fdc0305 	svccc	0x00dc0305
 654:	8b0f2000 	blhi	3c865c <startup-0x1fc379a4>
 658:	01000004 	tsteq	r0, r4
 65c:	00bc0a7c 	adcseq	r0, ip, ip, ror sl
 660:	03050000 	movweq	r0, #20480	; 0x5000
 664:	20004000 	andcs	r4, r0, r0
 668:	00032610 	andeq	r2, r3, r0, lsl r6
 66c:	0f860100 	svceq	0x00860100
 670:	0000018f 	andeq	r0, r0, pc, lsl #3
 674:	700c0305 	andvc	r0, ip, r5, lsl #6
 678:	c20f2000 	andgt	r2, pc, #0
 67c:	01000003 	tsteq	r0, r3
 680:	00bc0a92 	umlalseq	r0, ip, r2, sl
 684:	03050000 	movweq	r0, #20480	; 0x5000
 688:	20007030 	andcs	r7, r0, r0, lsr r0
 68c:	0003a411 	andeq	sl, r3, r1, lsl r4
 690:	06e10100 	strbteq	r0, [r1], r0, lsl #2
 694:	200007e8 	andcs	r0, r0, r8, ror #15
 698:	00000334 	andeq	r0, r0, r4, lsr r3
 69c:	029e9c01 	addseq	r9, lr, #256	; 0x100
 6a0:	d0120000 	andsle	r0, r2, r0
 6a4:	01000003 	tsteq	r0, r3
 6a8:	00a402e4 	adceq	r0, r4, r4, ror #5
 6ac:	023b0000 	eorseq	r0, fp, #0
 6b0:	00130000 	andseq	r0, r3, r0
 6b4:	00036810 	andeq	r6, r3, r0, lsl r8
 6b8:	0aea0100 	beq	ffa80ac0 <points+0xdfa76a38>
 6bc:	0000019b 	muleq	r0, fp, r1
 6c0:	105c9102 	subsne	r9, ip, r2, lsl #2
 6c4:	000004f2 	strdeq	r0, [r0], -r2
 6c8:	9b0aeb01 	blls	2bb2d4 <startup-0x1fd44d2c>
 6cc:	02000001 	andeq	r0, r0, #1
 6d0:	6b105891 	blvs	41691c <startup-0x1fbe96e4>
 6d4:	01000004 	tsteq	r0, r4
 6d8:	029e09ec 	addseq	r0, lr, #236, 18	; 0x3b0000
 6dc:	91040000 	mrsls	r0, (UNDEF: 4)
 6e0:	147eefd8 	ldrbtne	lr, [lr], #-4056	; 0xfffff028
 6e4:	2000087c 	andcs	r0, r0, ip, ror r8
 6e8:	0000006c 	andeq	r0, r0, ip, rrx
 6ec:	00000285 	andeq	r0, r0, r5, lsl #5
 6f0:	01006915 	tsteq	r0, r5, lsl r9
 6f4:	00a40dfe 	strdeq	r0, [r4], lr	; <UNPREDICTABLE>
 6f8:	91020000 	mrsls	r0, (UNDEF: 2)
 6fc:	f2160064 	vhadd.s16	q0, q3, q10
 700:	ea200008 	b	800728 <startup-0x1f7ff8d8>
 704:	17000000 	strne	r0, [r0, -r0]
 708:	06010069 	streq	r0, [r1], -r9, rrx
 70c:	00a40d01 	adceq	r0, r4, r1, lsl #26
 710:	91020000 	mrsls	r0, (UNDEF: 2)
 714:	09000060 	stmdbeq	r0, {r5, r6}
 718:	0000018f 	andeq	r0, r0, pc, lsl #3
 71c:	000002af 	andeq	r0, r0, pc, lsr #5
 720:	0000250a 	andeq	r2, r0, sl, lsl #10
 724:	0001ff00 	andeq	pc, r1, r0, lsl #30
 728:	0004e018 	andeq	lr, r4, r8, lsl r0
 72c:	06dc0100 	ldrbeq	r0, [ip], r0, lsl #2
 730:	200007ba 			; <UNDEFINED> instruction: 0x200007ba
 734:	0000002e 	andeq	r0, r0, lr, lsr #32
 738:	32199c01 	andscc	r9, r9, #256	; 0x100
 73c:	01000004 	tsteq	r0, r4
 740:	032006c6 			; <UNDEFINED> instruction: 0x032006c6
 744:	07340000 	ldreq	r0, [r4, -r0]!
 748:	00862000 	addeq	r2, r6, r0
 74c:	9c010000 	stcls	0, cr0, [r1], {-0}
 750:	00000320 	andeq	r0, r0, r0, lsr #6
 754:	0004f21a 	andeq	pc, r4, sl, lsl r2	; <UNPREDICTABLE>
 758:	18c60100 	stmiane	r6, {r8}^
 75c:	0000019b 	muleq	r0, fp, r1
 760:	1a6c9102 	bne	1b24b70 <startup-0x1e4db490>
 764:	0000046b 	andeq	r0, r0, fp, ror #8
 768:	272bc601 	strcs	ip, [fp, -r1, lsl #12]!
 76c:	02000003 	andeq	r0, r0, #3
 770:	c51a6891 	ldrgt	r6, [sl, #-2193]	; 0xfffff76f
 774:	01000004 	tsteq	r0, r4
 778:	00a43dc6 	adceq	r3, r4, r6, asr #27
 77c:	91020000 	mrsls	r0, (UNDEF: 2)
 780:	07641664 	strbeq	r1, [r4, -r4, ror #12]!
 784:	004c2000 	subeq	r2, ip, r0
 788:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 78c:	0bd00100 	bleq	ff400b94 <points+0xdf3f6b0c>
 790:	000000a4 	andeq	r0, r0, r4, lsr #1
 794:	00749102 	rsbseq	r9, r4, r2, lsl #2
 798:	08010200 	stmdaeq	r1, {r9}
 79c:	00000096 	muleq	r0, r6, r0
 7a0:	018f040b 	orreq	r0, pc, fp, lsl #8
 7a4:	47190000 	ldrmi	r0, [r9, -r0]
 7a8:	01000003 	tsteq	r0, r3
 7ac:	032006c0 			; <UNDEFINED> instruction: 0x032006c0
 7b0:	07020000 	streq	r0, [r2, -r0]
 7b4:	00322000 	eorseq	r2, r2, r0
 7b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7bc:	00000364 	andeq	r0, r0, r4, ror #6
 7c0:	00316f1b 	eorseq	r6, r1, fp, lsl pc
 7c4:	9b1ec001 	blls	7b07d0 <startup-0x1f84f830>
 7c8:	02000001 	andeq	r0, r0, #1
 7cc:	6f1b7491 	svcvs	0x001b7491
 7d0:	c0010032 	andgt	r0, r1, r2, lsr r0
 7d4:	00019b2a 	andeq	r9, r1, sl, lsr #22
 7d8:	70910200 	addsvc	r0, r1, r0, lsl #4
 7dc:	03831c00 	orreq	r1, r3, #0, 24
 7e0:	b4010000 	strlt	r0, [r1], #-0
 7e4:	00066606 	andeq	r6, r6, r6, lsl #12
 7e8:	00009c20 	andeq	r9, r0, r0, lsr #24
 7ec:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
 7f0:	1b000003 	blne	804 <startup-0x1ffff7fc>
 7f4:	0100316f 	tsteq	r0, pc, ror #2
 7f8:	018f18b4 			; <UNDEFINED> instruction: 0x018f18b4
 7fc:	91020000 	mrsls	r0, (UNDEF: 2)
 800:	326f1b70 	rsbcc	r1, pc, #112, 22	; 0x1c000
 804:	23b40100 			; <UNDEFINED> instruction: 0x23b40100
 808:	0000018f 	andeq	r0, r0, pc, lsl #3
 80c:	00149102 	andseq	r9, r4, r2, lsl #2
 810:	00044e11 	andeq	r4, r4, r1, lsl lr
 814:	06ad0100 	strteq	r0, [sp], r0, lsl #2
 818:	20000628 	andcs	r0, r0, r8, lsr #12
 81c:	0000003e 	andeq	r0, r0, lr, lsr r0
 820:	03e39c01 	mvneq	r9, #256	; 0x100
 824:	6f1b0000 	svcvs	0x001b0000
 828:	01006a62 	tsteq	r0, r2, ror #20
 82c:	032719ad 			; <UNDEFINED> instruction: 0x032719ad
 830:	91020000 	mrsls	r0, (UNDEF: 2)
 834:	03a91a6c 			; <UNDEFINED> instruction: 0x03a91a6c
 838:	ad010000 	stcge	0, cr0, [r1, #-0]
 83c:	0000a424 	andeq	sl, r0, r4, lsr #8
 840:	68910200 	ldmvs	r1, {r9}
 844:	00063216 	andeq	r3, r6, r6, lsl r2
 848:	00002a20 	andeq	r2, r0, r0, lsr #20
 84c:	00691500 	rsbeq	r1, r9, r0, lsl #10
 850:	a40baf01 	strge	sl, [fp], #-3841	; 0xfffff0ff
 854:	02000000 	andeq	r0, r0, #0
 858:	00007491 	muleq	r0, r1, r4
 85c:	00039819 	andeq	r9, r3, r9, lsl r8
 860:	08a00100 	stmiaeq	r0!, {r8}
 864:	0000018f 	andeq	r0, r0, pc, lsl #3
 868:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 86c:	00000070 	andeq	r0, r0, r0, ror r0
 870:	04289c01 	strteq	r9, [r8], #-3073	; 0xfffff3ff
 874:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 878:	19a00100 	stmibne	r0!, {r8}
 87c:	000000a4 	andeq	r0, r0, r4, lsr #1
 880:	1b409102 	blne	1024c90 <startup-0x1efdb370>
 884:	a0010079 	andge	r0, r1, r9, ror r0
 888:	0000a420 	andeq	sl, r0, r0, lsr #8
 88c:	bc910300 	ldclt	3, cr0, [r1], {0}
 890:	626f157f 	rsbvs	r1, pc, #532676608	; 0x1fc00000
 894:	a101006a 	tstge	r1, sl, rrx
 898:	00018f09 	andeq	r8, r1, r9, lsl #30
 89c:	4c910200 	lfmmi	f0, 4, [r1], {0}
 8a0:	03211100 			; <UNDEFINED> instruction: 0x03211100
 8a4:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 8a8:	00058c06 	andeq	r8, r5, r6, lsl #24
 8ac:	00002c20 	andeq	r2, r0, r0, lsr #24
 8b0:	4e9c0100 	fmlmie	f0, f4, f0
 8b4:	1a000004 	bne	8cc <startup-0x1ffff734>
 8b8:	00000368 	andeq	r0, r0, r8, ror #6
 8bc:	9b195901 	blls	656cc8 <startup-0x1f9a9338>
 8c0:	02000001 	andeq	r0, r0, #1
 8c4:	1c007491 	cfstrsne	mvf7, [r0], {145}	; 0x91
 8c8:	00000357 	andeq	r0, r0, r7, asr r3
 8cc:	60065101 	andvs	r5, r6, r1, lsl #2
 8d0:	2c200005 	stccs	0, cr0, [r0], #-20	; 0xffffffec
 8d4:	01000000 	mrseq	r0, (UNDEF: 0)
 8d8:	0004749c 	muleq	r4, ip, r4
 8dc:	04bb1a00 	ldrteq	r1, [fp], #2560	; 0xa00
 8e0:	51010000 	mrspl	r0, (UNDEF: 1)
 8e4:	00019b19 	andeq	r9, r1, r9, lsl fp
 8e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8ec:	045a1c00 	ldrbeq	r1, [sl], #-3072	; 0xfffff400
 8f0:	4a010000 	bmi	408f8 <startup-0x1ffbf708>
 8f4:	00054006 	andeq	r4, r5, r6
 8f8:	00002020 	andeq	r2, r0, r0, lsr #32
 8fc:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
 900:	1b000004 	blne	918 <startup-0x1ffff6e8>
 904:	006a626f 	rsbeq	r6, sl, pc, ror #4
 908:	9b1f4a01 	blls	7d3114 <startup-0x1f82ceec>
 90c:	02000001 	andeq	r0, r0, #1
 910:	781b7491 	ldmdavc	fp, {r0, r4, r7, sl, ip, sp, lr}
 914:	284a0100 	stmdacs	sl, {r8}^
 918:	000000a4 	andeq	r0, r0, r4, lsr #1
 91c:	1b709102 	blne	1c24d2c <startup-0x1e3db2d4>
 920:	4a010079 	bmi	40b0c <startup-0x1ffbf4f4>
 924:	0000a42f 	andeq	sl, r0, pc, lsr #8
 928:	6c910200 	lfmvs	f0, 4, [r1], {0}
 92c:	049a1100 	ldreq	r1, [sl], #256	; 0x100
 930:	3f010000 	svccc	0x00010000
 934:	0004be06 	andeq	fp, r4, r6, lsl #28
 938:	00008220 	andeq	r8, r0, r0, lsr #4
 93c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 940:	1b000005 	blne	95c <startup-0x1ffff6a4>
 944:	006a626f 	rsbeq	r6, sl, pc, ror #4
 948:	9b1b3f01 	blls	6d0554 <startup-0x1f92faac>
 94c:	02000001 	andeq	r0, r0, #1
 950:	8e105c91 	mrchi	12, 0, r5, cr0, cr1, {4}
 954:	01000003 	tsteq	r0, r3
 958:	00a40641 	adceq	r0, r4, r1, asr #12
 95c:	91020000 	mrsls	r0, (UNDEF: 2)
 960:	04ce1668 	strbeq	r1, [lr], #1640	; 0x668
 964:	00682000 	rsbeq	r2, r8, r0
 968:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 96c:	0a420100 	beq	1080d74 <startup-0x1ef7f28c>
 970:	000000a4 	andeq	r0, r0, r4, lsr #1
 974:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 978:	200004d4 	ldrdcs	r0, [r0], -r4
 97c:	00000054 	andeq	r0, r0, r4, asr r0
 980:	01007815 	tsteq	r0, r5, lsl r8
 984:	00331144 	eorseq	r1, r3, r4, asr #2
 988:	91020000 	mrsls	r0, (UNDEF: 2)
 98c:	00791567 	rsbseq	r1, r9, r7, ror #10
 990:	33114501 	tstcc	r1, #4194304	; 0x400000
 994:	02000000 	andeq	r0, r0, #0
 998:	00006691 	muleq	r0, r1, r6
 99c:	032c1100 			; <UNDEFINED> instruction: 0x032c1100
 9a0:	34010000 	strcc	r0, [r1], #-0
 9a4:	00043c06 	andeq	r3, r4, r6, lsl #24
 9a8:	00008220 	andeq	r8, r0, r0, lsr #4
 9ac:	949c0100 	ldrls	r0, [ip], #256	; 0x100
 9b0:	1b000005 	blne	9cc <startup-0x1ffff634>
 9b4:	006a626f 	rsbeq	r6, sl, pc, ror #4
 9b8:	9b1a3401 	blls	68d9c4 <startup-0x1f97263c>
 9bc:	02000001 	andeq	r0, r0, #1
 9c0:	8e105c91 	mrchi	12, 0, r5, cr0, cr1, {4}
 9c4:	01000003 	tsteq	r0, r3
 9c8:	00a40636 	adceq	r0, r4, r6, lsr r6
 9cc:	91020000 	mrsls	r0, (UNDEF: 2)
 9d0:	044c1668 	strbeq	r1, [ip], #-1640	; 0xfffff998
 9d4:	00682000 	rsbeq	r2, r8, r0
 9d8:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 9dc:	0a370100 	beq	dc0de4 <startup-0x1f23f21c>
 9e0:	000000a4 	andeq	r0, r0, r4, lsr #1
 9e4:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 9e8:	20000452 	andcs	r0, r0, r2, asr r4
 9ec:	00000054 	andeq	r0, r0, r4, asr r0
 9f0:	01007815 	tsteq	r0, r5, lsl r8
 9f4:	00331139 	eorseq	r1, r3, r9, lsr r1
 9f8:	91020000 	mrsls	r0, (UNDEF: 2)
 9fc:	00791567 	rsbseq	r1, r9, r7, ror #10
 a00:	33113a01 	tstcc	r1, #4096	; 0x1000
 a04:	02000000 	andeq	r0, r0, #0
 a08:	00006691 	muleq	r0, r1, r6
 a0c:	04cc1c00 	strbeq	r1, [ip], #3072	; 0xc00
 a10:	27010000 	strcs	r0, [r1, -r0]
 a14:	00043606 	andeq	r3, r4, r6, lsl #12
 a18:	00000620 	andeq	r0, r0, r0, lsr #12
 a1c:	c39c0100 	orrsgt	r0, ip, #0, 2
 a20:	1b000005 	blne	a3c <startup-0x1ffff5c4>
 a24:	27010078 	smlsdxcs	r1, r8, r0, r0
 a28:	0000a41e 	andeq	sl, r0, lr, lsl r4
 a2c:	1b500100 	blne	1400e34 <startup-0x1ebff1cc>
 a30:	27010079 	smlsdxcs	r1, r9, r0, r0
 a34:	0000a425 	andeq	sl, r0, r5, lsr #8
 a38:	00510100 	subseq	r0, r1, r0, lsl #2
 a3c:	0004761d 	andeq	r7, r4, sp, lsl r6
 a40:	06200100 	strteq	r0, [r0], -r0, lsl #2
 a44:	20000430 	andcs	r0, r0, r0, lsr r4
 a48:	00000006 	andeq	r0, r0, r6
 a4c:	b01c9c01 	andslt	r9, ip, r1, lsl #24
 a50:	01000003 	tsteq	r0, r3
 a54:	042a0619 	strteq	r0, [sl], #-1561	; 0xfffff9e7
 a58:	00062000 	andeq	r2, r6, r0
 a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
 a60:	00000604 	andeq	r0, r0, r4, lsl #12
 a64:	0100781b 	tsteq	r0, fp, lsl r8
 a68:	00a41c19 	adceq	r1, r4, r9, lsl ip
 a6c:	50010000 	andpl	r0, r1, r0
 a70:	0100791b 	tsteq	r0, fp, lsl r9
 a74:	00a42319 	adceq	r2, r4, r9, lsl r3
 a78:	51010000 	mrspl	r0, (UNDEF: 1)
 a7c:	043c1d00 	ldrteq	r1, [ip], #-3328	; 0xfffff300
 a80:	12010000 	andne	r0, r1, #0
 a84:	00042406 	andeq	r2, r4, r6, lsl #8
 a88:	00000620 	andeq	r0, r0, r0, lsr #12
 a8c:	1d9c0100 	ldfnes	f0, [ip]
 a90:	000003e5 	andeq	r0, r0, r5, ror #7
 a94:	00060701 	andeq	r0, r6, r1, lsl #14
 a98:	0c200000 	stceq	0, cr0, [r0], #-0
 a9c:	01000000 	mrseq	r0, (UNDEF: 0)
 aa0:	01d1009c 			; <UNDEFINED> instruction: 0x01d1009c
 aa4:	00040000 	andeq	r0, r4, r0
 aa8:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 aac:	00c80104 	sbceq	r0, r8, r4, lsl #2
 ab0:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
 ab4:	00000005 	andeq	r0, r0, r5
 ab8:	1c000000 	stcne	0, cr0, [r0], {-0}
 abc:	2020000b 	eorcs	r0, r0, fp
 ac0:	b5000001 	strlt	r0, [r0, #-1]
 ac4:	02000006 	andeq	r0, r0, #6
 ac8:	12200228 	eorne	r0, r0, #40, 4	; 0x80000002
 acc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 ad0:	0002fb03 	andeq	pc, r2, r3, lsl #22
 ad4:	0e210200 	cdpeq	2, 2, cr0, cr1, cr0, {0}
 ad8:	00000104 	andeq	r0, r0, r4, lsl #2
 adc:	01a00300 	lsleq	r0, r0, #6
 ae0:	22020000 	andcs	r0, r2, #0
 ae4:	00010b14 	andeq	r0, r1, r4, lsl fp
 ae8:	1c030400 	cfstrsne	mvf0, [r3], {-0}
 aec:	02000002 	andeq	r0, r0, #2
 af0:	010b1423 	tsteq	fp, r3, lsr #8
 af4:	03060000 	movweq	r0, #24576	; 0x6000
 af8:	00000272 	andeq	r0, r0, r2, ror r2
 afc:	040e2402 	streq	r2, [lr], #-1026	; 0xfffffbfe
 b00:	08000001 	stmdaeq	r0, {r0}
 b04:	00021603 	andeq	r1, r2, r3, lsl #12
 b08:	0e250200 	cdpeq	2, 2, cr0, cr5, cr0, {0}
 b0c:	00000104 	andeq	r0, r0, r4, lsl #2
 b10:	0286030c 	addeq	r0, r6, #12, 6	; 0x30000000
 b14:	26020000 	strcs	r0, [r2], -r0
 b18:	0001120f 	andeq	r1, r1, pc, lsl #4
 b1c:	6a031000 	bvs	c4b24 <startup-0x1ff3b4dc>
 b20:	02000002 	andeq	r0, r0, #2
 b24:	01120f27 	tsteq	r2, r7, lsr #30
 b28:	03110000 	tsteq	r1, #0
 b2c:	00000226 	andeq	r0, r0, r6, lsr #4
 b30:	0b142802 	bleq	50ab40 <startup-0x1faf54c0>
 b34:	12000001 	andne	r0, r0, #1
 b38:	00024403 	andeq	r4, r2, r3, lsl #8
 b3c:	0f290200 	svceq	0x00290200
 b40:	00000112 	andeq	r0, r0, r2, lsl r1
 b44:	01a70314 			; <UNDEFINED> instruction: 0x01a70314
 b48:	2a020000 	bcs	80b50 <startup-0x1ff7f4b0>
 b4c:	0001120f 	andeq	r1, r1, pc, lsl #4
 b50:	30031500 	andcc	r1, r3, r0, lsl #10
 b54:	02000002 	andeq	r0, r0, #2
 b58:	010b142b 	tsteq	fp, fp, lsr #8
 b5c:	03160000 	tsteq	r6, #0
 b60:	00000190 	muleq	r0, r0, r1
 b64:	040e2c02 	streq	r2, [lr], #-3074	; 0xfffff3fe
 b68:	18000001 	stmdane	r0, {r0}
 b6c:	00030103 	andeq	r0, r3, r3, lsl #2
 b70:	142d0200 	strtne	r0, [sp], #-512	; 0xfffffe00
 b74:	0000010b 	andeq	r0, r0, fp, lsl #2
 b78:	023a031c 	eorseq	r0, sl, #28, 6	; 0x70000000
 b7c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
 b80:	00010b14 	andeq	r0, r1, r4, lsl fp
 b84:	d2031e00 	andle	r1, r3, #0, 28
 b88:	02000001 	andeq	r0, r0, #1
 b8c:	01040e2f 	tsteq	r4, pc, lsr #28
 b90:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 b94:	000001cd 	andeq	r0, r0, sp, asr #3
 b98:	040e3002 	streq	r3, [lr], #-2
 b9c:	24000001 	strcs	r0, [r0], #-1
 ba0:	00250400 	eoreq	r0, r5, r0, lsl #8
 ba4:	04050000 	streq	r0, [r5], #-0
 ba8:	0000a107 	andeq	sl, r0, r7, lsl #2
 bac:	07020500 	streq	r0, [r2, -r0, lsl #10]
 bb0:	0000009b 	muleq	r0, fp, r0
 bb4:	8d080105 	stfhis	f0, [r8, #-20]	; 0xffffffec
 bb8:	06000000 	streq	r0, [r0], -r0
 bbc:	000001c7 	andeq	r0, r0, r7, asr #3
 bc0:	250a3102 	strcs	r3, [sl, #-258]	; 0xfffffefe
 bc4:	07000001 	streq	r0, [r0, -r1]
 bc8:	0000ff04 	andeq	pc, r0, r4, lsl #30
 bcc:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
 bd0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 bd4:	00054b09 	andeq	r4, r5, r9, lsl #22
 bd8:	0f200100 	svceq	0x00200100
 bdc:	00000112 	andeq	r0, r0, r2, lsl r1
 be0:	20000bd4 	ldrdcs	r0, [r0], -r4
 be4:	00000068 	andeq	r0, r0, r8, rrx
 be8:	017a9c01 	cmneq	sl, r1, lsl #24
 bec:	6b0a0000 	blvs	280bf4 <startup-0x1fd7f40c>
 bf0:	01007965 	tsteq	r0, r5, ror #18
 bf4:	017a1022 	cmneq	sl, r2, lsr #32
 bf8:	91020000 	mrsls	r0, (UNDEF: 2)
 bfc:	6f720a58 	svcvs	0x00720a58
 c00:	24010077 	strcs	r0, [r1], #-119	; 0xffffff89
 c04:	00012b06 	andeq	r2, r1, r6, lsl #22
 c08:	6c910200 	lfmvs	f0, 4, [r1], {0}
 c0c:	6c6f630a 	stclvs	3, cr6, [pc], #-40	; bec <startup-0x1ffff414>
 c10:	0b240100 	bleq	901018 <startup-0x1f6fefe8>
 c14:	0000012b 	andeq	r0, r0, fp, lsr #2
 c18:	00689102 	rsbeq	r9, r8, r2, lsl #2
 c1c:	0001120b 	andeq	r1, r1, fp, lsl #4
 c20:	00018a00 	andeq	r8, r1, r0, lsl #20
 c24:	01040c00 	tsteq	r4, r0, lsl #24
 c28:	000f0000 	andeq	r0, pc, r0
 c2c:	0005500d 	andeq	r5, r5, sp
 c30:	05120100 	ldreq	r0, [r2, #-256]	; 0xffffff00
 c34:	0000012b 	andeq	r0, r0, fp, lsr #2
 c38:	20000b80 	andcs	r0, r0, r0, lsl #23
 c3c:	00000054 	andeq	r0, r0, r4, asr r0
 c40:	01b29c01 			; <UNDEFINED> instruction: 0x01b29c01
 c44:	630a0000 	movwvs	r0, #40960	; 0xa000
 c48:	10140100 	andsne	r0, r4, r0, lsl #2
 c4c:	00000112 	andeq	r0, r0, r2, lsl r1
 c50:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c54:	0004fd0e 	andeq	pc, r4, lr, lsl #26
 c58:	06060100 	streq	r0, [r6], -r0, lsl #2
 c5c:	20000b1c 	andcs	r0, r0, ip, lsl fp
 c60:	00000064 	andeq	r0, r0, r4, rrx
 c64:	720f9c01 	andvc	r9, pc, #256	; 0x100
 c68:	0100776f 	tsteq	r0, pc, ror #14
 c6c:	01041f06 	tsteq	r4, r6, lsl #30
 c70:	91020000 	mrsls	r0, (UNDEF: 2)
 c74:	77000074 	smlsdxvc	r0, r4, r0, r0
 c78:	04000001 	streq	r0, [r0], #-1
 c7c:	0004a600 	andeq	sl, r4, r0, lsl #12
 c80:	c8010400 	stmdagt	r1, {sl}
 c84:	0c000000 	stceq	0, cr0, [r0], {-0}
 c88:	0000056f 	andeq	r0, r0, pc, ror #10
 c8c:	00000000 	andeq	r0, r0, r0
 c90:	20000c3c 	andcs	r0, r0, ip, lsr ip
 c94:	000000a6 	andeq	r0, r0, r6, lsr #1
 c98:	000007e8 	andeq	r0, r0, r8, ror #15
 c9c:	20022802 	andcs	r2, r2, r2, lsl #16
 ca0:	0000ff12 	andeq	pc, r0, r2, lsl pc	; <UNPREDICTABLE>
 ca4:	02fb0300 	rscseq	r0, fp, #0, 6
 ca8:	21020000 	mrscs	r0, (UNDEF: 2)
 cac:	0001040e 	andeq	r0, r1, lr, lsl #8
 cb0:	a0030000 	andge	r0, r3, r0
 cb4:	02000001 	andeq	r0, r0, #1
 cb8:	010b1422 	tsteq	fp, r2, lsr #8
 cbc:	03040000 	movweq	r0, #16384	; 0x4000
 cc0:	0000021c 	andeq	r0, r0, ip, lsl r2
 cc4:	0b142302 	bleq	5098d4 <startup-0x1faf672c>
 cc8:	06000001 	streq	r0, [r0], -r1
 ccc:	00027203 	andeq	r7, r2, r3, lsl #4
 cd0:	0e240200 	cdpeq	2, 2, cr0, cr4, cr0, {0}
 cd4:	00000104 	andeq	r0, r0, r4, lsl #2
 cd8:	02160308 	andseq	r0, r6, #8, 6	; 0x20000000
 cdc:	25020000 	strcs	r0, [r2, #-0]
 ce0:	0001040e 	andeq	r0, r1, lr, lsl #8
 ce4:	86030c00 	strhi	r0, [r3], -r0, lsl #24
 ce8:	02000002 	andeq	r0, r0, #2
 cec:	01120f26 	tsteq	r2, r6, lsr #30
 cf0:	03100000 	tsteq	r0, #0
 cf4:	0000026a 	andeq	r0, r0, sl, ror #4
 cf8:	120f2702 	andne	r2, pc, #524288	; 0x80000
 cfc:	11000001 	tstne	r0, r1
 d00:	00022603 	andeq	r2, r2, r3, lsl #12
 d04:	14280200 	strtne	r0, [r8], #-512	; 0xfffffe00
 d08:	0000010b 	andeq	r0, r0, fp, lsl #2
 d0c:	02440312 	subeq	r0, r4, #1207959552	; 0x48000000
 d10:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
 d14:	0001120f 	andeq	r1, r1, pc, lsl #4
 d18:	a7031400 	strge	r1, [r3, -r0, lsl #8]
 d1c:	02000001 	andeq	r0, r0, #1
 d20:	01120f2a 	tsteq	r2, sl, lsr #30
 d24:	03150000 	tsteq	r5, #0
 d28:	00000230 	andeq	r0, r0, r0, lsr r2
 d2c:	0b142b02 	bleq	50b93c <startup-0x1faf46c4>
 d30:	16000001 	strne	r0, [r0], -r1
 d34:	00019003 	andeq	r9, r1, r3
 d38:	0e2c0200 	cdpeq	2, 2, cr0, cr12, cr0, {0}
 d3c:	00000104 	andeq	r0, r0, r4, lsl #2
 d40:	03010318 	movweq	r0, #4888	; 0x1318
 d44:	2d020000 	stccs	0, cr0, [r2, #-0]
 d48:	00010b14 	andeq	r0, r1, r4, lsl fp
 d4c:	3a031c00 	bcc	c7d54 <startup-0x1ff382ac>
 d50:	02000002 	andeq	r0, r0, #2
 d54:	010b142e 	tsteq	fp, lr, lsr #8
 d58:	031e0000 	tsteq	lr, #0
 d5c:	000001d2 	ldrdeq	r0, [r0], -r2
 d60:	040e2f02 	streq	r2, [lr], #-3842	; 0xfffff0fe
 d64:	20000001 	andcs	r0, r0, r1
 d68:	0001cd03 	andeq	ip, r1, r3, lsl #26
 d6c:	0e300200 	cdpeq	2, 3, cr0, cr0, cr0, {0}
 d70:	00000104 	andeq	r0, r0, r4, lsl #2
 d74:	25040024 	strcs	r0, [r4, #-36]	; 0xffffffdc
 d78:	05000000 	streq	r0, [r0, #-0]
 d7c:	00a10704 	adceq	r0, r1, r4, lsl #14
 d80:	02050000 	andeq	r0, r5, #0
 d84:	00009b07 	andeq	r9, r0, r7, lsl #22
 d88:	08010500 	stmdaeq	r1, {r8, sl}
 d8c:	0000008d 	andeq	r0, r0, sp, lsl #1
 d90:	0001c706 	andeq	ip, r1, r6, lsl #14
 d94:	0a310200 	beq	c4159c <startup-0x1f3bea64>
 d98:	00000125 	andeq	r0, r0, r5, lsr #2
 d9c:	00ff0407 	rscseq	r0, pc, r7, lsl #8
 da0:	04080000 	streq	r0, [r8], #-0
 da4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 da8:	03d00900 	bicseq	r0, r0, #0, 18
 dac:	1c010000 	stcne	0, cr0, [r1], {-0}
 db0:	000ccc06 	andeq	ip, ip, r6, lsl #24
 db4:	00001620 	andeq	r1, r0, r0, lsr #12
 db8:	0a9c0100 	beq	fe7011c0 <points+0xde6f7138>
 dbc:	000005af 	andeq	r0, r0, pc, lsr #11
 dc0:	90061401 	andls	r1, r6, r1, lsl #8
 dc4:	3c20000c 	stccc	0, cr0, [r0], #-48	; 0xffffffd0
 dc8:	01000000 	mrseq	r0, (UNDEF: 0)
 dcc:	05640a9c 	strbeq	r0, [r4, #-2716]!	; 0xfffff564
 dd0:	0d010000 	stceq	0, cr0, [r1, #-0]
 dd4:	000c6806 	andeq	r6, ip, r6, lsl #16
 dd8:	00002820 	andeq	r2, r0, r0, lsr #16
 ddc:	0a9c0100 	beq	fe7011e4 <points+0xde6f715c>
 de0:	00000558 	andeq	r0, r0, r8, asr r5
 de4:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
 de8:	2c20000c 	stccs	0, cr0, [r0], #-48	; 0xffffffd0
 dec:	01000000 	mrseq	r0, (UNDEF: 0)
 df0:	Address 0x00000df0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	0008030b 	andeq	r0, r8, fp, lsl #6
  28:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  38:	01111349 	tsteq	r1, r9, asr #6
  3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  40:	01194296 			; <UNDEFINED> instruction: 0x01194296
  44:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  48:	08030005 	stmdaeq	r3, {r0, r2}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	13490b39 	movtne	r0, #39737	; 0x9b39
  54:	00001802 	andeq	r1, r0, r2, lsl #16
  58:	03003406 	movweq	r3, #1030	; 0x406
  5c:	3b0b3a0e 	blcc	2ce89c <startup-0x1fd31764>
  60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  64:	00180213 	andseq	r0, r8, r3, lsl r2
  68:	00340700 	eorseq	r0, r4, r0, lsl #14
  6c:	0b3a0803 	bleq	e82080 <startup-0x1f17df80>
  70:	0b390b3b 	bleq	e42d64 <startup-0x1f1bd29c>
  74:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  78:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
  7c:	03193f01 	tsteq	r9, #1, 30
  80:	3b0b3a0e 	blcc	2ce8c0 <startup-0x1fd31740>
  84:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  88:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  8c:	96184006 	ldrls	r4, [r8], -r6
  90:	13011942 	movwne	r1, #6466	; 0x1942
  94:	0b090000 	bleq	24009c <startup-0x1fdbff64>
  98:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  9c:	0a000006 	beq	bc <startup-0x1fffff44>
  a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  a4:	0b3a0e03 	bleq	e838b8 <startup-0x1f17c748>
  a8:	0b390b3b 	bleq	e42d9c <startup-0x1f1bd264>
  ac:	01111927 	tsteq	r1, r7, lsr #18
  b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  b4:	00194297 	mulseq	r9, r7, r2
  b8:	11010000 	mrsne	r0, (UNDEF: 1)
  bc:	130e2501 	movwne	r2, #58625	; 0xe501
  c0:	1b0e030b 	blne	380cf4 <startup-0x1fc7f30c>
  c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  c8:	00171006 	andseq	r1, r7, r6
  cc:	01130200 	tsteq	r3, r0, lsl #4
  d0:	0b3a0b0b 	bleq	e82d04 <startup-0x1f17d2fc>
  d4:	0b390b3b 	bleq	e42dc8 <startup-0x1f1bd238>
  d8:	00001301 	andeq	r1, r0, r1, lsl #6
  dc:	03000d03 	movweq	r0, #3331	; 0xd03
  e0:	3b0b3a0e 	blcc	2ce920 <startup-0x1fd316e0>
  e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  e8:	000b3813 	andeq	r3, fp, r3, lsl r8
  ec:	00350400 	eorseq	r0, r5, r0, lsl #8
  f0:	00001349 	andeq	r1, r0, r9, asr #6
  f4:	0b002405 	bleq	9110 <startup-0x1fff6ef0>
  f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  fc:	0600000e 	streq	r0, [r0], -lr
 100:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 104:	0b3b0b3a 	bleq	ec2df4 <startup-0x1f13d20c>
 108:	13490b39 	movtne	r0, #39737	; 0x9b39
 10c:	0f070000 	svceq	0x00070000
 110:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 114:	08000013 	stmdaeq	r0, {r0, r1, r4}
 118:	0b0b0024 	bleq	2c01b0 <startup-0x1fd3fe50>
 11c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 120:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 124:	03193f01 	tsteq	r9, #1, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 130:	11134919 	tstne	r3, r9, lsl r9
 134:	40061201 	andmi	r1, r6, r1, lsl #4
 138:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	0300050a 	movweq	r0, #1290	; 0x50a
 144:	3b0b3a0e 	blcc	2ce984 <startup-0x1fd3167c>
 148:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 14c:	00180213 	andseq	r0, r8, r3, lsl r2
 150:	00340b00 	eorseq	r0, r4, r0, lsl #22
 154:	0b3a0803 	bleq	e82168 <startup-0x1f17de98>
 158:	0b390b3b 	bleq	e42e4c <startup-0x1f1bd1b4>
 15c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 160:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 164:	03193f01 	tsteq	r9, #1, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <startup-0x1fd31658>
 16c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 170:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 174:	96184006 	ldrls	r4, [r8], -r6
 178:	13011942 	movwne	r1, #6466	; 0x1942
 17c:	050d0000 	streq	r0, [sp, #-0]
 180:	3a080300 	bcc	200d88 <startup-0x1fdff278>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 18c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
 190:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <startup-0x1f17c658>
 198:	0b390b3b 	bleq	e42e8c <startup-0x1f1bd174>
 19c:	01111927 	tsteq	r1, r7, lsr #18
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	00194296 	mulseq	r9, r6, r2
 1a8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 1c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1cc:	0b3b0b3a 	bleq	ec2ebc <startup-0x1f13d144>
 1d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1dc:	00000019 	andeq	r0, r0, r9, lsl r0
 1e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1e4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 1ec:	10011117 	andne	r1, r1, r7, lsl r1
 1f0:	02000017 	andeq	r0, r0, #23
 1f4:	0b0b0024 	bleq	2c028c <startup-0x1fd3fd74>
 1f8:	0e030b3e 	vmoveq.16	d3[0], r0
 1fc:	13030000 	movwne	r0, #12288	; 0x3000
 200:	3a0b0b01 	bcc	2c2e0c <startup-0x1fd3d1f4>
 204:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	0013010b 	andseq	r0, r3, fp, lsl #2
 20c:	000d0400 	andeq	r0, sp, r0, lsl #8
 210:	0b3a0803 	bleq	e82224 <startup-0x1f17dddc>
 214:	0b390b3b 	bleq	e42f08 <startup-0x1f1bd0f8>
 218:	0b381349 	bleq	e04f44 <startup-0x1f1fb0bc>
 21c:	16050000 	strne	r0, [r5], -r0
 220:	3a0e0300 	bcc	380e28 <startup-0x1fc7f1d8>
 224:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 228:	0013490b 	andseq	r4, r3, fp, lsl #18
 22c:	01130600 	tsteq	r3, r0, lsl #12
 230:	0b3a050b 	bleq	e81664 <startup-0x1f17e99c>
 234:	0b390b3b 	bleq	e42f28 <startup-0x1f1bd0d8>
 238:	00001301 	andeq	r1, r0, r1, lsl #6
 23c:	03000d07 	movweq	r0, #3335	; 0xd07
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 248:	000b3813 	andeq	r3, fp, r3, lsl r8
 24c:	00240800 	eoreq	r0, r4, r0, lsl #16
 250:	0b3e0b0b 	bleq	f82e84 <startup-0x1f07d17c>
 254:	00000803 	andeq	r0, r0, r3, lsl #16
 258:	49010109 	stmdbmi	r1, {r0, r3, r8}
 25c:	00130113 	andseq	r0, r3, r3, lsl r1
 260:	00210a00 	eoreq	r0, r1, r0, lsl #20
 264:	052f1349 	streq	r1, [pc, #-841]!	; ffffff23 <points+0xdfff5e9b>
 268:	0f0b0000 	svceq	0x000b0000
 26c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 270:	0c000013 	stceq	0, cr0, [r0], {19}
 274:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 278:	0b3a0b0b 	bleq	e82eac <startup-0x1f17d154>
 27c:	0b390b3b 	bleq	e42f70 <startup-0x1f1bd090>
 280:	00001301 	andeq	r1, r0, r1, lsl #6
 284:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
 288:	00130119 	andseq	r0, r3, r9, lsl r1
 28c:	00050e00 	andeq	r0, r5, r0, lsl #28
 290:	00001349 	andeq	r1, r0, r9, asr #6
 294:	0300340f 	movweq	r3, #1039	; 0x40f
 298:	3b0b3a0e 	blcc	2cead8 <startup-0x1fd31528>
 29c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2a0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 2a4:	10000018 	andne	r0, r0, r8, lsl r0
 2a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 2ac:	0b3b0b3a 	bleq	ec2f9c <startup-0x1f13d064>
 2b0:	13490b39 	movtne	r0, #39737	; 0x9b39
 2b4:	00001802 	andeq	r1, r0, r2, lsl #16
 2b8:	3f012e11 	svccc	0x00012e11
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	1119270b 	tstne	r9, fp, lsl #14
 2c8:	40061201 	andmi	r1, r6, r1, lsl #4
 2cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d0:	00001301 	andeq	r1, r0, r1, lsl #6
 2d4:	3f012e12 	svccc	0x00012e12
 2d8:	3a0e0319 	bcc	380f44 <startup-0x1fc7f0bc>
 2dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 2e4:	00130119 	andseq	r0, r3, r9, lsl r1
 2e8:	00181300 	andseq	r1, r8, r0, lsl #6
 2ec:	0b140000 	bleq	5002f4 <startup-0x1faffd0c>
 2f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 2f4:	00130106 	andseq	r0, r3, r6, lsl #2
 2f8:	00341500 	eorseq	r1, r4, r0, lsl #10
 2fc:	0b3a0803 	bleq	e82310 <startup-0x1f17dcf0>
 300:	0b390b3b 	bleq	e42ff4 <startup-0x1f1bd00c>
 304:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 308:	0b160000 	bleq	580310 <startup-0x1fa7fcf0>
 30c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 310:	17000006 	strne	r0, [r0, -r6]
 314:	08030034 	stmdaeq	r3, {r2, r4, r5}
 318:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 31c:	13490b39 	movtne	r0, #39737	; 0x9b39
 320:	00001802 	andeq	r1, r0, r2, lsl #16
 324:	3f002e18 	svccc	0x00002e18
 328:	3a0e0319 	bcc	380f94 <startup-0x1fc7f06c>
 32c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 330:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 334:	96184006 	ldrls	r4, [r8], -r6
 338:	00001942 	andeq	r1, r0, r2, asr #18
 33c:	3f012e19 	svccc	0x00012e19
 340:	3a0e0319 	bcc	380fac <startup-0x1fc7f054>
 344:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 348:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 34c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 350:	97184006 	ldrls	r4, [r8, -r6]
 354:	13011942 	movwne	r1, #6466	; 0x1942
 358:	051a0000 	ldreq	r0, [sl, #-0]
 35c:	3a0e0300 	bcc	380f64 <startup-0x1fc7f09c>
 360:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 364:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 368:	1b000018 	blne	3d0 <startup-0x1ffffc30>
 36c:	08030005 	stmdaeq	r3, {r0, r2}
 370:	0b3b0b3a 	bleq	ec3060 <startup-0x1f13cfa0>
 374:	13490b39 	movtne	r0, #39737	; 0x9b39
 378:	00001802 	andeq	r1, r0, r2, lsl #16
 37c:	3f012e1c 	svccc	0x00012e1c
 380:	3a0e0319 	bcc	380fec <startup-0x1fc7f014>
 384:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 388:	1119270b 	tstne	r9, fp, lsl #14
 38c:	40061201 	andmi	r1, r6, r1, lsl #4
 390:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 394:	00001301 	andeq	r1, r0, r1, lsl #6
 398:	3f002e1d 	svccc	0x00002e1d
 39c:	3a0e0319 	bcc	381008 <startup-0x1fc7eff8>
 3a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	1119270b 	tstne	r9, fp, lsl #14
 3a8:	40061201 	andmi	r1, r6, r1, lsl #4
 3ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3b0:	01000000 	mrseq	r0, (UNDEF: 0)
 3b4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 3b8:	0e030b13 	vmoveq.32	d3[0], r0
 3bc:	01110e1b 	tsteq	r1, fp, lsl lr
 3c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 3c4:	13020000 	movwne	r0, #8192	; 0x2000
 3c8:	3a0b0b01 	bcc	2c2fd4 <startup-0x1fd3d02c>
 3cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d0:	0013010b 	andseq	r0, r3, fp, lsl #2
 3d4:	000d0300 	andeq	r0, sp, r0, lsl #6
 3d8:	0b3a0e03 	bleq	e83bec <startup-0x1f17c414>
 3dc:	0b390b3b 	bleq	e430d0 <startup-0x1f1bcf30>
 3e0:	0b381349 	bleq	e0510c <startup-0x1f1faef4>
 3e4:	35040000 	strcc	r0, [r4, #-0]
 3e8:	00134900 	andseq	r4, r3, r0, lsl #18
 3ec:	00240500 	eoreq	r0, r4, r0, lsl #10
 3f0:	0b3e0b0b 	bleq	f83024 <startup-0x1f07cfdc>
 3f4:	00000e03 	andeq	r0, r0, r3, lsl #28
 3f8:	03001606 	movweq	r1, #1542	; 0x606
 3fc:	3b0b3a0e 	blcc	2cec3c <startup-0x1fd313c4>
 400:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 404:	07000013 	smladeq	r0, r3, r0, r0
 408:	0b0b000f 	bleq	2c044c <startup-0x1fd3fbb4>
 40c:	00001349 	andeq	r1, r0, r9, asr #6
 410:	0b002408 	bleq	9438 <startup-0x1fff6bc8>
 414:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 418:	09000008 	stmdbeq	r0, {r3}
 41c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 420:	0b3a0e03 	bleq	e83c34 <startup-0x1f17c3cc>
 424:	0b390b3b 	bleq	e43118 <startup-0x1f1bcee8>
 428:	13491927 	movtne	r1, #39207	; 0x9927
 42c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 430:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 434:	00130119 	andseq	r0, r3, r9, lsl r1
 438:	00340a00 	eorseq	r0, r4, r0, lsl #20
 43c:	0b3a0803 	bleq	e82450 <startup-0x1f17dbb0>
 440:	0b390b3b 	bleq	e43134 <startup-0x1f1bcecc>
 444:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 448:	010b0000 	mrseq	r0, (UNDEF: 11)
 44c:	01134901 	tsteq	r3, r1, lsl #18
 450:	0c000013 	stceq	0, cr0, [r0], {19}
 454:	13490021 	movtne	r0, #36897	; 0x9021
 458:	00000b2f 	andeq	r0, r0, pc, lsr #22
 45c:	3f012e0d 	svccc	0x00012e0d
 460:	3a0e0319 	bcc	3810cc <startup-0x1fc7ef34>
 464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 468:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 46c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 470:	97184006 	ldrls	r4, [r8, -r6]
 474:	13011942 	movwne	r1, #6466	; 0x1942
 478:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 47c:	03193f01 	tsteq	r9, #1, 30
 480:	3b0b3a0e 	blcc	2cecc0 <startup-0x1fd31340>
 484:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 488:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 48c:	97184006 	ldrls	r4, [r8, -r6]
 490:	00001942 	andeq	r1, r0, r2, asr #18
 494:	0300050f 	movweq	r0, #1295	; 0x50f
 498:	3b0b3a08 	blcc	2cecc0 <startup-0x1fd31340>
 49c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4a0:	00180213 	andseq	r0, r8, r3, lsl r2
 4a4:	11010000 	mrsne	r0, (UNDEF: 1)
 4a8:	130e2501 	movwne	r2, #58625	; 0xe501
 4ac:	1b0e030b 	blne	3810e0 <startup-0x1fc7ef20>
 4b0:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 4b4:	00171006 	andseq	r1, r7, r6
 4b8:	01130200 	tsteq	r3, r0, lsl #4
 4bc:	0b3a0b0b 	bleq	e830f0 <startup-0x1f17cf10>
 4c0:	0b390b3b 	bleq	e431b4 <startup-0x1f1bce4c>
 4c4:	00001301 	andeq	r1, r0, r1, lsl #6
 4c8:	03000d03 	movweq	r0, #3331	; 0xd03
 4cc:	3b0b3a0e 	blcc	2ced0c <startup-0x1fd312f4>
 4d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 4d4:	000b3813 	andeq	r3, fp, r3, lsl r8
 4d8:	00350400 	eorseq	r0, r5, r0, lsl #8
 4dc:	00001349 	andeq	r1, r0, r9, asr #6
 4e0:	0b002405 	bleq	94fc <startup-0x1fff6b04>
 4e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 4e8:	0600000e 	streq	r0, [r0], -lr
 4ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 4f0:	0b3b0b3a 	bleq	ec31e0 <startup-0x1f13ce20>
 4f4:	13490b39 	movtne	r0, #39737	; 0x9b39
 4f8:	0f070000 	svceq	0x00070000
 4fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 500:	08000013 	stmdaeq	r0, {r0, r1, r4}
 504:	0b0b0024 	bleq	2c059c <startup-0x1fd3fa64>
 508:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 50c:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
 510:	03193f00 	tsteq	r9, #0, 30
 514:	3b0b3a0e 	blcc	2ced54 <startup-0x1fd312ac>
 518:	110b390b 	tstne	fp, fp, lsl #18
 51c:	40061201 	andmi	r1, r6, r1, lsl #4
 520:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 524:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 528:	03193f00 	tsteq	r9, #0, 30
 52c:	3b0b3a0e 	blcc	2ced6c <startup-0x1fd31294>
 530:	110b390b 	tstne	fp, fp, lsl #18
 534:	40061201 	andmi	r1, r6, r1, lsl #4
 538:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 53c:	Address 0x0000053c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	01110002 	tsteq	r1, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000114 	andcs	r0, r0, r4, lsl r1
  34:	00000310 	andeq	r0, r0, r0, lsl r3
	...
  40:	00000024 	andeq	r0, r0, r4, lsr #32
  44:	04790002 	ldrbteq	r0, [r9], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000424 	andcs	r0, r0, r4, lsr #8
  54:	000006f8 	strdeq	r0, [r0], -r8
  58:	20000000 	andcs	r0, r0, r0
  5c:	0000000c 	andeq	r0, r0, ip
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0aa20002 	beq	fe88007c <points+0xde875ff4>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000b1c 	andcs	r0, r0, ip, lsl fp
  7c:	00000120 	andeq	r0, r0, r0, lsr #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0c770002 	ldcleq	0, cr0, [r7], #-8
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000c3c 	andcs	r0, r0, ip, lsr ip
  9c:	000000a6 	andeq	r0, r0, r6, lsr #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000115 	andeq	r0, r0, r5, lsl r1
   4:	00630003 	rsbeq	r0, r3, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	726e6568 	rsbvc	r6, lr, #104, 10	; 0x1a000000
  28:	6e4f2f79 	mcrvs	15, 2, r2, cr15, cr9, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	532f6576 			; <UNDEFINED> instruction: 0x532f6576
  34:	7669726b 	strbtvc	r7, [r9], -fp, ror #4
  38:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
  3c:	3254562f 	subscc	r5, r4, #49283072	; 0x2f00000
  40:	4f4d2f31 	svcmi	0x004d2f31
  44:	4f4d2f50 	svcmi	0x004d2f50
  48:	4f4d2f50 	svcmi	0x004d2f50
  4c:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
  50:	00656b61 	rsbeq	r6, r5, r1, ror #22
  54:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd5c <points+0xdfff5cd4>
  58:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
  5c:	69635f67 	stmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  60:	69756372 	ldmdbvs	r5!, {r1, r4, r5, r6, r8, r9, sp, lr}^
  64:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
  68:	00000100 	andeq	r0, r0, r0, lsl #2
  6c:	00010500 	andeq	r0, r1, r0, lsl #10
  70:	00100205 	andseq	r0, r0, r5, lsl #4
  74:	05172000 	ldreq	r2, [r7, #-0]
  78:	0c053002 	stceq	0, cr3, [r5], {2}
  7c:	2f020520 	svccs	0x00020520
  80:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  84:	0b052f02 	bleq	14bc94 <startup-0x1feb436c>
  88:	2f020520 	svccs	0x00020520
  8c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  90:	0a052f07 	beq	14bcb4 <startup-0x1feb434c>
  94:	01040200 	mrseq	r0, R12_usr
  98:	00140520 	andseq	r0, r4, r0, lsr #10
  9c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
  a0:	02000705 	andeq	r0, r0, #1310720	; 0x140000
  a4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
  a8:	0c052102 	stfeqs	f2, [r5], {2}
  ac:	2f010520 	svccs	0x00010520
  b0:	4c0505a1 	cfstr32mi	mvfx0, [r5], {161}	; 0xa1
  b4:	05830405 	streq	r0, [r3, #1029]	; 0x405
  b8:	0b053e07 	bleq	14f8dc <startup-0x1feb0724>
  bc:	2e030522 	cfsh32cs	mvfx0, mvfx3, #18
  c0:	02001c05 	andeq	r1, r0, #1280	; 0x500
  c4:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
  c8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
  cc:	03052e03 	movweq	r2, #24067	; 0x5e03
  d0:	01040200 	mrseq	r0, R12_usr
  d4:	3d05053c 	cfstr32cc	mvfx0, [r5, #-240]	; 0xffffff10
  d8:	05390705 	ldreq	r0, [r9, #-1797]!	; 0xfffff8fb
  dc:	23054101 	movwcs	r4, #20737	; 0x5101
  e0:	4b07055a 	blmi	1c1650 <startup-0x1fe3e9b0>
  e4:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
  e8:	07053d05 	streq	r3, [r5, -r5, lsl #26]
  ec:	41010539 	tstmi	r1, r9, lsr r5
  f0:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
  f4:	11055918 	tstne	r5, r8, lsl r9
  f8:	2008053c 	andcs	r0, r8, ip, lsr r5
  fc:	053d1b05 	ldreq	r1, [sp, #-2821]!	; 0xfffff4fb
 100:	25053c21 	strcs	r3, [r5, #-3105]	; 0xfffff3df
 104:	201b053c 	andscs	r0, fp, ip, lsr r5
 108:	054a2905 	strbeq	r2, [sl, #-2309]	; 0xfffff6fb
 10c:	09053c10 	stmdbeq	r5, {r4, sl, fp, ip, sp}
 110:	2f02054b 	svccs	0x0002054b
 114:	01000702 	tsteq	r0, r2, lsl #14
 118:	0001a901 	andeq	sl, r1, r1, lsl #18
 11c:	71000300 	mrsvc	r0, LR_irq
 120:	02000000 	andeq	r0, r0, #0
 124:	0d0efb01 	vstreq	d15, [lr, #-4]
 128:	01010100 	mrseq	r0, (UNDEF: 17)
 12c:	00000001 	andeq	r0, r0, r1
 130:	01000001 	tsteq	r0, r1
 134:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6f9 <points+0xdfff5671>
 138:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 13c:	6e65682f 	cdpvs	8, 6, cr6, cr5, cr15, {1}
 140:	4f2f7972 	svcmi	0x002f7972
 144:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 148:	2f657669 	svccs	0x00657669
 14c:	69726b53 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, r9, fp, sp, lr}^
 150:	726f6276 	rsbvc	r6, pc, #1610612743	; 0x60000007
 154:	54562f64 	ldrbpl	r2, [r6], #-3940	; 0xfffff09c
 158:	4d2f3132 	stfmis	f3, [pc, #-200]!	; 98 <startup-0x1fffff68>
 15c:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 28 <startup-0x1fffffd8>
 160:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 2c <startup-0x1fffffd4>
 164:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 168:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 16c:	73610000 	cmnvc	r1, #0
 170:	5f696963 	svcpl	0x00696963
 174:	70736964 	rsbsvc	r6, r3, r4, ror #18
 178:	2e79616c 	rpwcsez	f6, f1, #4.0
 17c:	00010063 	andeq	r0, r1, r3, rrx
 180:	63656400 	cmnvs	r5, #0, 8
 184:	6172616c 	cmnvs	r2, ip, ror #2
 188:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 18c:	00682e73 	rsbeq	r2, r8, r3, ror lr
 190:	00000001 	andeq	r0, r0, r1
 194:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 198:	00011402 	andeq	r1, r1, r2, lsl #8
 19c:	01090320 	tsteq	r9, r0, lsr #6
 1a0:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
 1a4:	10052004 	andne	r2, r5, r4
 1a8:	6602054b 	strvs	r0, [r2], -fp, asr #10
 1ac:	05201005 	streq	r1, [r0, #-5]!
 1b0:	05694b01 	strbeq	r4, [r9, #-2817]!	; 0xfffff4ff
 1b4:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
 1b8:	4b080520 	blmi	201640 <startup-0x1fdfe9c0>
 1bc:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
 1c0:	10052f02 	andne	r2, r5, r2, lsl #30
 1c4:	67010520 	strvs	r0, [r1, -r0, lsr #10]
 1c8:	68020569 	stmdavs	r2, {r0, r3, r5, r6, r8, sl}
 1cc:	2011053d 	andscs	r0, r1, sp, lsr r5
 1d0:	2f3d0205 	svccs	0x003d0205
 1d4:	693e0105 	ldmdbvs	lr!, {r0, r2, r8}
 1d8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 1dc:	03053f04 	movweq	r3, #24324	; 0x5f04
 1e0:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 1e4:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 1e8:	05772f01 	ldrbeq	r2, [r7, #-3841]!	; 0xfffff0ff
 1ec:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 1f0:	4d590105 	ldfmie	f0, [r9, #-20]	; 0xffffffec
 1f4:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 1f8:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 1fc:	3e02054d 	cfsh32cc	mvfx0, mvfx2, #45
 200:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 204:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 208:	02053d06 	andeq	r3, r5, #384	; 0x180
 20c:	200f055a 	andcs	r0, pc, sl, asr r5	; <UNPREDICTABLE>
 210:	052f0905 	streq	r0, [pc, #-2309]!	; fffff913 <points+0xdfff588b>
 214:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 218:	02053d0f 	andeq	r3, r5, #960	; 0x3c0
 21c:	0b053d67 	bleq	14f7c0 <startup-0x1feb0840>
 220:	590f053d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r8, sl}	; <UNPREDICTABLE>
 224:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
 228:	05852f01 	streq	r2, [r5, #3841]	; 0xf01
 22c:	0a056707 	beq	159e50 <startup-0x1fea61b0>
 230:	01040200 	mrseq	r0, R12_usr
 234:	001e0520 	andseq	r0, lr, r0, lsr #10
 238:	3c010402 	cfstrscc	mvf0, [r1], {2}
 23c:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 240:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 244:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 248:	18055901 	stmdane	r5, {r0, r8, fp, ip, lr}
 24c:	3002054c 	andcc	r0, r2, ip, asr #10
 250:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 254:	053d3e3d 	ldreq	r3, [sp, #-3645]!	; 0xfffff1c3
 258:	053f3d01 	ldreq	r3, [pc, #-3329]!	; fffff55f <points+0xdfff54d7>
 25c:	0a056707 	beq	159e80 <startup-0x1fea6180>
 260:	01040200 	mrseq	r0, R12_usr
 264:	001e0520 	andseq	r0, lr, r0, lsr #10
 268:	3c010402 	cfstrscc	mvf0, [r1], {2}
 26c:	02000705 	andeq	r0, r0, #1310720	; 0x140000
 270:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 274:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 278:	4d3d0105 	ldfmis	f0, [sp, #-20]!	; 0xffffffec
 27c:	05910705 	ldreq	r0, [r1, #1797]	; 0x705
 280:	16056704 	strne	r6, [r5], -r4, lsl #14
 284:	01040200 	mrseq	r0, R12_usr
 288:	5902054a 	stmdbpl	r2, {r1, r3, r6, r8, sl}
 28c:	4f9f0105 	svcmi	0x009f0105
 290:	2f5a0205 	svccs	0x005a0205
 294:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
 298:	16052f07 	strne	r2, [r5], -r7, lsl #30
 29c:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 2a0:	05490905 	strbeq	r0, [r9, #-2309]	; 0xfffff6fb
 2a4:	02052e07 	andeq	r2, r5, #7, 28	; 0x70
 2a8:	4b040531 	blmi	101774 <startup-0x1fefe88c>
 2ac:	052f0705 	streq	r0, [pc, #-1797]!	; fffffbaf <points+0xdfff5b27>
 2b0:	03052116 	movweq	r2, #20758	; 0x5116
 2b4:	4909053c 	stmdbmi	r9, {r2, r3, r4, r5, r8, sl}
 2b8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 2bc:	01053109 	tsteq	r5, r9, lsl #2
 2c0:	00040221 	andeq	r0, r4, r1, lsr #4
 2c4:	03eb0101 	mvneq	r0, #1073741824	; 0x40000000
 2c8:	00030000 	andeq	r0, r3, r0
 2cc:	00000068 	andeq	r0, r0, r8, rrx
 2d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 2d4:	0101000d 	tsteq	r1, sp
 2d8:	00000101 	andeq	r0, r0, r1, lsl #2
 2dc:	00000100 	andeq	r0, r0, r0, lsl #2
 2e0:	2f3a4301 	svccs	0x003a4301
 2e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 2e8:	65682f73 	strbvs	r2, [r8, #-3955]!	; 0xfffff08d
 2ec:	2f79726e 	svccs	0x0079726e
 2f0:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 2f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 2f8:	726b532f 	rsbvc	r5, fp, #-1140850688	; 0xbc000000
 2fc:	6f627669 	svcvs	0x00627669
 300:	562f6472 			; <UNDEFINED> instruction: 0x562f6472
 304:	2f313254 	svccs	0x00313254
 308:	2f504f4d 	svccs	0x00504f4d
 30c:	2f504f4d 	svccs	0x00504f4d
 310:	2f504f4d 	svccs	0x00504f4d
 314:	6b616e73 	blvs	185bce8 <startup-0x1e7a4318>
 318:	67000065 	strvs	r0, [r0, -r5, rrx]
 31c:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
 320:	00010063 	andeq	r0, r1, r3, rrx
 324:	63656400 	cmnvs	r5, #0, 8
 328:	6172616c 	cmnvs	r2, ip, ror #2
 32c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 330:	00682e73 	rsbeq	r2, r8, r3, ror lr
 334:	00000001 	andeq	r0, r0, r1
 338:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 33c:	00000002 	andeq	r0, r0, r2
 340:	21131920 	tstcs	r3, r0, lsr #18
 344:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
 348:	01010003 	tsteq	r1, r3
 34c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
 350:	00042402 	andeq	r2, r4, r2, lsl #8
 354:	01120320 	tsteq	r2, r0, lsr #6
 358:	13210205 			; <UNDEFINED> instruction: 0x13210205
 35c:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 360:	13210205 			; <UNDEFINED> instruction: 0x13210205
 364:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 368:	13210205 			; <UNDEFINED> instruction: 0x13210205
 36c:	24210105 	strtcs	r0, [r1], #-261	; 0xfffffefb
 370:	13210205 			; <UNDEFINED> instruction: 0x13210205
 374:	03210105 			; <UNDEFINED> instruction: 0x03210105
 378:	1605200a 	strne	r2, [r5], -sl
 37c:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
 380:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff983 <points+0xdfff58fb>
 384:	19052e02 	stmdbne	r5, {r1, r9, sl, fp, sp}
 388:	03040200 	movweq	r0, #16896	; 0x4200
 38c:	00280522 	eoreq	r0, r8, r2, lsr #10
 390:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 394:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 398:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 39c:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 3a0:	11052e03 	tstne	r5, r3, lsl #28
 3a4:	03040200 	movweq	r0, #16896	; 0x4200
 3a8:	0019053c 	andseq	r0, r9, ip, lsr r5
 3ac:	4b030402 	blmi	c13bc <startup-0x1ff3ec44>
 3b0:	02002805 	andeq	r2, r0, #327680	; 0x50000
 3b4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3b8:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 3bc:	2b056603 	blcs	159bd0 <startup-0x1fea6430>
 3c0:	03040200 	movweq	r0, #16896	; 0x4200
 3c4:	0011052e 	andseq	r0, r1, lr, lsr #10
 3c8:	3c030402 	cfstrscc	mvf0, [r3], {2}
 3cc:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 3d0:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 3d4:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 3d8:	02057e03 	andeq	r7, r5, #3, 28	; 0x30
 3dc:	01040200 	mrseq	r0, R12_usr
 3e0:	5001053c 	andpl	r0, r1, ip, lsr r5
 3e4:	4b16055b 	blmi	581958 <startup-0x1fa7e6a8>
 3e8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 3ec:	02052f0a 	andeq	r2, r5, #10, 30	; 0x28
 3f0:	0019052e 	andseq	r0, r9, lr, lsr #10
 3f4:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
 3f8:	02002805 	andeq	r2, r0, #327680	; 0x50000
 3fc:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 400:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 404:	2b056603 	blcs	159c18 <startup-0x1fea63e8>
 408:	03040200 	movweq	r0, #16896	; 0x4200
 40c:	0011052e 	andseq	r0, r1, lr, lsr #10
 410:	3c030402 	cfstrscc	mvf0, [r3], {2}
 414:	02001905 	andeq	r1, r0, #81920	; 0x14000
 418:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 41c:	04020028 	streq	r0, [r2], #-40	; 0xffffffd8
 420:	32052e03 	andcc	r2, r5, #3, 28	; 0x30
 424:	03040200 	movweq	r0, #16896	; 0x4200
 428:	002b0566 	eoreq	r0, fp, r6, ror #10
 42c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 430:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 434:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 438:	04020003 	streq	r0, [r2], #-3
 43c:	21054b03 	tstcs	r5, r3, lsl #22
 440:	03040200 	movweq	r0, #16896	; 0x4200
 444:	0002057e 	andeq	r0, r2, lr, ror r5
 448:	3c010402 	cfstrscc	mvf0, [r1], {2}
 44c:	5b500105 	blpl	1400868 <startup-0x1ebff798>
 450:	3d670e05 	stclcc	14, cr0, [r7, #-20]!	; 0xffffffec
 454:	4e3d0105 	rsfmie	f0, f5, f5
 458:	054c1005 	strbeq	r1, [ip, #-5]
 45c:	10052e19 	andne	r2, r5, r9, lsl lr
 460:	19053d2e 	stmdbne	r5, {r1, r2, r3, r5, r8, sl, fp, ip, sp}
 464:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
 468:	4e3d0105 	rsfmie	f0, f5, f5
 46c:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
 470:	13055811 	movwne	r5, #22545	; 0x5811
 474:	5811052f 	ldmdapl	r1, {r0, r1, r2, r3, r5, r8, sl}
 478:	052f0105 	streq	r0, [pc, #-261]!	; 37b <startup-0x1ffffc85>
 47c:	00c30323 	sbceq	r0, r3, r3, lsr #6
 480:	6709054a 	strvs	r0, [r9, -sl, asr #10]
 484:	ac080903 			; <UNDEFINED> instruction: 0xac080903
 488:	05830105 	streq	r0, [r3, #261]	; 0x105
 48c:	0b05d82c 	bleq	176544 <startup-0x1fe89abc>
 490:	2e02055a 	cfrshl32cs	mvfx2, mvfx10, r0
 494:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 498:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 49c:	0402000f 	streq	r0, [r2], #-15
 4a0:	03056603 	movweq	r6, #22019	; 0x5603
 4a4:	03040200 	movweq	r0, #16896	; 0x4200
 4a8:	001f052e 	andseq	r0, pc, lr, lsr #10
 4ac:	3b030402 	blcc	c14bc <startup-0x1ff3eb44>
 4b0:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 4b4:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4b8:	27054d01 	strcs	r4, [r5, -r1, lsl #26]
 4bc:	ca08055a 	bgt	201a2c <startup-0x1fdfe5d4>
 4c0:	05581105 	ldrbeq	r1, [r8, #-261]	; 0xfffffefb
 4c4:	1c059005 	stcne	0, cr9, [r5], {5}
 4c8:	01040200 	mrseq	r0, R12_usr
 4cc:	0025052e 	eoreq	r0, r5, lr, lsr #10
 4d0:	4a010402 	bmi	414e0 <startup-0x1ffbeb20>
 4d4:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 4d8:	05900104 	ldreq	r0, [r0, #260]	; 0x104
 4dc:	0a052f0d 	beq	14c118 <startup-0x1feb3ee8>
 4e0:	4b0d0590 	blmi	341b28 <startup-0x1fcbe4d8>
 4e4:	05900a05 	ldreq	r0, [r0, #2565]	; 0xa05
 4e8:	05894c01 	streq	r4, [r9, #3073]	; 0xc01
 4ec:	1b055a0d 	blne	156d28 <startup-0x1fea92d8>
 4f0:	2e23052e 	cfsh64cs	mvdx0, mvdx3, #30
 4f4:	02002805 	andeq	r2, r0, #327680	; 0x50000
 4f8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4fc:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
 500:	23052e01 	movwcs	r2, #24065	; 0x5e01
 504:	01040200 	mrseq	r0, R12_usr
 508:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 50c:	002e0603 	eoreq	r0, lr, r3, lsl #12
 510:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
 514:	06040200 	streq	r0, [r4], -r0, lsl #4
 518:	00010520 	andeq	r0, r1, r0, lsr #10
 51c:	06060402 	streq	r0, [r6], -r2, lsl #8
 520:	10054d21 	andne	r4, r5, r1, lsr #26
 524:	2e050568 	cfsh32cs	mvfx0, mvfx5, #56
 528:	02000d05 	andeq	r0, r0, #320	; 0x140
 52c:	052f0104 	streq	r0, [pc, #-260]!	; 430 <startup-0x1ffffbd0>
 530:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 534:	0d052d01 	stceq	13, cr2, [r5, #-4]
 538:	2d230530 	cfstr32cs	mvfx0, [r3, #-192]!	; 0xffffff40
 53c:	05300d05 	ldreq	r0, [r0, #-3333]!	; 0xfffff2fb
 540:	0a052d18 	beq	14b9a8 <startup-0x1feb4658>
 544:	310b0530 	tstcc	fp, r0, lsr r5
 548:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 54c:	14052111 	strne	r2, [r5], #-273	; 0xfffffeef
 550:	20270582 	eorcs	r0, r7, r2, lsl #11
 554:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 558:	0402000e 	streq	r0, [r2], #-14
 55c:	11052f01 	tstne	r5, r1, lsl #30
 560:	01040200 	mrseq	r0, R12_usr
 564:	00240582 	eoreq	r0, r4, r2, lsl #11
 568:	20010402 	andcs	r0, r1, r2, lsl #8
 56c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
 570:	052d0104 	streq	r0, [sp, #-260]!	; 0xfffffefc
 574:	1b05300b 	blne	14c5a8 <startup-0x1feb3a58>
 578:	02040200 	andeq	r0, r4, #0, 4
 57c:	0002052b 	andeq	r0, r2, fp, lsr #10
 580:	3c010402 	cfstrscc	mvf0, [r1], {2}
 584:	05500905 	ldrbeq	r0, [r0, #-2309]	; 0xfffff6fb
 588:	12052101 	andne	r2, r5, #1073741824	; 0x40000000
 58c:	2f02054f 	svccs	0x0002054f
 590:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
 594:	04020009 	streq	r0, [r2], #-9
 598:	08052001 	stmdaeq	r5, {r0, sp}
 59c:	01040200 	mrseq	r0, R12_usr
 5a0:	2f01053c 	svccs	0x0001053c
 5a4:	4c020593 	cfstr32mi	mvfx0, [r2], {147}	; 0x93
 5a8:	05312f2f 	ldreq	r2, [r1, #-3887]!	; 0xfffff0d1
 5ac:	054b2f0a 	strbeq	r2, [fp, #-3850]	; 0xfffff0f6
 5b0:	02054c09 	andeq	r4, r5, #2304	; 0x900
 5b4:	4c08053c 	cfstr32mi	mvfx0, [r8], {60}	; 0x3c
 5b8:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
 5bc:	0305300a 	movweq	r3, #20490	; 0x500a
 5c0:	05674b4a 	strbeq	r4, [r7, #-2890]!	; 0xfffff4b6
 5c4:	05059206 	streq	r9, [r5, #-518]	; 0xfffffdfa
 5c8:	23040590 	movwcs	r0, #17808	; 0x4590
 5cc:	5a0d0568 	bpl	341b74 <startup-0x1fcbe48c>
 5d0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 5d4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
 5d8:	0f052103 	svceq	0x00052103
 5dc:	03040200 	movweq	r0, #16896	; 0x4200
 5e0:	001a0574 	andseq	r0, sl, r4, ror r5
 5e4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 5e8:	02000b05 	andeq	r0, r0, #5120	; 0x1400
 5ec:	68080304 	stmdavs	r8, {r2, r8, r9}
 5f0:	02002905 	andeq	r2, r0, #81920	; 0x14000
 5f4:	05550304 	ldrbeq	r0, [r5, #-772]	; 0xfffffcfc
 5f8:	04020004 	streq	r0, [r2], #-4
 5fc:	14056601 	strne	r6, [r5], #-1537	; 0xfffff9ff
 600:	2e0d056c 	cfsh32cs	mvfx0, mvfx13, #60
 604:	4a04053e 	bmi	101b04 <startup-0x1fefe4fc>
 608:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 60c:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 610:	04020005 	streq	r0, [r2], #-5
 614:	24054a03 	strcs	r4, [r5], #-2563	; 0xfffff5fd
 618:	03040200 	movweq	r0, #16896	; 0x4200
 61c:	05132b02 	ldreq	r2, [r3, #-2818]	; 0xfffff4fe
 620:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 624:	17054a03 	strne	r4, [r5, -r3, lsl #20]
 628:	03040200 	movweq	r0, #16896	; 0x4200
 62c:	002405ac 	eoreq	r0, r4, ip, lsr #11
 630:	bb030402 	bllt	c1640 <startup-0x1ff3e9c0>
 634:	02002705 	andeq	r2, r0, #1310720	; 0x140000
 638:	053c0304 	ldreq	r0, [ip, #-772]!	; 0xfffffcfc
 63c:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
 640:	1f059e03 	svcne	0x00059e03
 644:	03040200 	movweq	r0, #16896	; 0x4200
 648:	001a05b7 			; <UNDEFINED> instruction: 0x001a05b7
 64c:	58010402 	stmdapl	r1, {r1, sl}
 650:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 654:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 658:	04020004 	streq	r0, [r2], #-4
 65c:	15053c01 	strne	r3, [r5, #-3073]	; 0xfffff3ff
 660:	3c2a0534 	cfstr32cc	mvfx0, [sl], #-208	; 0xffffff30
 664:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
 668:	2a05ad15 	bcs	16bac4 <startup-0x1fe9453c>
 66c:	3c1e053c 	cfldr32cc	mvfx0, [lr], {60}	; 0x3c
 670:	05a20b05 	streq	r0, [r2, #2821]!	; 0xb05
 674:	17053c03 	strne	r3, [r5, -r3, lsl #24]
 678:	4a0c05ae 	bmi	301d38 <startup-0x1fcfe2c8>
 67c:	05580405 	ldrbeq	r0, [r8, #-1029]	; 0xfffffbfb
 680:	0c052217 	sfmeq	f2, 4, [r5], {23}
 684:	6604054a 	strvs	r0, [r4], -sl, asr #10
 688:	05221705 	streq	r1, [r2, #-1797]!	; 0xfffff8fb
 68c:	04054a0c 	streq	r4, [r5], #-2572	; 0xfffff5f4
 690:	22170566 	andscs	r0, r7, #427819008	; 0x19800000
 694:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
 698:	03055804 	movweq	r5, #22532	; 0x5804
 69c:	0a056824 	beq	15a734 <startup-0x1fea58cc>
 6a0:	053c5003 	ldreq	r5, [ip, #-3]!
 6a4:	0205ba08 	andeq	fp, r5, #8, 20	; 0x8000
 6a8:	3d2e3303 	stccc	3, cr3, [lr, #-12]!
 6ac:	6801052f 	stmdavs	r1, {r0, r1, r2, r3, r5, r8, sl}
 6b0:	01002402 	tsteq	r0, r2, lsl #8
 6b4:	00012f01 	andeq	r2, r1, r1, lsl #30
 6b8:	6a000300 	bvs	12c0 <startup-0x1fffed40>
 6bc:	02000000 	andeq	r0, r0, #0
 6c0:	0d0efb01 	vstreq	d15, [lr, #-4]
 6c4:	01010100 	mrseq	r0, (UNDEF: 17)
 6c8:	00000001 	andeq	r0, r0, r1
 6cc:	01000001 	tsteq	r0, r1
 6d0:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffc95 <points+0xdfff5c0d>
 6d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 6d8:	6e65682f 	cdpvs	8, 6, cr6, cr5, cr15, {1}
 6dc:	4f2f7972 	svcmi	0x002f7972
 6e0:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
 6e4:	2f657669 	svccs	0x00657669
 6e8:	69726b53 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, r9, fp, sp, lr}^
 6ec:	726f6276 	rsbvc	r6, pc, #1610612743	; 0x60000007
 6f0:	54562f64 	ldrbpl	r2, [r6], #-3940	; 0xfffff09c
 6f4:	4d2f3132 	stfmis	f3, [pc, #-200]!	; 634 <startup-0x1ffff9cc>
 6f8:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 5c4 <startup-0x1ffffa3c>
 6fc:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; 5c8 <startup-0x1ffffa38>
 700:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
 704:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 708:	656b0000 	strbvs	r0, [fp, #-0]!
 70c:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 710:	0100632e 	tsteq	r0, lr, lsr #6
 714:	65640000 	strbvs	r0, [r4, #-0]!
 718:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
 71c:	6f697461 	svcvs	0x00697461
 720:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
 724:	00000100 	andeq	r0, r0, r0, lsl #2
 728:	00010500 	andeq	r0, r1, r0, lsl #10
 72c:	0b1c0205 	bleq	700f48 <startup-0x1f8ff0b8>
 730:	05182000 	ldreq	r2, [r8, #-0]
 734:	0b054b02 	bleq	153344 <startup-0x1feaccbc>
 738:	19052f08 	stmdbne	r5, {r3, r8, r9, sl, fp, sp}
 73c:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 740:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 744:	03052019 	movweq	r2, #20505	; 0x5019
 748:	210b052e 	tstcs	fp, lr, lsr #10
 74c:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
 750:	0b052e03 	bleq	14bf64 <startup-0x1feb409c>
 754:	20190521 	andscs	r0, r9, r1, lsr #10
 758:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 75c:	1a05220c 	bne	148f94 <startup-0x1feb706c>
 760:	30010520 	andcc	r0, r1, r0, lsr #10
 764:	3e060585 	cfsh32cc	mvfx0, mvfx6, #-59
 768:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 76c:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 770:	0013054a 	andseq	r0, r3, sl, asr #10
 774:	20010402 	andcs	r0, r1, r2, lsl #8
 778:	052f0705 	streq	r0, [pc, #-1797]!	; 7b <startup-0x1fffff85>
 77c:	13054a04 	movwne	r4, #23044	; 0x5a04
 780:	01040200 	mrseq	r0, R12_usr
 784:	2f070520 	svccs	0x00070520
 788:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 78c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 790:	07052001 	streq	r2, [r5, -r1]
 794:	4a04052f 	bmi	101c58 <startup-0x1fefe3a8>
 798:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 79c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 7a0:	01052f09 	tsteq	r5, r9, lsl #30
 7a4:	10056c21 	andne	r6, r5, r1, lsr #24
 7a8:	690a053d 	stmdbvs	sl, {r0, r2, r3, r4, r5, r8, sl}
 7ac:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 7b0:	0a052103 	beq	148bc4 <startup-0x1feb743c>
 7b4:	4a05054b 	bmi	141ce8 <startup-0x1febe318>
 7b8:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 7bc:	10053d15 	andne	r3, r5, r5, lsl sp
 7c0:	201d052e 	andscs	r0, sp, lr, lsr #10
 7c4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 7c8:	1c05200e 	stcne	0, cr2, [r5], {14}
 7cc:	02040200 	andeq	r0, r4, #0, 4
 7d0:	00020538 	andeq	r0, r2, r8, lsr r5
 7d4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 7d8:	3d080543 	cfstr32cc	mvfx0, [r8, #-268]	; 0xfffffef4
 7dc:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 7e0:	02210104 	eoreq	r0, r1, #4, 2
 7e4:	01010007 	tsteq	r1, r7
 7e8:	000000c3 	andeq	r0, r0, r3, asr #1
 7ec:	00680003 	rsbeq	r0, r8, r3
 7f0:	01020000 	mrseq	r0, (UNDEF: 2)
 7f4:	000d0efb 	strdeq	r0, [sp], -fp
 7f8:	01010101 	tsteq	r1, r1, lsl #2
 7fc:	01000000 	mrseq	r0, (UNDEF: 0)
 800:	43010000 	movwmi	r0, #4096	; 0x1000
 804:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 808:	2f737265 	svccs	0x00737265
 80c:	726e6568 	rsbvc	r6, lr, #104, 10	; 0x1a000000
 810:	6e4f2f79 	mcrvs	15, 2, r2, cr15, cr9, {3}
 814:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 818:	532f6576 			; <UNDEFINED> instruction: 0x532f6576
 81c:	7669726b 	strbtvc	r7, [r9], -fp, ror #4
 820:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 824:	3254562f 	subscc	r5, r4, #49283072	; 0x2f00000
 828:	4f4d2f31 	svcmi	0x004d2f31
 82c:	4f4d2f50 	svcmi	0x004d2f50
 830:	4f4d2f50 	svcmi	0x004d2f50
 834:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 838:	00656b61 	rsbeq	r6, r5, r1, ror #22
 83c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 840:	00632e74 	rsbeq	r2, r3, r4, ror lr
 844:	64000001 	strvs	r0, [r0], #-1
 848:	616c6365 	cmnvs	ip, r5, ror #6
 84c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 850:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
 854:	00010068 	andeq	r0, r1, r8, rrx
 858:	02050000 	andeq	r0, r5, #0
 85c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
 860:	1720000c 	strne	r0, [r0, -ip]!
 864:	200f052f 	andcs	r0, pc, pc, lsr #10
 868:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 86c:	02052010 	andeq	r2, r5, #16
 870:	200f052f 	andcs	r0, pc, pc, lsr #10
 874:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
 878:	01052011 	tsteq	r5, r1, lsl r0
 87c:	02055b3d 	andeq	r5, r5, #62464	; 0xf400
 880:	200f052f 	andcs	r0, pc, pc, lsr #10
 884:	052f0205 	streq	r0, [pc, #-517]!	; 687 <startup-0x1ffff979>
 888:	0205200f 	andeq	r2, r5, #15
 88c:	2010052f 	andscs	r0, r0, pc, lsr #10
 890:	932f0105 			; <UNDEFINED> instruction: 0x932f0105
 894:	052f0c05 	streq	r0, [pc, #-3077]!	; fffffc97 <points+0xdfff5c0f>
 898:	0c058302 	stceq	3, cr8, [r5], {2}
 89c:	01053d20 	tsteq	r5, r0, lsr #26
 8a0:	02058584 	andeq	r8, r5, #132, 10	; 0x21000000
 8a4:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff97d <points+0xdfff58f5>
 8a8:	03022f01 	movweq	r2, #12033	; 0x2f01
 8ac:	Address 0x000008ac is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
   4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
   8:	6e65685c 	mcrvs	8, 3, r6, cr5, cr12, {2}
   c:	4f5c7972 	svcmi	0x005c7972
  10:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
  14:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
  18:	69726b53 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, r9, fp, sp, lr}^
  1c:	726f6276 	rsbvc	r6, pc, #1610612743	; 0x60000007
  20:	54565c64 	ldrbpl	r5, [r6], #-3172	; 0xfffff39c
  24:	4d5c3132 	ldfmie	f3, [ip, #-200]	; 0xffffff38
  28:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
  2c:	4d5c504f 	ldclmi	0, cr5, [ip, #-316]	; 0xfffffec4
  30:	735c504f 	cmpvc	ip, #79	; 0x4f
  34:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  38:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
  3c:	006d6f64 	rsbeq	r6, sp, r4, ror #30
  40:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff605 <points+0xdfff557d>
  44:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  48:	6e65682f 	cdpvs	8, 6, cr6, cr5, cr15, {1}
  4c:	4f2f7972 	svcmi	0x002f7972
  50:	7244656e 	subvc	r6, r4, #461373440	; 0x1b800000
  54:	2f657669 	svccs	0x00657669
  58:	69726b53 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, r9, fp, sp, lr}^
  5c:	726f6276 	rsbvc	r6, pc, #1610612743	; 0x60000007
  60:	54562f64 	ldrbpl	r2, [r6], #-3940	; 0xfffff09c
  64:	4d2f3132 	stfmis	f3, [pc, #-200]!	; ffffffa4 <points+0xdfff5f1c>
  68:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff34 <points+0xdfff5eac>
  6c:	4d2f504f 	stcmi	0, cr5, [pc, #-316]!	; ffffff38 <points+0xdfff5eb0>
  70:	732f504f 			; <UNDEFINED> instruction: 0x732f504f
  74:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
  78:	756f632f 	strbvc	r6, [pc, #-815]!	; fffffd51 <points+0xdfff5cc9>
  7c:	6e69746e 	cdpvs	4, 6, cr7, cr9, cr14, {3}
  80:	69635f67 	stmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  84:	69756372 	ldmdbvs	r5!, {r1, r4, r5, r6, r8, r9, sp, lr}^
  88:	632e7374 			; <UNDEFINED> instruction: 0x632e7374
  8c:	736e7500 	cmnvc	lr, #0, 10
  90:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  94:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  98:	73007261 	movwvc	r7, #609	; 0x261
  9c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  a0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  a8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  ac:	61720074 	cmnvs	r2, r4, ror r0
  b0:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; ffffff00 <points+0xdfff5e78>
  b4:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
  b8:	00726562 	rsbseq	r6, r2, r2, ror #10
  bc:	616c6564 	cmnvs	ip, r4, ror #10
  c0:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  c4:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  c8:	20554e47 	subscs	r4, r5, r7, asr #28
  cc:	20393943 	eorscs	r3, r9, r3, asr #18
  d0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
  d4:	30322031 	eorscc	r2, r2, r1, lsr r0
  d8:	30313931 	eorscc	r3, r1, r1, lsr r9
  dc:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
  e0:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  e4:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  e8:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  ec:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
  f0:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
  f4:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  f8:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  fc:	73697665 	cmnvc	r9, #105906176	; 0x6500000
 100:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 104:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
 108:	205d3939 	subscs	r3, sp, r9, lsr r9
 10c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
 110:	20626d75 	rsbcs	r6, r2, r5, ror sp
 114:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 118:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 11c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 120:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 124:	616d2d20 	cmnvs	sp, r0, lsr #26
 128:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 12c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 130:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 134:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 138:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 13c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 140:	00393963 	eorseq	r3, r9, r3, ror #18
 144:	616c6564 	cmnvs	ip, r4, ror #10
 148:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 14c:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 150:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 154:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 158:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 15c:	5f79616c 	svcpl	0x0079616c
 160:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 164:	7361006f 	cmnvc	r1, #111	; 0x6f
 168:	5f696963 	svcpl	0x00696963
 16c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 170:	6f635f65 	svcvs	0x00635f65
 174:	6f72746e 	svcvs	0x0072746e
 178:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 17c:	6c6f6300 	stclvs	3, cr6, [pc], #-0	; 184 <startup-0x1ffffe7c>
 180:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 184:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 188:	73615f65 	cmnvc	r1, #404	; 0x194
 18c:	00696963 	rsbeq	r6, r9, r3, ror #18
 190:	72727362 	rsbsvc	r7, r2, #-2013265919	; 0x88000001
 194:	63736100 	cmnvs	r3, #0, 2
 198:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 19c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 1a0:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 1a4:	6f007265 	svcvs	0x00007265
 1a8:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 1ac:	61006867 	tstvs	r0, r7, ror #16
 1b0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1b4:	6165725f 	cmnvs	r5, pc, asr r2
 1b8:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 1bc:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 1c0:	6e696c00 	cdpvs	12, 6, cr6, cr9, cr0, {0}
 1c4:	50003165 	andpl	r3, r0, r5, ror #2
 1c8:	4f495047 	svcmi	0x00495047
 1cc:	72666100 	rsbvc	r6, r6, #0, 2
 1d0:	66610068 	strbtvs	r0, [r1], -r8, rrx
 1d4:	6c006c72 	stcvs	12, cr6, [r0], {114}	; 0x72
 1d8:	32656e69 	rsbcc	r6, r5, #1680	; 0x690
 1dc:	63736100 	cmnvs	r3, #0, 2
 1e0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 1e4:	5f646165 	svcpl	0x00646165
 1e8:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 1ec:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 1f0:	61007265 	tstvs	r0, r5, ror #4
 1f4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1f8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1fc:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 200:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 204:	73610074 	cmnvc	r1, #116	; 0x74
 208:	5f696963 	svcpl	0x00696963
 20c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 210:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 214:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
 218:	00726470 	rsbseq	r6, r2, r0, ror r4
 21c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 220:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 224:	65520030 	ldrbvs	r0, [r2, #-48]	; 0xffffffd0
 228:	76726573 			; <UNDEFINED> instruction: 0x76726573
 22c:	00316465 	eorseq	r6, r1, r5, ror #8
 230:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 234:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 238:	65520032 	ldrbvs	r0, [r2, #-50]	; 0xffffffce
 23c:	76726573 			; <UNDEFINED> instruction: 0x76726573
 240:	00336465 	eorseq	r6, r3, r5, ror #8
 244:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 248:	6100776f 	tstvs	r0, pc, ror #14
 24c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 250:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 254:	645f6574 	ldrbvs	r6, [pc], #-1396	; 25c <startup-0x1ffffda4>
 258:	00617461 	rsbeq	r7, r1, r1, ror #8
 25c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 260:	6f635f69 	svcvs	0x00635f69
 264:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 268:	64690064 	strbtvs	r0, [r9], #-100	; 0xffffff9c
 26c:	67694872 			; <UNDEFINED> instruction: 0x67694872
 270:	736f0068 	cmnvc	pc, #104	; 0x68
 274:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 278:	73610072 	cmnvc	r1, #114	; 0x72
 27c:	5f696963 	svcpl	0x00696963
 280:	78746f67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
 284:	64690079 	strbtvs	r0, [r9], #-121	; 0xffffff87
 288:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 28c:	63736100 	cmnvs	r3, #0, 2
 290:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 294:	5f6c7274 	svcpl	0x006c7274
 298:	5f746962 	svcpl	0x00746962
 29c:	61656c63 	cmnvs	r5, r3, ror #24
 2a0:	73610072 	cmnvc	r1, #114	; 0x72
 2a4:	5f696963 	svcpl	0x00696963
 2a8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2ac:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2b0:	3a430061 	bcc	10c043c <startup-0x1ef3fbc4>
 2b4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 2b8:	682f7372 	stmdavs	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 2bc:	79726e65 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 2c0:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 2c4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 2c8:	6b532f65 	blvs	14cc064 <startup-0x1eb33f9c>
 2cc:	62766972 	rsbsvs	r6, r6, #1867776	; 0x1c8000
 2d0:	2f64726f 	svccs	0x0064726f
 2d4:	31325456 	teqcc	r2, r6, asr r4
 2d8:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2dc:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2e0:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2e4:	616e732f 	cmnvs	lr, pc, lsr #6
 2e8:	612f656b 			; <UNDEFINED> instruction: 0x612f656b
 2ec:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2f0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 2f4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 2f8:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 2fc:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 300:	6b636c00 	blvs	18db308 <startup-0x1e724cf8>
 304:	73610072 	cmnvc	r1, #114	; 0x72
 308:	5f696963 	svcpl	0x00696963
 30c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 310:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 314:	50007261 	andpl	r7, r0, r1, ror #4
 318:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; 204 <startup-0x1ffffdfc>
 31c:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
 320:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 324:	70615f65 	rsbvc	r5, r1, r5, ror #30
 328:	00656c70 	rsbeq	r6, r5, r0, ror ip
 32c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 330:	6a626f5f 	bvs	189c0b4 <startup-0x1e763f4c>
 334:	00746365 	rsbseq	r6, r4, r5, ror #6
 338:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 33c:	72696400 	rsbvc	r6, r9, #0, 8
 340:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 344:	6f007972 	svcvs	0x00007972
 348:	63656a62 	cmnvs	r5, #401408	; 0x62000
 34c:	6f635f74 	svcvs	0x00635f74
 350:	64696c6c 	strbtvs	r6, [r9], #-3180	; 0xfffff394
 354:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
 358:	5f65766f 	svcpl	0x0065766f
 35c:	6b616e73 	blvs	185bd30 <startup-0x1e7a42d0>
 360:	4f500065 	svcmi	0x00500065
 364:	00544e49 	subseq	r4, r4, r9, asr #28
 368:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 36c:	73004f65 	movwvc	r4, #3941	; 0xf65
 370:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 374:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 378:	736f7000 	cmnvc	pc, #0
 37c:	6f700078 	svcvs	0x00700078
 380:	6d007973 	vstrvs.16	s14, [r0, #-230]	; 0xffffff1a	; <UNPREDICTABLE>
 384:	5f65766f 	svcpl	0x0065766f
 388:	6f5f316f 	svcvs	0x005f316f
 38c:	756e0032 	strbvc	r0, [lr, #-50]!	; 0xffffffce
 390:	7869706d 	stmdavc	r9!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 394:	00736c65 	rsbseq	r6, r3, r5, ror #24
 398:	61657263 	cmnvs	r5, r3, ror #4
 39c:	745f6574 	ldrbvc	r6, [pc], #-1396	; 3a4 <startup-0x1ffffc5c>
 3a0:	006c6961 	rsbeq	r6, ip, r1, ror #18
 3a4:	6e69616d 	powvsez	f6, f1, #5.0
 3a8:	6f6d6100 	svcvs	0x006d6100
 3ac:	00746e75 	rsbseq	r6, r4, r5, ror lr
 3b0:	70617267 	rsbvc	r7, r1, r7, ror #4
 3b4:	5f636968 	svcpl	0x00636968
 3b8:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 3bc:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xfffff094
 3c0:	61740074 	cmnvs	r4, r4, ror r0
 3c4:	675f6c69 	ldrbvs	r6, [pc, -r9, ror #24]
 3c8:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 3cc:	00797274 	rsbseq	r7, r9, r4, ror r2
 3d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3d4:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 3d8:	7a697300 	bvc	1a5cfe0 <startup-0x1e5a3020>
 3dc:	73007865 	movwvc	r7, #2149	; 0x865
 3e0:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 3e4:	61747300 	cmnvs	r4, r0, lsl #6
 3e8:	70757472 	rsbsvc	r7, r5, r2, ror r4
 3ec:	61726400 	cmnvs	r2, r0, lsl #8
 3f0:	3a430077 	bcc	10c05d4 <startup-0x1ef3fa2c>
 3f4:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 3f8:	682f7372 	stmdavs	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
 3fc:	79726e65 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 400:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
 404:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 408:	6b532f65 	blvs	14cc1a4 <startup-0x1eb33e5c>
 40c:	62766972 	rsbsvs	r6, r6, #1867776	; 0x1c8000
 410:	2f64726f 	svccs	0x0064726f
 414:	31325456 	teqcc	r2, r6, asr r4
 418:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 41c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 420:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 424:	616e732f 	cmnvs	lr, pc, lsr #6
 428:	672f656b 	strvs	r6, [pc, -fp, ror #10]!
 42c:	2e656d61 	cdpcs	13, 6, cr6, cr5, cr1, {3}
 430:	61670063 	cmnvs	r7, r3, rrx
 434:	6f5f656d 	svcvs	0x005f656d
 438:	00726576 	rsbseq	r6, r2, r6, ror r5
 43c:	70617267 	rsbvc	r7, r1, r7, ror #4
 440:	5f636968 	svcpl	0x00636968
 444:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 448:	7a696c61 	bvc	1a5b5d4 <startup-0x1e5a4a2c>
 44c:	72640065 	rsbvc	r0, r4, #101	; 0x65
 450:	6f5f7761 	svcvs	0x005f7761
 454:	72616a62 	rsbvc	r6, r1, #401408	; 0x62000
 458:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
 45c:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 460:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 464:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 468:	73006465 	movwvc	r6, #1125	; 0x465
 46c:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 470:	6961745f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
 474:	7267006c 	rsbvc	r0, r7, #108	; 0x6c
 478:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 47c:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 480:	5f726165 	svcpl	0x00726165
 484:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 488:	61006e65 	tstvs	r0, r5, ror #28
 48c:	656c7070 	strbvs	r7, [ip, #-112]!	; 0xffffff90
 490:	6f65675f 	svcvs	0x0065675f
 494:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 498:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 49c:	5f726165 	svcpl	0x00726165
 4a0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4a4:	73007463 	movwvc	r7, #1123	; 0x463
 4a8:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 4ac:	6f65675f 	svcvs	0x0065675f
 4b0:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 4b4:	4f740079 	svcmi	0x00740079
 4b8:	73006a62 	movwvc	r6, #2658	; 0xa62
 4bc:	656b616e 	strbvs	r6, [fp, #-366]!	; 0xfffffe92
 4c0:	756e004f 	strbvc	r0, [lr, #-79]!	; 0xffffffb1
 4c4:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 4c8:	0073746e 	rsbseq	r7, r3, lr, ror #8
 4cc:	70617267 	rsbvc	r7, r1, r7, ror #4
 4d0:	5f636968 	svcpl	0x00636968
 4d4:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 4d8:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 4dc:	00726165 	rsbseq	r6, r2, r5, ror #2
 4e0:	6e69616d 	powvsez	f6, f1, #5.0
 4e4:	6e656d5f 	mcrvs	13, 3, r6, cr5, cr15, {2}
 4e8:	4f500075 	svcmi	0x00500075
 4ec:	43454a42 	movtmi	r4, #23106	; 0x5a42
 4f0:	6e730054 	mrcvs	0, 3, r0, cr3, cr4, {2}
 4f4:	5f656b61 	svcpl	0x00656b61
 4f8:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 4fc:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 500:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 504:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 508:	2f3a4300 	svccs	0x003a4300
 50c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 510:	65682f73 	strbvs	r2, [r8, #-3955]!	; 0xfffff08d
 514:	2f79726e 	svccs	0x0079726e
 518:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xfffff1b1
 51c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 520:	726b532f 	rsbvc	r5, fp, #-1140850688	; 0xbc000000
 524:	6f627669 	svcvs	0x00627669
 528:	562f6472 			; <UNDEFINED> instruction: 0x562f6472
 52c:	2f313254 	svccs	0x00313254
 530:	2f504f4d 	svccs	0x00504f4d
 534:	2f504f4d 	svccs	0x00504f4d
 538:	2f504f4d 	svccs	0x00504f4d
 53c:	6b616e73 	blvs	185bf10 <startup-0x1e7a40f0>
 540:	656b2f65 	strbvs	r2, [fp, #-3941]!	; 0xfffff09b
 544:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
 548:	6b00632e 	blvs	19208 <startup-0x1ffe6df8>
 54c:	00627965 	rsbeq	r7, r2, r5, ror #18
 550:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 554:	006c6f43 	rsbeq	r6, ip, r3, asr #30
 558:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 55c:	79656b5f 	stmdbvc	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}^
 560:	00646170 	rsbeq	r6, r4, r0, ror r1
 564:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 568:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 56c:	43006969 	movwmi	r6, #2409	; 0x969
 570:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 574:	2f737265 	svccs	0x00737265
 578:	726e6568 	rsbvc	r6, lr, #104, 10	; 0x1a000000
 57c:	6e4f2f79 	mcrvs	15, 2, r2, cr15, cr9, {3}
 580:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
 584:	532f6576 			; <UNDEFINED> instruction: 0x532f6576
 588:	7669726b 	strbtvc	r7, [r9], -fp, ror #4
 58c:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 590:	3254562f 	subscc	r5, r4, #49283072	; 0x2f00000
 594:	4f4d2f31 	svcmi	0x004d2f31
 598:	4f4d2f50 	svcmi	0x004d2f50
 59c:	4f4d2f50 	svcmi	0x004d2f50
 5a0:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
 5a4:	2f656b61 	svccs	0x00656b61
 5a8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 5ac:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
 5b0:	5f74696e 	svcpl	0x0074696e
 5b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 5b8:	Address 0x000005b8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0000070d 	andeq	r0, r0, sp, lsl #14
  2c:	0000001c 	andeq	r0, r0, ip, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	0000004c 	andeq	r0, r0, ip, asr #32
  3c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  40:	41018e02 	tstmi	r1, r2, lsl #28
  44:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  48:	00000007 	andeq	r0, r0, r7
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	200000a0 	andcs	r0, r0, r0, lsr #1
  58:	00000026 	andeq	r0, r0, r6, lsr #32
  5c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  60:	41018e02 	tstmi	r1, r2, lsl #28
  64:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  68:	00000007 	andeq	r0, r0, r7
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	200000c6 	andcs	r0, r0, r6, asr #1
  78:	0000004e 	andeq	r0, r0, lr, asr #32
  7c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  80:	41018e02 	tstmi	r1, r2, lsl #28
  84:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  88:	00000007 	andeq	r0, r0, r7
  8c:	0000000c 	andeq	r0, r0, ip
  90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  94:	7c020001 	stcvc	0, cr0, [r2], {1}
  98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	0000008c 	andeq	r0, r0, ip, lsl #1
  a4:	20000114 	andcs	r0, r0, r4, lsl r1
  a8:	00000038 	andeq	r0, r0, r8, lsr r0
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	0000008c 	andeq	r0, r0, ip, lsl #1
  c4:	2000014c 	andcs	r0, r0, ip, asr #2
  c8:	00000048 	andeq	r0, r0, r8, asr #32
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	0000008c 	andeq	r0, r0, ip, lsl #1
  e4:	20000194 	mulcs	r0, r4, r1
  e8:	00000030 	andeq	r0, r0, r0, lsr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	0000008c 	andeq	r0, r0, ip, lsl #1
 104:	200001c4 	andcs	r0, r0, r4, asr #3
 108:	0000002c 	andeq	r0, r0, ip, lsr #32
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 118:	00000007 	andeq	r0, r0, r7
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	0000008c 	andeq	r0, r0, ip, lsl #1
 124:	200001f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 128:	0000002a 	andeq	r0, r0, sl, lsr #32
 12c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 130:	41018e02 	tstmi	r1, r2, lsl #28
 134:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 138:	00000007 	andeq	r0, r0, r7
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	0000008c 	andeq	r0, r0, ip, lsl #1
 144:	2000021a 	andcs	r0, r0, sl, lsl r2
 148:	0000002a 	andeq	r0, r0, sl, lsr #32
 14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 150:	41018e02 	tstmi	r1, r2, lsl #28
 154:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 158:	00000007 	andeq	r0, r0, r7
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	0000008c 	andeq	r0, r0, ip, lsl #1
 164:	20000244 	andcs	r0, r0, r4, asr #4
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 170:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 174:	180e4101 	stmdane	lr, {r0, r8, lr}
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	0000008c 	andeq	r0, r0, ip, lsl #1
 184:	20000284 	andcs	r0, r0, r4, lsl #5
 188:	00000048 	andeq	r0, r0, r8, asr #32
 18c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 190:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 194:	180e4101 	stmdane	lr, {r0, r8, lr}
 198:	00070d41 	andeq	r0, r7, r1, asr #26
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1a4:	200002cc 	andcs	r0, r0, ip, asr #5
 1a8:	00000036 	andeq	r0, r0, r6, lsr r0
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	0000008c 	andeq	r0, r0, ip, lsl #1
 1c4:	20000302 	andcs	r0, r0, r2, lsl #6
 1c8:	0000003a 	andeq	r0, r0, sl, lsr r0
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	0000008c 	andeq	r0, r0, ip, lsl #1
 1e0:	2000033c 	andcs	r0, r0, ip, lsr r3
 1e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	0000008c 	andeq	r0, r0, ip, lsl #1
 200:	20000378 	andcs	r0, r0, r8, ror r3
 204:	0000004c 	andeq	r0, r0, ip, asr #32
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	0000008c 	andeq	r0, r0, ip, lsl #1
 220:	200003c4 	andcs	r0, r0, r4, asr #7
 224:	00000060 	andeq	r0, r0, r0, rrx
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000000c 	andeq	r0, r0, ip
 23c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 240:	7c020001 	stcvc	0, cr0, [r2], {1}
 244:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 248:	0000000c 	andeq	r0, r0, ip
 24c:	00000238 	andeq	r0, r0, r8, lsr r2
 250:	20000000 	andcs	r0, r0, r0
 254:	0000000c 	andeq	r0, r0, ip
 258:	0000000c 	andeq	r0, r0, ip
 25c:	00000238 	andeq	r0, r0, r8, lsr r2
 260:	20000424 	andcs	r0, r0, r4, lsr #8
 264:	00000006 	andeq	r0, r0, r6
 268:	0000000c 	andeq	r0, r0, ip
 26c:	00000238 	andeq	r0, r0, r8, lsr r2
 270:	2000042a 	andcs	r0, r0, sl, lsr #8
 274:	00000006 	andeq	r0, r0, r6
 278:	0000000c 	andeq	r0, r0, ip
 27c:	00000238 	andeq	r0, r0, r8, lsr r2
 280:	20000430 	andcs	r0, r0, r0, lsr r4
 284:	00000006 	andeq	r0, r0, r6
 288:	0000000c 	andeq	r0, r0, ip
 28c:	00000238 	andeq	r0, r0, r8, lsr r2
 290:	20000436 	andcs	r0, r0, r6, lsr r4
 294:	00000006 	andeq	r0, r0, r6
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000238 	andeq	r0, r0, r8, lsr r2
 2a0:	2000043c 	andcs	r0, r0, ip, lsr r4
 2a4:	00000082 	andeq	r0, r0, r2, lsl #1
 2a8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2ac:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2b0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000238 	andeq	r0, r0, r8, lsr r2
 2c0:	200004be 			; <UNDEFINED> instruction: 0x200004be
 2c4:	00000082 	andeq	r0, r0, r2, lsl #1
 2c8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 2cc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 2d0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000238 	andeq	r0, r0, r8, lsr r2
 2e0:	20000540 	andcs	r0, r0, r0, asr #10
 2e4:	00000020 	andeq	r0, r0, r0, lsr #32
 2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ec:	41018e02 	tstmi	r1, r2, lsl #28
 2f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2f4:	00000007 	andeq	r0, r0, r7
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000238 	andeq	r0, r0, r8, lsr r2
 300:	20000560 	andcs	r0, r0, r0, ror #10
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000238 	andeq	r0, r0, r8, lsr r2
 320:	2000058c 	andcs	r0, r0, ip, lsl #11
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000238 	andeq	r0, r0, r8, lsr r2
 340:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 344:	00000070 	andeq	r0, r0, r0, ror r0
 348:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 34c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 350:	480e4101 	stmdami	lr, {r0, r8, lr}
 354:	00070d41 	andeq	r0, r7, r1, asr #26
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000238 	andeq	r0, r0, r8, lsr r2
 360:	20000628 	andcs	r0, r0, r8, lsr #12
 364:	0000003e 	andeq	r0, r0, lr, lsr r0
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 374:	00000007 	andeq	r0, r0, r7
 378:	00000024 	andeq	r0, r0, r4, lsr #32
 37c:	00000238 	andeq	r0, r0, r8, lsr r2
 380:	20000666 	andcs	r0, r0, r6, ror #12
 384:	0000009c 	muleq	r0, ip, r0
 388:	41100e41 	tstmi	r0, r1, asr #28
 38c:	0884200e 	stmeq	r4, {r1, r2, r3, sp}
 390:	06870785 	streq	r0, [r7], r5, lsl #15
 394:	0e42058e 	cdpeq	5, 4, cr0, cr2, cr14, {4}
 398:	41098824 	tstmi	r9, r4, lsr #16
 39c:	0000070d 	andeq	r0, r0, sp, lsl #14
 3a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a4:	00000238 	andeq	r0, r0, r8, lsr r2
 3a8:	20000702 	andcs	r0, r0, r2, lsl #14
 3ac:	00000032 	andeq	r0, r0, r2, lsr r0
 3b0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3b4:	41018e02 	tstmi	r1, r2, lsl #28
 3b8:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 3bc:	00000007 	andeq	r0, r0, r7
 3c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c4:	00000238 	andeq	r0, r0, r8, lsr r2
 3c8:	20000734 	andcs	r0, r0, r4, lsr r7
 3cc:	00000086 	andeq	r0, r0, r6, lsl #1
 3d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3d4:	41018e02 	tstmi	r1, r2, lsl #28
 3d8:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 3dc:	00000007 	andeq	r0, r0, r7
 3e0:	00000018 	andeq	r0, r0, r8, lsl r0
 3e4:	00000238 	andeq	r0, r0, r8, lsr r2
 3e8:	200007ba 			; <UNDEFINED> instruction: 0x200007ba
 3ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 3f0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3f4:	41018e02 	tstmi	r1, r2, lsl #28
 3f8:	0000070d 	andeq	r0, r0, sp, lsl #14
 3fc:	00000024 	andeq	r0, r0, r4, lsr #32
 400:	00000238 	andeq	r0, r0, r8, lsr r2
 404:	200007e8 	andcs	r0, r0, r8, ror #15
 408:	00000334 	andeq	r0, r0, r4, lsr r3
 40c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 410:	86048505 	strhi	r8, [r4], -r5, lsl #10
 414:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 418:	880e4201 	stmdahi	lr, {r0, r9, lr}
 41c:	0c410191 	stfeqe	f0, [r1], {145}	; 0x91
 420:	0190d007 	orrseq	sp, r0, r7
 424:	0000000c 	andeq	r0, r0, ip
 428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 42c:	7c020001 	stcvc	0, cr0, [r2], {1}
 430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	00000424 	andeq	r0, r0, r4, lsr #8
 43c:	20000b1c 	andcs	r0, r0, ip, lsl fp
 440:	00000064 	andeq	r0, r0, r4, rrx
 444:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 448:	41018e02 	tstmi	r1, r2, lsl #28
 44c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 450:	00000007 	andeq	r0, r0, r7
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	00000424 	andeq	r0, r0, r4, lsr #8
 45c:	20000b80 	andcs	r0, r0, r0, lsl #23
 460:	00000054 	andeq	r0, r0, r4, asr r0
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 470:	00000007 	andeq	r0, r0, r7
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000424 	andeq	r0, r0, r4, lsr #8
 47c:	20000bd4 	ldrdcs	r0, [r0], -r4
 480:	00000068 	andeq	r0, r0, r8, rrx
 484:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 488:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 48c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	0000000c 	andeq	r0, r0, ip
 498:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 49c:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a4:	00000018 	andeq	r0, r0, r8, lsl r0
 4a8:	00000494 	muleq	r0, r4, r4
 4ac:	20000c3c 	andcs	r0, r0, ip, lsr ip
 4b0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4b4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4b8:	41018e02 	tstmi	r1, r2, lsl #28
 4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	00000494 	muleq	r0, r4, r4
 4c8:	20000c68 	andcs	r0, r0, r8, ror #24
 4cc:	00000028 	andeq	r0, r0, r8, lsr #32
 4d0:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4d4:	41018e02 	tstmi	r1, r2, lsl #28
 4d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4dc:	00000018 	andeq	r0, r0, r8, lsl r0
 4e0:	00000494 	muleq	r0, r4, r4
 4e4:	20000c90 	mulcs	r0, r0, ip
 4e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 4ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 4f0:	41018e02 	tstmi	r1, r2, lsl #28
 4f4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4f8:	00000018 	andeq	r0, r0, r8, lsl r0
 4fc:	00000494 	muleq	r0, r4, r4
 500:	20000ccc 	andcs	r0, r0, ip, asr #25
 504:	00000016 	andeq	r0, r0, r6, lsl r0
 508:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 50c:	41018e02 	tstmi	r1, r2, lsl #28
 510:	0000070d 	andeq	r0, r0, sp, lsl #14
 514:	0000000c 	andeq	r0, r0, ip
 518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 51c:	7c010001 	stcvc	0, cr0, [r1], {1}
 520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 524:	0000000c 	andeq	r0, r0, ip
 528:	00000514 	andeq	r0, r0, r4, lsl r5
 52c:	20000ce5 	andcs	r0, r0, r5, ror #25
 530:	0000010a 	andeq	r0, r0, sl, lsl #2
 534:	0000000c 	andeq	r0, r0, ip
 538:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 53c:	7c010001 	stcvc	0, cr0, [r1], {1}
 540:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 544:	0000000c 	andeq	r0, r0, ip
 548:	00000534 	andeq	r0, r0, r4, lsr r5
 54c:	20000df9 	strdcs	r0, [r0], -r9
 550:	000001cc 	andeq	r0, r0, ip, asr #3

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000424 	andcs	r0, r0, r4, lsr #8
   4:	20000b1c 	andcs	r0, r0, ip, lsl fp
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
