
Debug/snake:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

//STARTUP--------------------------------------------------
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");					/* call main */
20000004:	f000 faa6 	bl	20000554 <main>
__asm__ volatile(".L1: B .L1\n");				/* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_initalize>:

//GRPAPHICS DRIVERS----------------------------
//OBS! graphic_init. sets up port E for usage
__attribute__((naked))
void graphic_initalize(void)
{
20000010:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
	__asm volatile(" .HWORD 0xDFF0\n");
	__asm volatile(" BX LR\n");
}
20000014:	46c0      	nop			; (mov r8, r8)

20000016 <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x, int y)
{
20000016:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
	__asm volatile(" .HWORD 0xDFF2\n");
	__asm volatile(" BX LR\n");
}
2000001a:	46c0      	nop			; (mov r8, r8)

2000001c <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void)
{
2000001c:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
	__asm volatile(" .HWORD 0xDFF1\n");
	__asm volatile(" BX LR\n");
}
20000020:	46c0      	nop			; (mov r8, r8)

20000022 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y)
{
20000022:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
	__asm volatile(" .HWORD 0xDFF3\n");
	__asm volatile(" BX LR\n");
}
20000026:	46c0      	nop			; (mov r8, r8)

20000028 <init_app>:
//GRAPHICS DRIVERS----------------------------

//INIT----------------------------------------
void init_app(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
	// starta klockorna
	*((unsigned long *) 0x40023830) = 0x18;
2000002c:	4b0a      	ldr	r3, [pc, #40]	; (20000058 <init_app+0x30>)
2000002e:	2218      	movs	r2, #24
20000030:	601a      	str	r2, [r3, #0]
	//keypad
	GPIO_D.moder = 0x55000000;
20000032:	4b0a      	ldr	r3, [pc, #40]	; (2000005c <init_app+0x34>)
20000034:	22aa      	movs	r2, #170	; 0xaa
20000036:	05d2      	lsls	r2, r2, #23
20000038:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0;
2000003a:	4b08      	ldr	r3, [pc, #32]	; (2000005c <init_app+0x34>)
2000003c:	2200      	movs	r2, #0
2000003e:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0xAA0000;
20000040:	4b06      	ldr	r3, [pc, #24]	; (2000005c <init_app+0x34>)
20000042:	22aa      	movs	r2, #170	; 0xaa
20000044:	0412      	lsls	r2, r2, #16
20000046:	60da      	str	r2, [r3, #12]
	GPIO_D.ospeedr = 0xFF000000;
20000048:	4b04      	ldr	r3, [pc, #16]	; (2000005c <init_app+0x34>)
2000004a:	22ff      	movs	r2, #255	; 0xff
2000004c:	0612      	lsls	r2, r2, #24
2000004e:	609a      	str	r2, [r3, #8]
}
20000050:	46c0      	nop			; (mov r8, r8)
20000052:	46bd      	mov	sp, r7
20000054:	bd80      	pop	{r7, pc}
20000056:	46c0      	nop			; (mov r8, r8)
20000058:	40023830 	andmi	r3, r2, r0, lsr r8
2000005c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000060 <delay_250ns>:
//INIT----------------------------------------

//DELAY------------------------------
void delay_250ns( void )
{
20000060:	b580      	push	{r7, lr}
20000062:	af00      	add	r7, sp, #0
/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000064:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <delay_250ns+0x38>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1 );
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <delay_250ns+0x3c>)
2000006c:	2229      	movs	r2, #41	; 0x29
2000006e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000070:	4b0b      	ldr	r3, [pc, #44]	; (200000a0 <delay_250ns+0x40>)
20000072:	2200      	movs	r2, #0
20000074:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000076:	4b08      	ldr	r3, [pc, #32]	; (20000098 <delay_250ns+0x38>)
20000078:	2205      	movs	r2, #5
2000007a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	4b06      	ldr	r3, [pc, #24]	; (20000098 <delay_250ns+0x38>)
20000080:	681a      	ldr	r2, [r3, #0]
20000082:	2380      	movs	r3, #128	; 0x80
20000084:	025b      	lsls	r3, r3, #9
20000086:	4013      	ands	r3, r2
20000088:	d0f9      	beq.n	2000007e <delay_250ns+0x1e>
	*STK_CTRL = 0;
2000008a:	4b03      	ldr	r3, [pc, #12]	; (20000098 <delay_250ns+0x38>)
2000008c:	2200      	movs	r2, #0
2000008e:	601a      	str	r2, [r3, #0]
}
20000090:	46c0      	nop			; (mov r8, r8)
20000092:	46bd      	mov	sp, r7
20000094:	bd80      	pop	{r7, pc}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	e000e010 	and	lr, r0, r0, lsl r0
2000009c:	e000e014 	and	lr, r0, r4, lsl r0
200000a0:	e000e018 	and	lr, r0, r8, lsl r0

200000a4 <delay_micro>:

void delay_micro(unsigned int us)
{
200000a4:	b580      	push	{r7, lr}
200000a6:	b084      	sub	sp, #16
200000a8:	af00      	add	r7, sp, #0
200000aa:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
	us = us / 1000;
	us++;
#endif
	while( us > 0 )
200000ac:	e00d      	b.n	200000ca <delay_micro+0x26>
	{
		for(int i = 0; i<4; i++) delay_250ns();
200000ae:	2300      	movs	r3, #0
200000b0:	60fb      	str	r3, [r7, #12]
200000b2:	e004      	b.n	200000be <delay_micro+0x1a>
200000b4:	f7ff ffd4 	bl	20000060 <delay_250ns>
200000b8:	68fb      	ldr	r3, [r7, #12]
200000ba:	3301      	adds	r3, #1
200000bc:	60fb      	str	r3, [r7, #12]
200000be:	68fb      	ldr	r3, [r7, #12]
200000c0:	2b03      	cmp	r3, #3
200000c2:	ddf7      	ble.n	200000b4 <delay_micro+0x10>
		us--;
200000c4:	687b      	ldr	r3, [r7, #4]
200000c6:	3b01      	subs	r3, #1
200000c8:	607b      	str	r3, [r7, #4]
	while( us > 0 )
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	2b00      	cmp	r3, #0
200000ce:	d1ee      	bne.n	200000ae <delay_micro+0xa>
	}
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b004      	add	sp, #16
200000d8:	bd80      	pop	{r7, pc}

200000da <delay_milli>:

void delay_milli(unsigned int ms) {
200000da:	b580      	push	{r7, lr}
200000dc:	b082      	sub	sp, #8
200000de:	af00      	add	r7, sp, #0
200000e0:	6078      	str	r0, [r7, #4]
	while( ms > 0 )
200000e2:	e005      	b.n	200000f0 <delay_milli+0x16>
	{
		delay_micro(100);
200000e4:	2064      	movs	r0, #100	; 0x64
200000e6:	f7ff ffdd 	bl	200000a4 <delay_micro>
		ms--;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	3b01      	subs	r3, #1
200000ee:	607b      	str	r3, [r7, #4]
	while( ms > 0 )
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	2b00      	cmp	r3, #0
200000f4:	d1f6      	bne.n	200000e4 <delay_milli+0xa>
	}
}
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	46c0      	nop			; (mov r8, r8)
200000fa:	46bd      	mov	sp, r7
200000fc:	b002      	add	sp, #8
200000fe:	bd80      	pop	{r7, pc}

20000100 <activateRow>:
//DELAY----------------------------

//FUNC. keyb------------------------
void activateRow(unsigned int row)
{
20000100:	b580      	push	{r7, lr}
20000102:	b082      	sub	sp, #8
20000104:	af00      	add	r7, sp, #0
20000106:	6078      	str	r0, [r7, #4]
	switch(row){
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	2b04      	cmp	r3, #4
2000010c:	d01b      	beq.n	20000146 <activateRow+0x46>
2000010e:	687b      	ldr	r3, [r7, #4]
20000110:	2b04      	cmp	r3, #4
20000112:	d81c      	bhi.n	2000014e <activateRow+0x4e>
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	2b03      	cmp	r3, #3
20000118:	d011      	beq.n	2000013e <activateRow+0x3e>
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	2b03      	cmp	r3, #3
2000011e:	d816      	bhi.n	2000014e <activateRow+0x4e>
20000120:	687b      	ldr	r3, [r7, #4]
20000122:	2b01      	cmp	r3, #1
20000124:	d003      	beq.n	2000012e <activateRow+0x2e>
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	2b02      	cmp	r3, #2
2000012a:	d004      	beq.n	20000136 <activateRow+0x36>
2000012c:	e00f      	b.n	2000014e <activateRow+0x4e>
		case 1: GPIO_D.odrHigh=0x10; break;
2000012e:	4b0c      	ldr	r3, [pc, #48]	; (20000160 <activateRow+0x60>)
20000130:	2210      	movs	r2, #16
20000132:	755a      	strb	r2, [r3, #21]
20000134:	e00f      	b.n	20000156 <activateRow+0x56>
		case 2: GPIO_D.odrHigh=0x20; break;
20000136:	4b0a      	ldr	r3, [pc, #40]	; (20000160 <activateRow+0x60>)
20000138:	2220      	movs	r2, #32
2000013a:	755a      	strb	r2, [r3, #21]
2000013c:	e00b      	b.n	20000156 <activateRow+0x56>
		case 3: GPIO_D.odrHigh=0x40; break;
2000013e:	4b08      	ldr	r3, [pc, #32]	; (20000160 <activateRow+0x60>)
20000140:	2240      	movs	r2, #64	; 0x40
20000142:	755a      	strb	r2, [r3, #21]
20000144:	e007      	b.n	20000156 <activateRow+0x56>
		case 4: GPIO_D.odrHigh=0x80; break;
20000146:	4b06      	ldr	r3, [pc, #24]	; (20000160 <activateRow+0x60>)
20000148:	2280      	movs	r2, #128	; 0x80
2000014a:	755a      	strb	r2, [r3, #21]
2000014c:	e003      	b.n	20000156 <activateRow+0x56>
		
		default: GPIO_D.odrHigh=0;
2000014e:	4b04      	ldr	r3, [pc, #16]	; (20000160 <activateRow+0x60>)
20000150:	2200      	movs	r2, #0
20000152:	755a      	strb	r2, [r3, #21]
	}
}
20000154:	46c0      	nop			; (mov r8, r8)
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	46bd      	mov	sp, r7
2000015a:	b002      	add	sp, #8
2000015c:	bd80      	pop	{r7, pc}
2000015e:	46c0      	nop			; (mov r8, r8)
20000160:	40020c00 	andmi	r0, r2, r0, lsl #24

20000164 <readCol>:
//helpfunc
int readCol(void)
{
20000164:	b580      	push	{r7, lr}
20000166:	b082      	sub	sp, #8
20000168:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D.idrHigh;
2000016a:	4a12      	ldr	r2, [pc, #72]	; (200001b4 <readCol+0x50>)
2000016c:	1dfb      	adds	r3, r7, #7
2000016e:	7c52      	ldrb	r2, [r2, #17]
20000170:	701a      	strb	r2, [r3, #0]
	if(c & 8) return 4;
20000172:	1dfb      	adds	r3, r7, #7
20000174:	781b      	ldrb	r3, [r3, #0]
20000176:	2208      	movs	r2, #8
20000178:	4013      	ands	r3, r2
2000017a:	d001      	beq.n	20000180 <readCol+0x1c>
2000017c:	2304      	movs	r3, #4
2000017e:	e015      	b.n	200001ac <readCol+0x48>
	if(c & 4) return 3;
20000180:	1dfb      	adds	r3, r7, #7
20000182:	781b      	ldrb	r3, [r3, #0]
20000184:	2204      	movs	r2, #4
20000186:	4013      	ands	r3, r2
20000188:	d001      	beq.n	2000018e <readCol+0x2a>
2000018a:	2303      	movs	r3, #3
2000018c:	e00e      	b.n	200001ac <readCol+0x48>
	if(c & 2) return 2;
2000018e:	1dfb      	adds	r3, r7, #7
20000190:	781b      	ldrb	r3, [r3, #0]
20000192:	2202      	movs	r2, #2
20000194:	4013      	ands	r3, r2
20000196:	d001      	beq.n	2000019c <readCol+0x38>
20000198:	2302      	movs	r3, #2
2000019a:	e007      	b.n	200001ac <readCol+0x48>
	if(c & 1) return 1;
2000019c:	1dfb      	adds	r3, r7, #7
2000019e:	781b      	ldrb	r3, [r3, #0]
200001a0:	2201      	movs	r2, #1
200001a2:	4013      	ands	r3, r2
200001a4:	d001      	beq.n	200001aa <readCol+0x46>
200001a6:	2301      	movs	r3, #1
200001a8:	e000      	b.n	200001ac <readCol+0x48>
	return 0;
200001aa:	2300      	movs	r3, #0
}
200001ac:	0018      	movs	r0, r3
200001ae:	46bd      	mov	sp, r7
200001b0:	b002      	add	sp, #8
200001b2:	bd80      	pop	{r7, pc}
200001b4:	40020c00 	andmi	r0, r2, r0, lsl #24

200001b8 <keyb>:

unsigned char keyb(void)
{
200001b8:	b590      	push	{r4, r7, lr}
200001ba:	b087      	sub	sp, #28
200001bc:	af00      	add	r7, sp, #0
	unsigned char key[]=
200001be:	003b      	movs	r3, r7
200001c0:	4a16      	ldr	r2, [pc, #88]	; (2000021c <keyb+0x64>)
200001c2:	ca13      	ldmia	r2!, {r0, r1, r4}
200001c4:	c313      	stmia	r3!, {r0, r1, r4}
200001c6:	6812      	ldr	r2, [r2, #0]
200001c8:	601a      	str	r2, [r3, #0]
	{1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
	int row, col;
	for(row = 1; row <= 4; row++){
200001ca:	2301      	movs	r3, #1
200001cc:	617b      	str	r3, [r7, #20]
200001ce:	e019      	b.n	20000204 <keyb+0x4c>
		activateRow(row);
200001d0:	697b      	ldr	r3, [r7, #20]
200001d2:	0018      	movs	r0, r3
200001d4:	f7ff ff94 	bl	20000100 <activateRow>
		if(col=readCol()){
200001d8:	f7ff ffc4 	bl	20000164 <readCol>
200001dc:	0003      	movs	r3, r0
200001de:	613b      	str	r3, [r7, #16]
200001e0:	693b      	ldr	r3, [r7, #16]
200001e2:	2b00      	cmp	r3, #0
200001e4:	d00b      	beq.n	200001fe <keyb+0x46>
			activateRow(0);
200001e6:	2000      	movs	r0, #0
200001e8:	f7ff ff8a 	bl	20000100 <activateRow>
			return key[4*(row-1)+(col-1)];
200001ec:	697b      	ldr	r3, [r7, #20]
200001ee:	3b01      	subs	r3, #1
200001f0:	009a      	lsls	r2, r3, #2
200001f2:	693b      	ldr	r3, [r7, #16]
200001f4:	3b01      	subs	r3, #1
200001f6:	18d3      	adds	r3, r2, r3
200001f8:	003a      	movs	r2, r7
200001fa:	5cd3      	ldrb	r3, [r2, r3]
200001fc:	e009      	b.n	20000212 <keyb+0x5a>
	for(row = 1; row <= 4; row++){
200001fe:	697b      	ldr	r3, [r7, #20]
20000200:	3301      	adds	r3, #1
20000202:	617b      	str	r3, [r7, #20]
20000204:	697b      	ldr	r3, [r7, #20]
20000206:	2b04      	cmp	r3, #4
20000208:	dde2      	ble.n	200001d0 <keyb+0x18>
		}
	}
	activateRow(0);
2000020a:	2000      	movs	r0, #0
2000020c:	f7ff ff78 	bl	20000100 <activateRow>
	return(0xFF);
20000210:	23ff      	movs	r3, #255	; 0xff
}
20000212:	0018      	movs	r0, r3
20000214:	46bd      	mov	sp, r7
20000216:	b007      	add	sp, #28
20000218:	bd90      	pop	{r4, r7, pc}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	200008d4 	ldrdcs	r0, [r0], -r4

20000220 <random>:
	void (* set_speed) (struct tObj *, int, int);
}	OBJECT, *POBJECT;
//Custom TYPE DECL.-----------------------------

//HELPER FUNCTIONS---------------------------
int random(int min, int max) {
20000220:	b580      	push	{r7, lr}
20000222:	b082      	sub	sp, #8
20000224:	af00      	add	r7, sp, #0
20000226:	6078      	str	r0, [r7, #4]
20000228:	6039      	str	r1, [r7, #0]
	// gives a random number between min and max
	
	return 2;
2000022a:	2302      	movs	r3, #2
}
2000022c:	0018      	movs	r0, r3
2000022e:	46bd      	mov	sp, r7
20000230:	b002      	add	sp, #8
20000232:	bd80      	pop	{r7, pc}

20000234 <draw_object>:


//OBJECT-----------------------------
//general methods
void draw_object(POBJECT obj)
{
20000234:	b590      	push	{r4, r7, lr}
20000236:	b087      	sub	sp, #28
20000238:	af00      	add	r7, sp, #0
2000023a:	6078      	str	r0, [r7, #4]
	int numpixels = obj -> geo -> numpoints;
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	681b      	ldr	r3, [r3, #0]
20000240:	681b      	ldr	r3, [r3, #0]
20000242:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < numpixels; i++)
20000244:	2300      	movs	r3, #0
20000246:	617b      	str	r3, [r7, #20]
20000248:	e032      	b.n	200002b0 <draw_object+0x7c>
	{
		unsigned char x = obj -> geo -> px[i].x + (obj -> posx) * SQUARE_WIDTH;
2000024a:	687b      	ldr	r3, [r7, #4]
2000024c:	681a      	ldr	r2, [r3, #0]
2000024e:	697b      	ldr	r3, [r7, #20]
20000250:	3304      	adds	r3, #4
20000252:	005b      	lsls	r3, r3, #1
20000254:	18d3      	adds	r3, r2, r3
20000256:	3304      	adds	r3, #4
20000258:	7819      	ldrb	r1, [r3, #0]
2000025a:	687b      	ldr	r3, [r7, #4]
2000025c:	68db      	ldr	r3, [r3, #12]
2000025e:	b2da      	uxtb	r2, r3
20000260:	4b18      	ldr	r3, [pc, #96]	; (200002c4 <draw_object+0x90>)
20000262:	681b      	ldr	r3, [r3, #0]
20000264:	b2db      	uxtb	r3, r3
20000266:	4353      	muls	r3, r2
20000268:	b2da      	uxtb	r2, r3
2000026a:	200f      	movs	r0, #15
2000026c:	183b      	adds	r3, r7, r0
2000026e:	188a      	adds	r2, r1, r2
20000270:	701a      	strb	r2, [r3, #0]
		unsigned char y = obj -> geo -> px[i].y + (obj -> posy) * SQUARE_WIDTH;
20000272:	687b      	ldr	r3, [r7, #4]
20000274:	681a      	ldr	r2, [r3, #0]
20000276:	697b      	ldr	r3, [r7, #20]
20000278:	3304      	adds	r3, #4
2000027a:	005b      	lsls	r3, r3, #1
2000027c:	18d3      	adds	r3, r2, r3
2000027e:	3305      	adds	r3, #5
20000280:	7819      	ldrb	r1, [r3, #0]
20000282:	687b      	ldr	r3, [r7, #4]
20000284:	691b      	ldr	r3, [r3, #16]
20000286:	b2da      	uxtb	r2, r3
20000288:	4b0e      	ldr	r3, [pc, #56]	; (200002c4 <draw_object+0x90>)
2000028a:	681b      	ldr	r3, [r3, #0]
2000028c:	b2db      	uxtb	r3, r3
2000028e:	4353      	muls	r3, r2
20000290:	b2da      	uxtb	r2, r3
20000292:	240e      	movs	r4, #14
20000294:	193b      	adds	r3, r7, r4
20000296:	188a      	adds	r2, r1, r2
20000298:	701a      	strb	r2, [r3, #0]
		graphic_pixel_set(x, y);
2000029a:	183b      	adds	r3, r7, r0
2000029c:	781a      	ldrb	r2, [r3, #0]
2000029e:	193b      	adds	r3, r7, r4
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	0019      	movs	r1, r3
200002a4:	0010      	movs	r0, r2
200002a6:	f7ff feb6 	bl	20000016 <graphic_pixel_set>
	for(int i = 0; i < numpixels; i++)
200002aa:	697b      	ldr	r3, [r7, #20]
200002ac:	3301      	adds	r3, #1
200002ae:	617b      	str	r3, [r7, #20]
200002b0:	697a      	ldr	r2, [r7, #20]
200002b2:	693b      	ldr	r3, [r7, #16]
200002b4:	429a      	cmp	r2, r3
200002b6:	dbc8      	blt.n	2000024a <draw_object+0x16>
	}
}
200002b8:	46c0      	nop			; (mov r8, r8)
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	46bd      	mov	sp, r7
200002be:	b007      	add	sp, #28
200002c0:	bd90      	pop	{r4, r7, pc}
200002c2:	46c0      	nop			; (mov r8, r8)
200002c4:	200007f8 	strdcs	r0, [r0], -r8

200002c8 <clear_object>:

void clear_object(POBJECT obj)
{
200002c8:	b590      	push	{r4, r7, lr}
200002ca:	b087      	sub	sp, #28
200002cc:	af00      	add	r7, sp, #0
200002ce:	6078      	str	r0, [r7, #4]
	int numpixels = obj -> geo -> numpoints;
200002d0:	687b      	ldr	r3, [r7, #4]
200002d2:	681b      	ldr	r3, [r3, #0]
200002d4:	681b      	ldr	r3, [r3, #0]
200002d6:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < numpixels; i++)
200002d8:	2300      	movs	r3, #0
200002da:	617b      	str	r3, [r7, #20]
200002dc:	e032      	b.n	20000344 <clear_object+0x7c>
	{ 
		unsigned char x = obj -> geo -> px[i].x + (obj -> posx) * SQUARE_WIDTH;
200002de:	687b      	ldr	r3, [r7, #4]
200002e0:	681a      	ldr	r2, [r3, #0]
200002e2:	697b      	ldr	r3, [r7, #20]
200002e4:	3304      	adds	r3, #4
200002e6:	005b      	lsls	r3, r3, #1
200002e8:	18d3      	adds	r3, r2, r3
200002ea:	3304      	adds	r3, #4
200002ec:	7819      	ldrb	r1, [r3, #0]
200002ee:	687b      	ldr	r3, [r7, #4]
200002f0:	68db      	ldr	r3, [r3, #12]
200002f2:	b2da      	uxtb	r2, r3
200002f4:	4b18      	ldr	r3, [pc, #96]	; (20000358 <clear_object+0x90>)
200002f6:	681b      	ldr	r3, [r3, #0]
200002f8:	b2db      	uxtb	r3, r3
200002fa:	4353      	muls	r3, r2
200002fc:	b2da      	uxtb	r2, r3
200002fe:	200f      	movs	r0, #15
20000300:	183b      	adds	r3, r7, r0
20000302:	188a      	adds	r2, r1, r2
20000304:	701a      	strb	r2, [r3, #0]
		unsigned char y = obj -> geo -> px[i].y + (obj -> posy) * SQUARE_WIDTH;
20000306:	687b      	ldr	r3, [r7, #4]
20000308:	681a      	ldr	r2, [r3, #0]
2000030a:	697b      	ldr	r3, [r7, #20]
2000030c:	3304      	adds	r3, #4
2000030e:	005b      	lsls	r3, r3, #1
20000310:	18d3      	adds	r3, r2, r3
20000312:	3305      	adds	r3, #5
20000314:	7819      	ldrb	r1, [r3, #0]
20000316:	687b      	ldr	r3, [r7, #4]
20000318:	691b      	ldr	r3, [r3, #16]
2000031a:	b2da      	uxtb	r2, r3
2000031c:	4b0e      	ldr	r3, [pc, #56]	; (20000358 <clear_object+0x90>)
2000031e:	681b      	ldr	r3, [r3, #0]
20000320:	b2db      	uxtb	r3, r3
20000322:	4353      	muls	r3, r2
20000324:	b2da      	uxtb	r2, r3
20000326:	240e      	movs	r4, #14
20000328:	193b      	adds	r3, r7, r4
2000032a:	188a      	adds	r2, r1, r2
2000032c:	701a      	strb	r2, [r3, #0]
		graphic_pixel_clear(x, y);
2000032e:	183b      	adds	r3, r7, r0
20000330:	781a      	ldrb	r2, [r3, #0]
20000332:	193b      	adds	r3, r7, r4
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	0019      	movs	r1, r3
20000338:	0010      	movs	r0, r2
2000033a:	f7ff fe72 	bl	20000022 <graphic_pixel_clear>
	for(int i = 0; i < numpixels; i++)
2000033e:	697b      	ldr	r3, [r7, #20]
20000340:	3301      	adds	r3, #1
20000342:	617b      	str	r3, [r7, #20]
20000344:	697a      	ldr	r2, [r7, #20]
20000346:	693b      	ldr	r3, [r7, #16]
20000348:	429a      	cmp	r2, r3
2000034a:	dbc8      	blt.n	200002de <clear_object+0x16>
	}
}
2000034c:	46c0      	nop			; (mov r8, r8)
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	46bd      	mov	sp, r7
20000352:	b007      	add	sp, #28
20000354:	bd90      	pop	{r4, r7, pc}
20000356:	46c0      	nop			; (mov r8, r8)
20000358:	200007f8 	strdcs	r0, [r0], -r8

2000035c <set_object_speed>:

void set_object_speed(POBJECT obj, int x, int y)
{
2000035c:	b580      	push	{r7, lr}
2000035e:	b084      	sub	sp, #16
20000360:	af00      	add	r7, sp, #0
20000362:	60f8      	str	r0, [r7, #12]
20000364:	60b9      	str	r1, [r7, #8]
20000366:	607a      	str	r2, [r7, #4]
	obj -> dirx = x;
20000368:	68fb      	ldr	r3, [r7, #12]
2000036a:	68ba      	ldr	r2, [r7, #8]
2000036c:	605a      	str	r2, [r3, #4]
	obj -> diry = y;
2000036e:	68fb      	ldr	r3, [r7, #12]
20000370:	687a      	ldr	r2, [r7, #4]
20000372:	609a      	str	r2, [r3, #8]
}
20000374:	46c0      	nop			; (mov r8, r8)
20000376:	46bd      	mov	sp, r7
20000378:	b004      	add	sp, #16
2000037a:	bd80      	pop	{r7, pc}

2000037c <move_snakeobject>:

//snake methods
void move_snakeobject(POBJECT obj)
{
2000037c:	b580      	push	{r7, lr}
2000037e:	b084      	sub	sp, #16
20000380:	af00      	add	r7, sp, #0
20000382:	6078      	str	r0, [r7, #4]
	clear_object(obj);
20000384:	687b      	ldr	r3, [r7, #4]
20000386:	0018      	movs	r0, r3
20000388:	f7ff ff9e 	bl	200002c8 <clear_object>
	int numpixels = obj -> geo -> numpoints;
2000038c:	687b      	ldr	r3, [r7, #4]
2000038e:	681b      	ldr	r3, [r3, #0]
20000390:	681b      	ldr	r3, [r3, #0]
20000392:	60fb      	str	r3, [r7, #12]
	//deside new pos. by adding dir coordinates to list of points
	obj -> posx += obj -> dirx;
20000394:	687b      	ldr	r3, [r7, #4]
20000396:	68da      	ldr	r2, [r3, #12]
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	685b      	ldr	r3, [r3, #4]
2000039c:	18d2      	adds	r2, r2, r3
2000039e:	687b      	ldr	r3, [r7, #4]
200003a0:	60da      	str	r2, [r3, #12]
	obj -> posy += obj -> diry;
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	691a      	ldr	r2, [r3, #16]
200003a6:	687b      	ldr	r3, [r7, #4]
200003a8:	689b      	ldr	r3, [r3, #8]
200003aa:	18d2      	adds	r2, r2, r3
200003ac:	687b      	ldr	r3, [r7, #4]
200003ae:	611a      	str	r2, [r3, #16]
	
	draw_object(obj);
200003b0:	687b      	ldr	r3, [r7, #4]
200003b2:	0018      	movs	r0, r3
200003b4:	f7ff ff3e 	bl	20000234 <draw_object>
}
200003b8:	46c0      	nop			; (mov r8, r8)
200003ba:	46bd      	mov	sp, r7
200003bc:	b004      	add	sp, #16
200003be:	bd80      	pop	{r7, pc}

200003c0 <move_appleobject>:

//apple methods
void move_appleobject(POBJECT obj)
{
200003c0:	b580      	push	{r7, lr}
200003c2:	b084      	sub	sp, #16
200003c4:	af00      	add	r7, sp, #0
200003c6:	6078      	str	r0, [r7, #4]
	// moves apple object to a random position
	clear_object(obj);
200003c8:	687b      	ldr	r3, [r7, #4]
200003ca:	0018      	movs	r0, r3
200003cc:	f7ff ff7c 	bl	200002c8 <clear_object>
	int numpixels = obj -> geo -> numpoints;
200003d0:	687b      	ldr	r3, [r7, #4]
200003d2:	681b      	ldr	r3, [r3, #0]
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	60fb      	str	r3, [r7, #12]
	obj -> posx = random(0, SCREEN_WIDTH / SQUARE_WIDTH);
200003d8:	4b13      	ldr	r3, [pc, #76]	; (20000428 <move_appleobject+0x68>)
200003da:	681a      	ldr	r2, [r3, #0]
200003dc:	4b13      	ldr	r3, [pc, #76]	; (2000042c <move_appleobject+0x6c>)
200003de:	681b      	ldr	r3, [r3, #0]
200003e0:	0019      	movs	r1, r3
200003e2:	0010      	movs	r0, r2
200003e4:	f000 f918 	bl	20000618 <__divsi3>
200003e8:	0003      	movs	r3, r0
200003ea:	0019      	movs	r1, r3
200003ec:	2000      	movs	r0, #0
200003ee:	f7ff ff17 	bl	20000220 <random>
200003f2:	0002      	movs	r2, r0
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	60da      	str	r2, [r3, #12]
	obj -> posy = random(0, SCREEN_WIDTH / SQUARE_WIDTH);
200003f8:	4b0b      	ldr	r3, [pc, #44]	; (20000428 <move_appleobject+0x68>)
200003fa:	681a      	ldr	r2, [r3, #0]
200003fc:	4b0b      	ldr	r3, [pc, #44]	; (2000042c <move_appleobject+0x6c>)
200003fe:	681b      	ldr	r3, [r3, #0]
20000400:	0019      	movs	r1, r3
20000402:	0010      	movs	r0, r2
20000404:	f000 f908 	bl	20000618 <__divsi3>
20000408:	0003      	movs	r3, r0
2000040a:	0019      	movs	r1, r3
2000040c:	2000      	movs	r0, #0
2000040e:	f7ff ff07 	bl	20000220 <random>
20000412:	0002      	movs	r2, r0
20000414:	687b      	ldr	r3, [r7, #4]
20000416:	611a      	str	r2, [r3, #16]

	
	draw_object(obj);
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	0018      	movs	r0, r3
2000041c:	f7ff ff0a 	bl	20000234 <draw_object>
}
20000420:	46c0      	nop			; (mov r8, r8)
20000422:	46bd      	mov	sp, r7
20000424:	b004      	add	sp, #16
20000426:	bd80      	pop	{r7, pc}
20000428:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
2000042c:	200007f8 	strdcs	r0, [r0], -r8

20000430 <pixel_overlap>:
	set_object_speed
};
//DEFINED OBJ.------------------------

//FUNC.-------------------------------
int pixel_overlap(POBJECT o1, POBJECT o2) {
20000430:	b580      	push	{r7, lr}
20000432:	b088      	sub	sp, #32
20000434:	af00      	add	r7, sp, #0
20000436:	6078      	str	r0, [r7, #4]
20000438:	6039      	str	r1, [r7, #0]
  int offset1x = o1->posx;
2000043a:	687b      	ldr	r3, [r7, #4]
2000043c:	68db      	ldr	r3, [r3, #12]
2000043e:	617b      	str	r3, [r7, #20]
  int offset1y = o1->posy;
20000440:	687b      	ldr	r3, [r7, #4]
20000442:	691b      	ldr	r3, [r3, #16]
20000444:	613b      	str	r3, [r7, #16]
  int offset2x = o2->posx;
20000446:	683b      	ldr	r3, [r7, #0]
20000448:	68db      	ldr	r3, [r3, #12]
2000044a:	60fb      	str	r3, [r7, #12]
  int offset2y = o2->posy;
2000044c:	683b      	ldr	r3, [r7, #0]
2000044e:	691b      	ldr	r3, [r3, #16]
20000450:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < o1->geo->numpoints; i++) {
20000452:	2300      	movs	r3, #0
20000454:	61fb      	str	r3, [r7, #28]
20000456:	e040      	b.n	200004da <pixel_overlap+0xaa>
    for (int j = 0; j < o2-> geo->numpoints; j++)
20000458:	2300      	movs	r3, #0
2000045a:	61bb      	str	r3, [r7, #24]
2000045c:	e034      	b.n	200004c8 <pixel_overlap+0x98>
      if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
2000045e:	687b      	ldr	r3, [r7, #4]
20000460:	681a      	ldr	r2, [r3, #0]
20000462:	69fb      	ldr	r3, [r7, #28]
20000464:	3304      	adds	r3, #4
20000466:	005b      	lsls	r3, r3, #1
20000468:	18d3      	adds	r3, r2, r3
2000046a:	3304      	adds	r3, #4
2000046c:	781b      	ldrb	r3, [r3, #0]
2000046e:	001a      	movs	r2, r3
20000470:	697b      	ldr	r3, [r7, #20]
20000472:	18d2      	adds	r2, r2, r3
20000474:	683b      	ldr	r3, [r7, #0]
20000476:	6819      	ldr	r1, [r3, #0]
20000478:	69bb      	ldr	r3, [r7, #24]
2000047a:	3304      	adds	r3, #4
2000047c:	005b      	lsls	r3, r3, #1
2000047e:	18cb      	adds	r3, r1, r3
20000480:	3304      	adds	r3, #4
20000482:	781b      	ldrb	r3, [r3, #0]
20000484:	0019      	movs	r1, r3
20000486:	68fb      	ldr	r3, [r7, #12]
20000488:	18cb      	adds	r3, r1, r3
2000048a:	429a      	cmp	r2, r3
2000048c:	d119      	bne.n	200004c2 <pixel_overlap+0x92>
        (offset1y + o1->geo->px[i].y == offset2y + o2->geo->px[j].y)) return 1;
2000048e:	687b      	ldr	r3, [r7, #4]
20000490:	681a      	ldr	r2, [r3, #0]
20000492:	69fb      	ldr	r3, [r7, #28]
20000494:	3304      	adds	r3, #4
20000496:	005b      	lsls	r3, r3, #1
20000498:	18d3      	adds	r3, r2, r3
2000049a:	3305      	adds	r3, #5
2000049c:	781b      	ldrb	r3, [r3, #0]
2000049e:	001a      	movs	r2, r3
200004a0:	693b      	ldr	r3, [r7, #16]
200004a2:	18d2      	adds	r2, r2, r3
200004a4:	683b      	ldr	r3, [r7, #0]
200004a6:	6819      	ldr	r1, [r3, #0]
200004a8:	69bb      	ldr	r3, [r7, #24]
200004aa:	3304      	adds	r3, #4
200004ac:	005b      	lsls	r3, r3, #1
200004ae:	18cb      	adds	r3, r1, r3
200004b0:	3305      	adds	r3, #5
200004b2:	781b      	ldrb	r3, [r3, #0]
200004b4:	0019      	movs	r1, r3
200004b6:	68bb      	ldr	r3, [r7, #8]
200004b8:	18cb      	adds	r3, r1, r3
      if ((offset1x + o1->geo->px[i].x == offset2x + o2->geo->px[j].x) &&
200004ba:	429a      	cmp	r2, r3
200004bc:	d101      	bne.n	200004c2 <pixel_overlap+0x92>
        (offset1y + o1->geo->px[i].y == offset2y + o2->geo->px[j].y)) return 1;
200004be:	2301      	movs	r3, #1
200004c0:	e012      	b.n	200004e8 <pixel_overlap+0xb8>
    for (int j = 0; j < o2-> geo->numpoints; j++)
200004c2:	69bb      	ldr	r3, [r7, #24]
200004c4:	3301      	adds	r3, #1
200004c6:	61bb      	str	r3, [r7, #24]
200004c8:	683b      	ldr	r3, [r7, #0]
200004ca:	681b      	ldr	r3, [r3, #0]
200004cc:	681b      	ldr	r3, [r3, #0]
200004ce:	69ba      	ldr	r2, [r7, #24]
200004d0:	429a      	cmp	r2, r3
200004d2:	dbc4      	blt.n	2000045e <pixel_overlap+0x2e>
  for (int i = 0; i < o1->geo->numpoints; i++) {
200004d4:	69fb      	ldr	r3, [r7, #28]
200004d6:	3301      	adds	r3, #1
200004d8:	61fb      	str	r3, [r7, #28]
200004da:	687b      	ldr	r3, [r7, #4]
200004dc:	681b      	ldr	r3, [r3, #0]
200004de:	681b      	ldr	r3, [r3, #0]
200004e0:	69fa      	ldr	r2, [r7, #28]
200004e2:	429a      	cmp	r2, r3
200004e4:	dbb8      	blt.n	20000458 <pixel_overlap+0x28>
  }
  return 0;
200004e6:	2300      	movs	r3, #0
}
200004e8:	0018      	movs	r0, r3
200004ea:	46bd      	mov	sp, r7
200004ec:	b008      	add	sp, #32
200004ee:	bd80      	pop	{r7, pc}

200004f0 <object_collides>:

char object_collides(POBJECT o1, POBJECT o2)
{	
200004f0:	b580      	push	{r7, lr}
200004f2:	b082      	sub	sp, #8
200004f4:	af00      	add	r7, sp, #0
200004f6:	6078      	str	r0, [r7, #4]
200004f8:	6039      	str	r1, [r7, #0]
	// objects collides
	if (o1 -> posx == o2 -> posx && o1->posy == o2->posy) {
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	68da      	ldr	r2, [r3, #12]
200004fe:	683b      	ldr	r3, [r7, #0]
20000500:	68db      	ldr	r3, [r3, #12]
20000502:	429a      	cmp	r2, r3
20000504:	d107      	bne.n	20000516 <object_collides+0x26>
20000506:	687b      	ldr	r3, [r7, #4]
20000508:	691a      	ldr	r2, [r3, #16]
2000050a:	683b      	ldr	r3, [r7, #0]
2000050c:	691b      	ldr	r3, [r3, #16]
2000050e:	429a      	cmp	r2, r3
20000510:	d101      	bne.n	20000516 <object_collides+0x26>
		return 1;
20000512:	2301      	movs	r3, #1
20000514:	e01a      	b.n	2000054c <object_collides+0x5c>
	}
	
	// creature outside bounds (very specific)
	if  (o2 -> posx < 1 ||    
20000516:	683b      	ldr	r3, [r7, #0]
20000518:	68db      	ldr	r3, [r3, #12]
2000051a:	2b00      	cmp	r3, #0
2000051c:	dd13      	ble.n	20000546 <object_collides+0x56>
		128 < o2 -> posx + o2 -> geo -> sizex ||
2000051e:	683b      	ldr	r3, [r7, #0]
20000520:	68da      	ldr	r2, [r3, #12]
20000522:	683b      	ldr	r3, [r7, #0]
20000524:	681b      	ldr	r3, [r3, #0]
20000526:	685b      	ldr	r3, [r3, #4]
20000528:	18d3      	adds	r3, r2, r3
	if  (o2 -> posx < 1 ||    
2000052a:	2b80      	cmp	r3, #128	; 0x80
2000052c:	dc0b      	bgt.n	20000546 <object_collides+0x56>
		o2 -> posy < 1 ||    
2000052e:	683b      	ldr	r3, [r7, #0]
20000530:	691b      	ldr	r3, [r3, #16]
		128 < o2 -> posx + o2 -> geo -> sizex ||
20000532:	2b00      	cmp	r3, #0
20000534:	dd07      	ble.n	20000546 <object_collides+0x56>
		64 < o2 -> posy + o2 -> geo -> sizey)
20000536:	683b      	ldr	r3, [r7, #0]
20000538:	691a      	ldr	r2, [r3, #16]
2000053a:	683b      	ldr	r3, [r7, #0]
2000053c:	681b      	ldr	r3, [r3, #0]
2000053e:	689b      	ldr	r3, [r3, #8]
20000540:	18d3      	adds	r3, r2, r3
		o2 -> posy < 1 ||    
20000542:	2b40      	cmp	r3, #64	; 0x40
20000544:	dd01      	ble.n	2000054a <object_collides+0x5a>
			return 1;
20000546:	2301      	movs	r3, #1
20000548:	e000      	b.n	2000054c <object_collides+0x5c>
	return 0;
2000054a:	2300      	movs	r3, #0
}
2000054c:	0018      	movs	r0, r3
2000054e:	46bd      	mov	sp, r7
20000550:	b002      	add	sp, #8
20000552:	bd80      	pop	{r7, pc}

20000554 <main>:
//FUNC.--------------------------------

//MAIN------------------------------
void main(void)
{
20000554:	b590      	push	{r4, r7, lr}
20000556:	b085      	sub	sp, #20
20000558:	af00      	add	r7, sp, #0
	char c;
	POBJECT appleobj = &apple;
2000055a:	4b2d      	ldr	r3, [pc, #180]	; (20000610 <main+0xbc>)
2000055c:	60fb      	str	r3, [r7, #12]
	POBJECT snakeobj = &snake;
2000055e:	4b2d      	ldr	r3, [pc, #180]	; (20000614 <main+0xc0>)
20000560:	60bb      	str	r3, [r7, #8]
	init_app();
20000562:	f7ff fd61 	bl	20000028 <init_app>
	graphic_initalize();
20000566:	f7ff fd53 	bl	20000010 <graphic_initalize>
	graphic_clear_screen();
2000056a:	f7ff fd57 	bl	2000001c <graphic_clear_screen>
	appleobj -> move(appleobj); // puts apple at random location
2000056e:	68fb      	ldr	r3, [r7, #12]
20000570:	69db      	ldr	r3, [r3, #28]
20000572:	68fa      	ldr	r2, [r7, #12]
20000574:	0010      	movs	r0, r2
20000576:	4798      	blx	r3
	
	while (1) {
		snakeobj -> move(snakeobj);
20000578:	68bb      	ldr	r3, [r7, #8]
2000057a:	69db      	ldr	r3, [r3, #28]
2000057c:	68ba      	ldr	r2, [r7, #8]
2000057e:	0010      	movs	r0, r2
20000580:	4798      	blx	r3
		appleobj -> draw(appleobj);
20000582:	68fb      	ldr	r3, [r7, #12]
20000584:	695b      	ldr	r3, [r3, #20]
20000586:	68fa      	ldr	r2, [r7, #12]
20000588:	0010      	movs	r0, r2
2000058a:	4798      	blx	r3
		c = keyb();
2000058c:	1dfc      	adds	r4, r7, #7
2000058e:	f7ff fe13 	bl	200001b8 <keyb>
20000592:	0003      	movs	r3, r0
20000594:	7023      	strb	r3, [r4, #0]
		
		
		switch (c) { // movement
20000596:	1dfb      	adds	r3, r7, #7
20000598:	781b      	ldrb	r3, [r3, #0]
2000059a:	2b08      	cmp	r3, #8
2000059c:	d01f      	beq.n	200005de <main+0x8a>
2000059e:	dc25      	bgt.n	200005ec <main+0x98>
200005a0:	2b06      	cmp	r3, #6
200005a2:	d005      	beq.n	200005b0 <main+0x5c>
200005a4:	dc22      	bgt.n	200005ec <main+0x98>
200005a6:	2b02      	cmp	r3, #2
200005a8:	d011      	beq.n	200005ce <main+0x7a>
200005aa:	2b04      	cmp	r3, #4
200005ac:	d007      	beq.n	200005be <main+0x6a>
200005ae:	e01d      	b.n	200005ec <main+0x98>
			// right
			case 6: snakeobj  -> set_speed(snakeobj, MOVE_SPEED, 0); break;
200005b0:	68bb      	ldr	r3, [r7, #8]
200005b2:	6a1b      	ldr	r3, [r3, #32]
200005b4:	68b8      	ldr	r0, [r7, #8]
200005b6:	2200      	movs	r2, #0
200005b8:	2101      	movs	r1, #1
200005ba:	4798      	blx	r3
200005bc:	e016      	b.n	200005ec <main+0x98>
			// left
			case 4: snakeobj  -> set_speed(snakeobj, -MOVE_SPEED, 0); break;
200005be:	68bb      	ldr	r3, [r7, #8]
200005c0:	6a1b      	ldr	r3, [r3, #32]
200005c2:	2201      	movs	r2, #1
200005c4:	4251      	negs	r1, r2
200005c6:	68b8      	ldr	r0, [r7, #8]
200005c8:	2200      	movs	r2, #0
200005ca:	4798      	blx	r3
200005cc:	e00e      	b.n	200005ec <main+0x98>
			// up
			case 2: snakeobj  -> set_speed(snakeobj, 0, -MOVE_SPEED); break;
200005ce:	68bb      	ldr	r3, [r7, #8]
200005d0:	6a1b      	ldr	r3, [r3, #32]
200005d2:	2201      	movs	r2, #1
200005d4:	4252      	negs	r2, r2
200005d6:	68b8      	ldr	r0, [r7, #8]
200005d8:	2100      	movs	r1, #0
200005da:	4798      	blx	r3
200005dc:	e006      	b.n	200005ec <main+0x98>
			// down
			case 8: snakeobj  -> set_speed(snakeobj, 0, MOVE_SPEED); break;
200005de:	68bb      	ldr	r3, [r7, #8]
200005e0:	6a1b      	ldr	r3, [r3, #32]
200005e2:	68b8      	ldr	r0, [r7, #8]
200005e4:	2201      	movs	r2, #1
200005e6:	2100      	movs	r1, #0
200005e8:	4798      	blx	r3
200005ea:	46c0      	nop			; (mov r8, r8)
		}
		
		if (object_collides(appleobj, snakeobj)) {
200005ec:	68ba      	ldr	r2, [r7, #8]
200005ee:	68fb      	ldr	r3, [r7, #12]
200005f0:	0011      	movs	r1, r2
200005f2:	0018      	movs	r0, r3
200005f4:	f7ff ff7c 	bl	200004f0 <object_collides>
200005f8:	1e03      	subs	r3, r0, #0
200005fa:	d004      	beq.n	20000606 <main+0xb2>
			appleobj -> posx = appleobj -> posx + 3;
200005fc:	68fb      	ldr	r3, [r7, #12]
200005fe:	68db      	ldr	r3, [r3, #12]
20000600:	1cda      	adds	r2, r3, #3
20000602:	68fb      	ldr	r3, [r7, #12]
20000604:	60da      	str	r2, [r3, #12]
			
			// appleobj -> move(appleobj); // puts apple at random location
		}
		delay_milli(1);
20000606:	2001      	movs	r0, #1
20000608:	f7ff fd67 	bl	200000da <delay_milli>
		snakeobj -> move(snakeobj);
2000060c:	e7b4      	b.n	20000578 <main+0x24>
2000060e:	46c0      	nop			; (mov r8, r8)
20000610:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
20000614:	20000844 	andcs	r0, r0, r4, asr #16

20000618 <__divsi3>:
20000618:	4603      	mov	r3, r0
2000061a:	430b      	orrs	r3, r1
2000061c:	d47f      	bmi.n	2000071e <__divsi3+0x106>
2000061e:	2200      	movs	r2, #0
20000620:	0843      	lsrs	r3, r0, #1
20000622:	428b      	cmp	r3, r1
20000624:	d374      	bcc.n	20000710 <__divsi3+0xf8>
20000626:	0903      	lsrs	r3, r0, #4
20000628:	428b      	cmp	r3, r1
2000062a:	d35f      	bcc.n	200006ec <__divsi3+0xd4>
2000062c:	0a03      	lsrs	r3, r0, #8
2000062e:	428b      	cmp	r3, r1
20000630:	d344      	bcc.n	200006bc <__divsi3+0xa4>
20000632:	0b03      	lsrs	r3, r0, #12
20000634:	428b      	cmp	r3, r1
20000636:	d328      	bcc.n	2000068a <__divsi3+0x72>
20000638:	0c03      	lsrs	r3, r0, #16
2000063a:	428b      	cmp	r3, r1
2000063c:	d30d      	bcc.n	2000065a <__divsi3+0x42>
2000063e:	22ff      	movs	r2, #255	; 0xff
20000640:	0209      	lsls	r1, r1, #8
20000642:	ba12      	rev	r2, r2
20000644:	0c03      	lsrs	r3, r0, #16
20000646:	428b      	cmp	r3, r1
20000648:	d302      	bcc.n	20000650 <__divsi3+0x38>
2000064a:	1212      	asrs	r2, r2, #8
2000064c:	0209      	lsls	r1, r1, #8
2000064e:	d065      	beq.n	2000071c <__divsi3+0x104>
20000650:	0b03      	lsrs	r3, r0, #12
20000652:	428b      	cmp	r3, r1
20000654:	d319      	bcc.n	2000068a <__divsi3+0x72>
20000656:	e000      	b.n	2000065a <__divsi3+0x42>
20000658:	0a09      	lsrs	r1, r1, #8
2000065a:	0bc3      	lsrs	r3, r0, #15
2000065c:	428b      	cmp	r3, r1
2000065e:	d301      	bcc.n	20000664 <__divsi3+0x4c>
20000660:	03cb      	lsls	r3, r1, #15
20000662:	1ac0      	subs	r0, r0, r3
20000664:	4152      	adcs	r2, r2
20000666:	0b83      	lsrs	r3, r0, #14
20000668:	428b      	cmp	r3, r1
2000066a:	d301      	bcc.n	20000670 <__divsi3+0x58>
2000066c:	038b      	lsls	r3, r1, #14
2000066e:	1ac0      	subs	r0, r0, r3
20000670:	4152      	adcs	r2, r2
20000672:	0b43      	lsrs	r3, r0, #13
20000674:	428b      	cmp	r3, r1
20000676:	d301      	bcc.n	2000067c <__divsi3+0x64>
20000678:	034b      	lsls	r3, r1, #13
2000067a:	1ac0      	subs	r0, r0, r3
2000067c:	4152      	adcs	r2, r2
2000067e:	0b03      	lsrs	r3, r0, #12
20000680:	428b      	cmp	r3, r1
20000682:	d301      	bcc.n	20000688 <__divsi3+0x70>
20000684:	030b      	lsls	r3, r1, #12
20000686:	1ac0      	subs	r0, r0, r3
20000688:	4152      	adcs	r2, r2
2000068a:	0ac3      	lsrs	r3, r0, #11
2000068c:	428b      	cmp	r3, r1
2000068e:	d301      	bcc.n	20000694 <__divsi3+0x7c>
20000690:	02cb      	lsls	r3, r1, #11
20000692:	1ac0      	subs	r0, r0, r3
20000694:	4152      	adcs	r2, r2
20000696:	0a83      	lsrs	r3, r0, #10
20000698:	428b      	cmp	r3, r1
2000069a:	d301      	bcc.n	200006a0 <__divsi3+0x88>
2000069c:	028b      	lsls	r3, r1, #10
2000069e:	1ac0      	subs	r0, r0, r3
200006a0:	4152      	adcs	r2, r2
200006a2:	0a43      	lsrs	r3, r0, #9
200006a4:	428b      	cmp	r3, r1
200006a6:	d301      	bcc.n	200006ac <__divsi3+0x94>
200006a8:	024b      	lsls	r3, r1, #9
200006aa:	1ac0      	subs	r0, r0, r3
200006ac:	4152      	adcs	r2, r2
200006ae:	0a03      	lsrs	r3, r0, #8
200006b0:	428b      	cmp	r3, r1
200006b2:	d301      	bcc.n	200006b8 <__divsi3+0xa0>
200006b4:	020b      	lsls	r3, r1, #8
200006b6:	1ac0      	subs	r0, r0, r3
200006b8:	4152      	adcs	r2, r2
200006ba:	d2cd      	bcs.n	20000658 <__divsi3+0x40>
200006bc:	09c3      	lsrs	r3, r0, #7
200006be:	428b      	cmp	r3, r1
200006c0:	d301      	bcc.n	200006c6 <__divsi3+0xae>
200006c2:	01cb      	lsls	r3, r1, #7
200006c4:	1ac0      	subs	r0, r0, r3
200006c6:	4152      	adcs	r2, r2
200006c8:	0983      	lsrs	r3, r0, #6
200006ca:	428b      	cmp	r3, r1
200006cc:	d301      	bcc.n	200006d2 <__divsi3+0xba>
200006ce:	018b      	lsls	r3, r1, #6
200006d0:	1ac0      	subs	r0, r0, r3
200006d2:	4152      	adcs	r2, r2
200006d4:	0943      	lsrs	r3, r0, #5
200006d6:	428b      	cmp	r3, r1
200006d8:	d301      	bcc.n	200006de <__divsi3+0xc6>
200006da:	014b      	lsls	r3, r1, #5
200006dc:	1ac0      	subs	r0, r0, r3
200006de:	4152      	adcs	r2, r2
200006e0:	0903      	lsrs	r3, r0, #4
200006e2:	428b      	cmp	r3, r1
200006e4:	d301      	bcc.n	200006ea <__divsi3+0xd2>
200006e6:	010b      	lsls	r3, r1, #4
200006e8:	1ac0      	subs	r0, r0, r3
200006ea:	4152      	adcs	r2, r2
200006ec:	08c3      	lsrs	r3, r0, #3
200006ee:	428b      	cmp	r3, r1
200006f0:	d301      	bcc.n	200006f6 <__divsi3+0xde>
200006f2:	00cb      	lsls	r3, r1, #3
200006f4:	1ac0      	subs	r0, r0, r3
200006f6:	4152      	adcs	r2, r2
200006f8:	0883      	lsrs	r3, r0, #2
200006fa:	428b      	cmp	r3, r1
200006fc:	d301      	bcc.n	20000702 <__divsi3+0xea>
200006fe:	008b      	lsls	r3, r1, #2
20000700:	1ac0      	subs	r0, r0, r3
20000702:	4152      	adcs	r2, r2
20000704:	0843      	lsrs	r3, r0, #1
20000706:	428b      	cmp	r3, r1
20000708:	d301      	bcc.n	2000070e <__divsi3+0xf6>
2000070a:	004b      	lsls	r3, r1, #1
2000070c:	1ac0      	subs	r0, r0, r3
2000070e:	4152      	adcs	r2, r2
20000710:	1a41      	subs	r1, r0, r1
20000712:	d200      	bcs.n	20000716 <__divsi3+0xfe>
20000714:	4601      	mov	r1, r0
20000716:	4152      	adcs	r2, r2
20000718:	4610      	mov	r0, r2
2000071a:	4770      	bx	lr
2000071c:	e05d      	b.n	200007da <__divsi3+0x1c2>
2000071e:	0fca      	lsrs	r2, r1, #31
20000720:	d000      	beq.n	20000724 <__divsi3+0x10c>
20000722:	4249      	negs	r1, r1
20000724:	1003      	asrs	r3, r0, #32
20000726:	d300      	bcc.n	2000072a <__divsi3+0x112>
20000728:	4240      	negs	r0, r0
2000072a:	4053      	eors	r3, r2
2000072c:	2200      	movs	r2, #0
2000072e:	469c      	mov	ip, r3
20000730:	0903      	lsrs	r3, r0, #4
20000732:	428b      	cmp	r3, r1
20000734:	d32d      	bcc.n	20000792 <__divsi3+0x17a>
20000736:	0a03      	lsrs	r3, r0, #8
20000738:	428b      	cmp	r3, r1
2000073a:	d312      	bcc.n	20000762 <__divsi3+0x14a>
2000073c:	22fc      	movs	r2, #252	; 0xfc
2000073e:	0189      	lsls	r1, r1, #6
20000740:	ba12      	rev	r2, r2
20000742:	0a03      	lsrs	r3, r0, #8
20000744:	428b      	cmp	r3, r1
20000746:	d30c      	bcc.n	20000762 <__divsi3+0x14a>
20000748:	0189      	lsls	r1, r1, #6
2000074a:	1192      	asrs	r2, r2, #6
2000074c:	428b      	cmp	r3, r1
2000074e:	d308      	bcc.n	20000762 <__divsi3+0x14a>
20000750:	0189      	lsls	r1, r1, #6
20000752:	1192      	asrs	r2, r2, #6
20000754:	428b      	cmp	r3, r1
20000756:	d304      	bcc.n	20000762 <__divsi3+0x14a>
20000758:	0189      	lsls	r1, r1, #6
2000075a:	d03a      	beq.n	200007d2 <__divsi3+0x1ba>
2000075c:	1192      	asrs	r2, r2, #6
2000075e:	e000      	b.n	20000762 <__divsi3+0x14a>
20000760:	0989      	lsrs	r1, r1, #6
20000762:	09c3      	lsrs	r3, r0, #7
20000764:	428b      	cmp	r3, r1
20000766:	d301      	bcc.n	2000076c <__divsi3+0x154>
20000768:	01cb      	lsls	r3, r1, #7
2000076a:	1ac0      	subs	r0, r0, r3
2000076c:	4152      	adcs	r2, r2
2000076e:	0983      	lsrs	r3, r0, #6
20000770:	428b      	cmp	r3, r1
20000772:	d301      	bcc.n	20000778 <__divsi3+0x160>
20000774:	018b      	lsls	r3, r1, #6
20000776:	1ac0      	subs	r0, r0, r3
20000778:	4152      	adcs	r2, r2
2000077a:	0943      	lsrs	r3, r0, #5
2000077c:	428b      	cmp	r3, r1
2000077e:	d301      	bcc.n	20000784 <__divsi3+0x16c>
20000780:	014b      	lsls	r3, r1, #5
20000782:	1ac0      	subs	r0, r0, r3
20000784:	4152      	adcs	r2, r2
20000786:	0903      	lsrs	r3, r0, #4
20000788:	428b      	cmp	r3, r1
2000078a:	d301      	bcc.n	20000790 <__divsi3+0x178>
2000078c:	010b      	lsls	r3, r1, #4
2000078e:	1ac0      	subs	r0, r0, r3
20000790:	4152      	adcs	r2, r2
20000792:	08c3      	lsrs	r3, r0, #3
20000794:	428b      	cmp	r3, r1
20000796:	d301      	bcc.n	2000079c <__divsi3+0x184>
20000798:	00cb      	lsls	r3, r1, #3
2000079a:	1ac0      	subs	r0, r0, r3
2000079c:	4152      	adcs	r2, r2
2000079e:	0883      	lsrs	r3, r0, #2
200007a0:	428b      	cmp	r3, r1
200007a2:	d301      	bcc.n	200007a8 <__divsi3+0x190>
200007a4:	008b      	lsls	r3, r1, #2
200007a6:	1ac0      	subs	r0, r0, r3
200007a8:	4152      	adcs	r2, r2
200007aa:	d2d9      	bcs.n	20000760 <__divsi3+0x148>
200007ac:	0843      	lsrs	r3, r0, #1
200007ae:	428b      	cmp	r3, r1
200007b0:	d301      	bcc.n	200007b6 <__divsi3+0x19e>
200007b2:	004b      	lsls	r3, r1, #1
200007b4:	1ac0      	subs	r0, r0, r3
200007b6:	4152      	adcs	r2, r2
200007b8:	1a41      	subs	r1, r0, r1
200007ba:	d200      	bcs.n	200007be <__divsi3+0x1a6>
200007bc:	4601      	mov	r1, r0
200007be:	4663      	mov	r3, ip
200007c0:	4152      	adcs	r2, r2
200007c2:	105b      	asrs	r3, r3, #1
200007c4:	4610      	mov	r0, r2
200007c6:	d301      	bcc.n	200007cc <__divsi3+0x1b4>
200007c8:	4240      	negs	r0, r0
200007ca:	2b00      	cmp	r3, #0
200007cc:	d500      	bpl.n	200007d0 <__divsi3+0x1b8>
200007ce:	4249      	negs	r1, r1
200007d0:	4770      	bx	lr
200007d2:	4663      	mov	r3, ip
200007d4:	105b      	asrs	r3, r3, #1
200007d6:	d300      	bcc.n	200007da <__divsi3+0x1c2>
200007d8:	4240      	negs	r0, r0
200007da:	b501      	push	{r0, lr}
200007dc:	2000      	movs	r0, #0
200007de:	f000 f805 	bl	200007ec <__aeabi_idiv0>
200007e2:	bd02      	pop	{r1, pc}

200007e4 <__aeabi_idivmod>:
200007e4:	2900      	cmp	r1, #0
200007e6:	d0f8      	beq.n	200007da <__divsi3+0x1c2>
200007e8:	e716      	b.n	20000618 <__divsi3>
200007ea:	4770      	bx	lr

200007ec <__aeabi_idiv0>:
200007ec:	4770      	bx	lr
200007ee:	46c0      	nop			; (mov r8, r8)

200007f0 <SCREEN_WIDTH>:
200007f0:	00000080 	andeq	r0, r0, r0, lsl #1

200007f4 <SCREEN_HEIGHT>:
200007f4:	00000040 	andeq	r0, r0, r0, asr #32

200007f8 <SQUARE_WIDTH>:
200007f8:	00000004 	andeq	r0, r0, r4

200007fc <snake_geometry>:
200007fc:	0000000c 	andeq	r0, r0, ip
20000800:	00000004 	andeq	r0, r0, r4
20000804:	00000004 	andeq	r0, r0, r4
20000808:	00010000 	andeq	r0, r1, r0
2000080c:	00030002 	andeq	r0, r3, r2
20000810:	01030100 	mrseq	r0, (UNDEF: 19)
20000814:	02030200 	andeq	r0, r3, #0, 4
20000818:	03010300 	movweq	r0, #4864	; 0x1300
2000081c:	03030302 	movweq	r0, #13058	; 0x3302
	...

20000844 <snake>:
20000844:	200007fc 	strdcs	r0, [r0], -ip
	...
20000850:	00000005 	andeq	r0, r0, r5
20000854:	00000002 	andeq	r0, r0, r2
20000858:	20000235 	andcs	r0, r0, r5, lsr r2
2000085c:	200002c9 	andcs	r0, r0, r9, asr #5
20000860:	2000037d 	andcs	r0, r0, sp, ror r3
20000864:	2000035d 	andcs	r0, r0, sp, asr r3

20000868 <apple_geometry>:
20000868:	0000000c 	andeq	r0, r0, ip
2000086c:	00000007 	andeq	r0, r0, r7
20000870:	00000001 	andeq	r0, r0, r1
20000874:	02000100 	andeq	r0, r0, #0, 2
20000878:	01010001 	tsteq	r1, r1
2000087c:	03010201 	movweq	r0, #4609	; 0x1201
20000880:	01020002 	tsteq	r2, r2
20000884:	03020202 	movweq	r0, #8706	; 0x2202
20000888:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200008b0 <apple>:
200008b0:	20000868 	andcs	r0, r0, r8, ror #16
200008b4:	00000004 	andeq	r0, r0, r4
200008b8:	00000001 	andeq	r0, r0, r1
200008bc:	00000001 	andeq	r0, r0, r1
200008c0:	00000003 	andeq	r0, r0, r3
200008c4:	20000235 	andcs	r0, r0, r5, lsr r2
200008c8:	200002c9 	andcs	r0, r0, r9, asr #5
200008cc:	200003c1 	andcs	r0, r0, r1, asr #7
200008d0:	2000035d 	andcs	r0, r0, sp, asr r3
200008d4:	0a030201 	beq	200c10e0 <apple+0xc0830>
200008d8:	0b060504 	bleq	20181cf0 <apple+0x181440>
200008dc:	0c090807 	stceq	8, cr0, [r9], {7}
200008e0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200008b0 <apple>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000007c8 	andeq	r0, r0, r8, asr #15
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000020a 	andeq	r0, r0, sl, lsl #4
  10:	00002e0c 	andeq	r2, r0, ip, lsl #28
  14:	00015e00 	andeq	r5, r1, r0, lsl #28
	...
  24:	01280200 			; <UNDEFINED> instruction: 0x01280200
  28:	00ff120b 	rscseq	r1, pc, fp, lsl #4
  2c:	41030000 	mrsmi	r0, (UNDEF: 3)
  30:	01000003 	tsteq	r0, r3
  34:	01040e0c 	tsteq	r4, ip, lsl #28
  38:	03000000 	movweq	r0, #0
  3c:	0000008a 	andeq	r0, r0, sl, lsl #1
  40:	0b140d01 	bleq	50344c <startup-0x1fafcbb4>
  44:	04000001 	streq	r0, [r0], #-1
  48:	0001c103 	andeq	ip, r1, r3, lsl #2
  4c:	140e0100 	strne	r0, [lr], #-256	; 0xffffff00
  50:	0000010b 	andeq	r0, r0, fp, lsl #2
  54:	02a80306 	adceq	r0, r8, #402653184	; 0x18000000
  58:	0f010000 	svceq	0x00010000
  5c:	0001040e 	andeq	r0, r1, lr, lsl #8
  60:	a7030800 	strge	r0, [r3, -r0, lsl #16]
  64:	01000001 	tsteq	r0, r1
  68:	01040e10 	tsteq	r4, r0, lsl lr
  6c:	030c0000 	movweq	r0, #49152	; 0xc000
  70:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
  74:	120f1101 	andne	r1, pc, #1073741824	; 0x40000000
  78:	10000001 	andne	r0, r0, r1
  7c:	00028603 	andeq	r8, r2, r3, lsl #12
  80:	0f120100 	svceq	0x00120100
  84:	00000112 	andeq	r0, r0, r2, lsl r1
  88:	01cb0311 	biceq	r0, fp, r1, lsl r3
  8c:	13010000 	movwne	r0, #4096	; 0x1000
  90:	00010b14 	andeq	r0, r1, r4, lsl fp
  94:	e9031200 	stmdb	r3, {r9, ip}
  98:	01000001 	tsteq	r0, r1
  9c:	01120f14 	tsteq	r2, r4, lsl pc
  a0:	03140000 	tsteq	r4, #0
  a4:	000000b4 	strheq	r0, [r0], -r4
  a8:	120f1501 	andne	r1, pc, #4194304	; 0x400000
  ac:	15000001 	strne	r0, [r0, #-1]
  b0:	0001d503 	andeq	sp, r1, r3, lsl #10
  b4:	14160100 	ldrne	r0, [r6], #-256	; 0xffffff00
  b8:	0000010b 	andeq	r0, r0, fp, lsl #2
  bc:	00800316 	addeq	r0, r0, r6, lsl r3
  c0:	17010000 	strne	r0, [r1, -r0]
  c4:	0001040e 	andeq	r0, r1, lr, lsl #8
  c8:	13031800 	movwne	r1, #14336	; 0x3800
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	010b1418 	tsteq	fp, r8, lsl r4
  d4:	031c0000 	tsteq	ip, #0
  d8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
  dc:	0b141901 	bleq	5064e8 <startup-0x1faf9b18>
  e0:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
  e4:	00012a03 	andeq	r2, r1, r3, lsl #20
  e8:	0e1a0100 	mufeqe	f0, f2, f0
  ec:	00000104 	andeq	r0, r0, r4, lsl #2
  f0:	01130320 	tsteq	r3, r0, lsr #6
  f4:	1b010000 	blne	400fc <startup-0x1ffbff04>
  f8:	0001040e 	andeq	r0, r1, lr, lsl #8
  fc:	04002400 	streq	r2, [r0], #-1024	; 0xfffffc00
 100:	00000025 	andeq	r0, r0, r5, lsr #32
 104:	73070405 	movwvc	r0, #29701	; 0x7405
 108:	05000000 	streq	r0, [r0, #-0]
 10c:	006d0702 	rsbeq	r0, sp, r2, lsl #14
 110:	01050000 	mrseq	r0, (UNDEF: 5)
 114:	0000e208 	andeq	lr, r0, r8, lsl #4
 118:	00ff0600 	rscseq	r0, pc, r0, lsl #12
 11c:	1c010000 	stcne	0, cr0, [r1], {-0}
 120:	0001250a 	andeq	r2, r1, sl, lsl #10
 124:	ff040700 			; <UNDEFINED> instruction: 0xff040700
 128:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 12c:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
 130:	3d052001 	stccc	0, cr2, [r5, #-4]
 134:	05000001 	streq	r0, [r0, #-1]
 138:	0007f003 	andeq	pc, r7, r3
 13c:	05040920 	streq	r0, [r4, #-2336]	; 0xfffff6e0
 140:	00746e69 	rsbseq	r6, r4, r9, ror #28
 144:	00013b08 	andeq	r3, r1, r8, lsl #22
 148:	05210100 	streq	r0, [r1, #-256]!	; 0xffffff00
 14c:	0000013d 	andeq	r0, r0, sp, lsr r1
 150:	07f40305 	ldrbeq	r0, [r4, r5, lsl #6]!
 154:	bc082000 	stclt	0, cr2, [r8], {-0}
 158:	01000000 	mrseq	r0, (UNDEF: 0)
 15c:	013d0522 	teqeq	sp, r2, lsr #10
 160:	03050000 	movweq	r0, #20480	; 0x5000
 164:	200007f8 	strdcs	r0, [r0], -r8
 168:	a7010202 	strge	r0, [r1, -r2, lsl #4]
 16c:	00018809 	andeq	r8, r1, r9, lsl #16
 170:	00780a00 	rsbseq	r0, r8, r0, lsl #20
 174:	1210a901 	andsne	sl, r0, #16384	; 0x4000
 178:	00000001 	andeq	r0, r0, r1
 17c:	0100790a 	tsteq	r0, sl, lsl #18
 180:	011213a9 	tsteq	r2, r9, lsr #7
 184:	00010000 	andeq	r0, r1, r0
 188:	0000d206 	andeq	sp, r0, r6, lsl #4
 18c:	03aa0100 			; <UNDEFINED> instruction: 0x03aa0100
 190:	00000168 	andeq	r0, r0, r8, ror #2
 194:	ae014802 	cdpge	8, 0, cr4, cr1, cr2, {0}
 198:	0001d109 	andeq	sp, r1, r9, lsl #2
 19c:	03470300 	movteq	r0, #29440	; 0x7300
 1a0:	b0010000 	andlt	r0, r1, r0
 1a4:	00013d06 	andeq	r3, r1, r6, lsl #26
 1a8:	bb030000 	bllt	c01b0 <startup-0x1ff3fe50>
 1ac:	01000001 	tsteq	r0, r1
 1b0:	013d06b1 	teqeq	sp, r1	; <illegal shifter operand>
 1b4:	03040000 	movweq	r0, #16384	; 0x4000
 1b8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1bc:	3d06b201 	sfmcc	f3, 1, [r6, #-4]
 1c0:	08000001 	stmdaeq	r0, {r0}
 1c4:	0078700a 	rsbseq	r7, r8, sl
 1c8:	d108b301 	tstle	r8, r1, lsl #6
 1cc:	0c000001 	stceq	0, cr0, [r0], {1}
 1d0:	01880b00 	orreq	r0, r8, r0, lsl #22
 1d4:	01e10000 	mvneq	r0, r0
 1d8:	040c0000 	streq	r0, [ip], #-0
 1dc:	1d000001 	stcne	0, cr0, [r0, #-4]
 1e0:	00010600 	andeq	r0, r1, r0, lsl #12
 1e4:	b4010000 	strlt	r0, [r1], #-0
 1e8:	00019403 	andeq	r9, r1, r3, lsl #8
 1ec:	00000600 	andeq	r0, r0, r0, lsl #12
 1f0:	b4010000 	strlt	r0, [r1], #-0
 1f4:	0001f90e 	andeq	pc, r1, lr, lsl #18
 1f8:	94040700 	strls	r0, [r4], #-1792	; 0xfffff900
 1fc:	0d000001 	stceq	0, cr0, [r0, #-4]
 200:	0000033c 	andeq	r0, r0, ip, lsr r3
 204:	10b60124 	adcsne	r0, r6, r4, lsr #2
 208:	00000282 	andeq	r0, r0, r2, lsl #5
 20c:	6f65670a 	svcvs	0x0065670a
 210:	0cb80100 	ldfeqs	f0, [r8]
 214:	000001ed 	andeq	r0, r0, sp, ror #3
 218:	00850300 	addeq	r0, r5, r0, lsl #6
 21c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
 220:	00013d06 	andeq	r3, r1, r6, lsl #26
 224:	9d030400 	cfstrsls	mvf0, [r3, #-0]
 228:	01000001 	tsteq	r0, r1
 22c:	013d0cb9 	teqeq	sp, r9	; <illegal shifter operand>
 230:	03080000 	movweq	r0, #32768	; 0x8000
 234:	000000fa 	strdeq	r0, [r0], -sl
 238:	3d06ba01 	vstrcc	s22, [r6, #-4]
 23c:	0c000001 	stceq	0, cr0, [r0], {1}
 240:	00019803 	andeq	r9, r1, r3, lsl #16
 244:	0cba0100 	ldfeqs	f0, [sl]
 248:	0000013d 	andeq	r0, r0, sp, lsr r1
 24c:	01a20310 			; <UNDEFINED> instruction: 0x01a20310
 250:	bb010000 	bllt	40258 <startup-0x1ffbfda8>
 254:	0002930a 	andeq	r9, r2, sl, lsl #6
 258:	65031400 	strvs	r1, [r3, #-1024]	; 0xfffffc00
 25c:	01000003 	tsteq	r0, r3
 260:	02930abc 	addseq	r0, r3, #188, 20	; 0xbc000
 264:	03180000 	tsteq	r8, #0
 268:	00000029 	andeq	r0, r0, r9, lsr #32
 26c:	930abd01 	movwls	fp, #44289	; 0xad01
 270:	1c000002 	stcne	0, cr0, [r0], {2}
 274:	0000f003 	andeq	pc, r0, r3
 278:	0abe0100 	beq	fef80680 <apple+0xdef7fdd0>
 27c:	000002ae 	andeq	r0, r0, lr, lsr #5
 280:	8d0e0020 	stchi	0, cr0, [lr, #-128]	; 0xffffff80
 284:	0f000002 	svceq	0x00000002
 288:	0000028d 	andeq	r0, r0, sp, lsl #5
 28c:	ff040700 			; <UNDEFINED> instruction: 0xff040700
 290:	07000001 	streq	r0, [r0, -r1]
 294:	00028204 	andeq	r8, r2, r4, lsl #4
 298:	02ae0e00 	adceq	r0, lr, #0, 28
 29c:	8d0f0000 	stchi	0, cr0, [pc, #-0]	; 2a4 <startup-0x1ffffd5c>
 2a0:	0f000002 	svceq	0x00000002
 2a4:	0000013d 	andeq	r0, r0, sp, lsr r1
 2a8:	00013d0f 	andeq	r3, r1, pc, lsl #26
 2ac:	04070000 	streq	r0, [r7], #-0
 2b0:	00000299 	muleq	r0, r9, r2
 2b4:	00036c06 	andeq	r6, r3, r6, lsl #24
 2b8:	03bf0100 			; <UNDEFINED> instruction: 0x03bf0100
 2bc:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 2c0:	00036b06 	andeq	r6, r3, r6, lsl #22
 2c4:	0cbf0100 	ldfeqs	f0, [pc]	; 2cc <startup-0x1ffffd34>
 2c8:	0000028d 	andeq	r0, r0, sp, lsl #5
 2cc:	00032d10 	andeq	r2, r3, r0, lsl sp
 2d0:	01080100 	mrseq	r0, (UNDEF: 24)
 2d4:	0001e10a 	andeq	lr, r1, sl, lsl #2
 2d8:	fc030500 	stc2	5, cr0, [r3], {-0}
 2dc:	11200007 			; <UNDEFINED> instruction: 0x11200007
 2e0:	0000018d 	andeq	r0, r0, sp, lsl #3
 2e4:	0f011501 	svceq	0x00011501
 2e8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 2ec:	08440305 	stmdaeq	r4, {r0, r2, r8, r9}^
 2f0:	11102000 	tstne	r0, r0
 2f4:	01000003 	tsteq	r0, r3
 2f8:	e10a0120 	tst	sl, r0, lsr #2
 2fc:	05000001 	streq	r0, [r0, #-1]
 300:	00086803 	andeq	r6, r8, r3, lsl #16
 304:	03511120 	cmpeq	r1, #32, 2
 308:	2a010000 	bcs	40310 <startup-0x1ffbfcf0>
 30c:	02b40f01 	adcseq	r0, r4, #1, 30
 310:	03050000 	movweq	r0, #20480	; 0x5000
 314:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 318:	0001ad12 	andeq	sl, r1, r2, lsl sp
 31c:	01560100 	cmpeq	r6, r0, lsl #2
 320:	00055406 	andeq	r5, r5, r6, lsl #8
 324:	0000c420 	andeq	ip, r0, r0, lsr #8
 328:	5e9c0100 	fmlple	f0, f4, f0
 32c:	13000003 	movwne	r0, #3
 330:	58010063 	stmdapl	r1, {r0, r1, r5, r6}
 334:	035e0701 	cmpeq	lr, #262144	; 0x40000
 338:	91020000 	mrsls	r0, (UNDEF: 2)
 33c:	00c91167 	sbceq	r1, r9, r7, ror #2
 340:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
 344:	02c00a01 	sbceq	r0, r0, #4096	; 0x1000
 348:	91020000 	mrsls	r0, (UNDEF: 2)
 34c:	02d0116c 	sbcseq	r1, r0, #108, 2
 350:	5a010000 	bpl	40358 <startup-0x1ffbfca8>
 354:	02c00a01 	sbceq	r0, r0, #4096	; 0x1000
 358:	91020000 	mrsls	r0, (UNDEF: 2)
 35c:	01050068 	tsteq	r5, r8, rrx
 360:	0000eb08 	andeq	lr, r0, r8, lsl #22
 364:	00a41400 	adceq	r1, r4, r0, lsl #8
 368:	44010000 	strmi	r0, [r1], #-0
 36c:	035e0601 	cmpeq	lr, #1048576	; 0x100000
 370:	04f00000 	ldrbteq	r0, [r0], #0
 374:	00642000 	rsbeq	r2, r4, r0
 378:	9c010000 	stcls	0, cr0, [r1], {-0}
 37c:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
 380:	00316f15 	eorseq	r6, r1, r5, lsl pc
 384:	1e014401 	cdpne	4, 0, cr4, cr1, cr1, {0}
 388:	000002c0 	andeq	r0, r0, r0, asr #5
 38c:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
 390:	0100326f 	tsteq	r0, pc, ror #4
 394:	c02a0144 	eorgt	r0, sl, r4, asr #2
 398:	02000002 	andeq	r0, r0, #2
 39c:	14007091 	strne	r7, [r0], #-145	; 0xffffff6f
 3a0:	00000105 	andeq	r0, r0, r5, lsl #2
 3a4:	05013701 	streq	r3, [r1, #-1793]	; 0xfffff8ff
 3a8:	0000013d 	andeq	r0, r0, sp, lsr r1
 3ac:	20000430 	andcs	r0, r0, r0, lsr r4
 3b0:	000000c0 	andeq	r0, r0, r0, asr #1
 3b4:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
 3b8:	6f150000 	svcvs	0x00150000
 3bc:	37010031 	smladxcc	r1, r1, r0, r0
 3c0:	02c01b01 	sbceq	r1, r0, #1024	; 0x400
 3c4:	91020000 	mrsls	r0, (UNDEF: 2)
 3c8:	326f155c 	rsbcc	r1, pc, #92, 10	; 0x17000000
 3cc:	01370100 	teqeq	r7, r0, lsl #2
 3d0:	0002c027 	andeq	ip, r2, r7, lsr #32
 3d4:	58910200 	ldmpl	r1, {r9}
 3d8:	00011811 	andeq	r1, r1, r1, lsl r8
 3dc:	01380100 	teqeq	r8, r0, lsl #2
 3e0:	00013d07 	andeq	r3, r1, r7, lsl #26
 3e4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3e8:	00012111 	andeq	r2, r1, r1, lsl r1
 3ec:	01390100 	teqeq	r9, r0, lsl #2
 3f0:	00013d07 	andeq	r3, r1, r7, lsl #26
 3f4:	68910200 	ldmvs	r1, {r9}
 3f8:	00000a11 	andeq	r0, r0, r1, lsl sl
 3fc:	013a0100 	teqeq	sl, r0, lsl #2
 400:	00013d07 	andeq	r3, r1, r7, lsl #26
 404:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 408:	00030811 	andeq	r0, r3, r1, lsl r8
 40c:	013b0100 	teqeq	fp, r0, lsl #2
 410:	00013d07 	andeq	r3, r1, r7, lsl #26
 414:	60910200 	addsvs	r0, r1, r0, lsl #4
 418:	00045216 	andeq	r5, r4, r6, lsl r2
 41c:	00009420 	andeq	r9, r0, r0, lsr #8
 420:	00691300 	rsbeq	r1, r9, r0, lsl #6
 424:	0c013c01 	stceq	12, cr3, [r1], {1}
 428:	0000013d 	andeq	r0, r0, sp, lsr r1
 42c:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 430:	20000458 	andcs	r0, r0, r8, asr r4
 434:	0000007c 	andeq	r0, r0, ip, ror r0
 438:	01006a13 	tsteq	r0, r3, lsl sl
 43c:	3d0e013d 	stfccs	f0, [lr, #-244]	; 0xffffff0c
 440:	02000001 	andeq	r0, r0, #1
 444:	00007091 	muleq	r0, r1, r0
 448:	03731700 	cmneq	r3, #0, 14
 44c:	fa010000 	blx	40454 <startup-0x1ffbfbac>
 450:	0003c006 	andeq	ip, r3, r6
 454:	00007020 	andeq	r7, r0, r0, lsr #32
 458:	7e9c0100 	fmlvce	f0, f4, f0
 45c:	18000004 	stmdane	r0, {r2}
 460:	006a626f 	rsbeq	r6, sl, pc, ror #4
 464:	c01ffa01 	andsgt	pc, pc, r1, lsl #20
 468:	02000002 	andeq	r0, r0, #2
 46c:	d8196c91 	ldmdale	r9, {r0, r4, r7, sl, fp, sp, lr}
 470:	01000000 	mrseq	r0, (UNDEF: 0)
 474:	013d06fe 	teqeq	sp, lr	; <illegal shifter operand>
 478:	91020000 	mrsls	r0, (UNDEF: 2)
 47c:	18170074 	ldmdane	r7, {r2, r4, r5, r6}
 480:	01000000 	mrseq	r0, (UNDEF: 0)
 484:	037c06ee 	cmneq	ip, #249561088	; 0xee00000
 488:	00442000 	subeq	r2, r4, r0
 48c:	9c010000 	stcls	0, cr0, [r1], {-0}
 490:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
 494:	6a626f18 	bvs	189c0fc <startup-0x1e763f04>
 498:	1fee0100 	svcne	0x00ee0100
 49c:	000002c0 	andeq	r0, r0, r0, asr #5
 4a0:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
 4a4:	000000d8 	ldrdeq	r0, [r0], -r8
 4a8:	3d06f101 	stfccd	f7, [r6, #-4]
 4ac:	02000001 	andeq	r0, r0, #1
 4b0:	1a007491 	bne	1d6fc <startup-0x1ffe2904>
 4b4:	000002d9 	ldrdeq	r0, [r0], -r9
 4b8:	5c06e701 	stcpl	7, cr14, [r6], {1}
 4bc:	20200003 	eorcs	r0, r0, r3
 4c0:	01000000 	mrseq	r0, (UNDEF: 0)
 4c4:	0004f39c 	muleq	r4, ip, r3
 4c8:	626f1800 	rsbvs	r1, pc, #0, 16
 4cc:	e701006a 	str	r0, [r1, -sl, rrx]
 4d0:	0002c01f 	andeq	ip, r2, pc, lsl r0
 4d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 4d8:	01007818 	tsteq	r0, r8, lsl r8
 4dc:	013d28e7 	teqeq	sp, r7, ror #17
 4e0:	91020000 	mrsls	r0, (UNDEF: 2)
 4e4:	00791870 	rsbseq	r1, r9, r0, ror r8
 4e8:	3d2fe701 	stccc	7, cr14, [pc, #-4]!	; 4ec <startup-0x1ffffb14>
 4ec:	02000001 	andeq	r0, r0, #1
 4f0:	17006c91 			; <UNDEFINED> instruction: 0x17006c91
 4f4:	00000320 	andeq	r0, r0, r0, lsr #6
 4f8:	c806dc01 	stmdagt	r6, {r0, sl, fp, ip, lr, pc}
 4fc:	94200002 	strtls	r0, [r0], #-2
 500:	01000000 	mrseq	r0, (UNDEF: 0)
 504:	0005639c 	muleq	r5, ip, r3
 508:	626f1800 	rsbvs	r1, pc, #0, 16
 50c:	dc01006a 	stcle	0, cr0, [r1], {106}	; 0x6a
 510:	0002c01b 	andeq	ip, r2, fp, lsl r0
 514:	5c910200 	lfmpl	f0, 4, [r1], {0}
 518:	0000d819 	andeq	sp, r0, r9, lsl r8
 51c:	06de0100 	ldrbeq	r0, [lr], r0, lsl #2
 520:	0000013d 	andeq	r0, r0, sp, lsr r1
 524:	16689102 	strbtne	r9, [r8], -r2, lsl #2
 528:	200002d8 	ldrdcs	r0, [r0], -r8
 52c:	00000074 	andeq	r0, r0, r4, ror r0
 530:	0100691b 	tsteq	r0, fp, lsl r9
 534:	013d0adf 	teqeq	sp, pc	; <illegal shifter operand>
 538:	91020000 	mrsls	r0, (UNDEF: 2)
 53c:	02de166c 	sbcseq	r1, lr, #108, 12	; 0x6c00000
 540:	00602000 	rsbeq	r2, r0, r0
 544:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 548:	11e10100 	mvnne	r0, r0, lsl #2
 54c:	00000112 	andeq	r0, r0, r2, lsl r1
 550:	1b679102 	blne	19e4960 <startup-0x1e61b6a0>
 554:	e2010079 	and	r0, r1, #121	; 0x79
 558:	00011211 	andeq	r1, r1, r1, lsl r2
 55c:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 560:	17000000 	strne	r0, [r0, -r0]
 564:	00000091 	muleq	r0, r1, r0
 568:	3406d101 	strcc	sp, [r6], #-257	; 0xfffffeff
 56c:	94200002 	strtls	r0, [r0], #-2
 570:	01000000 	mrseq	r0, (UNDEF: 0)
 574:	0005d39c 	muleq	r5, ip, r3
 578:	626f1800 	rsbvs	r1, pc, #0, 16
 57c:	d101006a 	tstle	r1, sl, rrx
 580:	0002c01a 	andeq	ip, r2, sl, lsl r0
 584:	5c910200 	lfmpl	f0, 4, [r1], {0}
 588:	0000d819 	andeq	sp, r0, r9, lsl r8
 58c:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
 590:	0000013d 	andeq	r0, r0, sp, lsr r1
 594:	16689102 	strbtne	r9, [r8], -r2, lsl #2
 598:	20000244 	andcs	r0, r0, r4, asr #4
 59c:	00000074 	andeq	r0, r0, r4, ror r0
 5a0:	0100691b 	tsteq	r0, fp, lsl r9
 5a4:	013d0ad4 	teqeq	sp, r4	; <illegal shifter operand>
 5a8:	91020000 	mrsls	r0, (UNDEF: 2)
 5ac:	024a166c 	subeq	r1, sl, #108, 12	; 0x6c00000
 5b0:	00602000 	rsbeq	r2, r0, r0
 5b4:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
 5b8:	11d60100 	bicsne	r0, r6, r0, lsl #2
 5bc:	00000112 	andeq	r0, r0, r2, lsl r1
 5c0:	1b679102 	blne	19e49d0 <startup-0x1e61b630>
 5c4:	d7010079 	smlsdxle	r1, r9, r0, r0
 5c8:	00011211 	andeq	r1, r1, r1, lsl r2
 5cc:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 5d0:	1c000000 	stcne	0, cr0, [r0], {-0}
 5d4:	0000009d 	muleq	r0, sp, r0
 5d8:	3d05c301 	stccc	3, cr12, [r5, #-4]
 5dc:	20000001 	andcs	r0, r0, r1
 5e0:	14200002 	strtne	r0, [r0], #-2
 5e4:	01000000 	mrseq	r0, (UNDEF: 0)
 5e8:	00060c9c 	muleq	r6, ip, ip
 5ec:	696d1800 	stmdbvs	sp!, {fp, ip}^
 5f0:	c301006e 	movwgt	r0, #4206	; 0x106e
 5f4:	00013d10 	andeq	r3, r1, r0, lsl sp
 5f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5fc:	78616d18 	stmdavc	r1!, {r3, r4, r8, sl, fp, sp, lr}^
 600:	19c30100 	stmibne	r3, {r8}^
 604:	0000013d 	andeq	r0, r0, sp, lsr r1
 608:	00709102 	rsbseq	r9, r0, r2, lsl #2
 60c:	0001931d 	andeq	r9, r1, sp, lsl r3
 610:	0f950100 	svceq	0x00950100
 614:	00000112 	andeq	r0, r0, r2, lsl r1
 618:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 61c:	00000068 	andeq	r0, r0, r8, rrx
 620:	06549c01 	ldrbeq	r9, [r4], -r1, lsl #24
 624:	6b1b0000 	blvs	6c062c <startup-0x1f93f9d4>
 628:	01007965 	tsteq	r0, r5, ror #18
 62c:	06541097 			; <UNDEFINED> instruction: 0x06541097
 630:	91020000 	mrsls	r0, (UNDEF: 2)
 634:	6f721b58 	svcvs	0x00721b58
 638:	99010077 	stmdbls	r1, {r0, r1, r2, r4, r5, r6}
 63c:	00013d06 	andeq	r3, r1, r6, lsl #26
 640:	6c910200 	lfmvs	f0, 4, [r1], {0}
 644:	6c6f631b 	stclvs	3, cr6, [pc], #-108	; 5e0 <startup-0x1ffffa20>
 648:	0b990100 	bleq	fe640a50 <apple+0xde6401a0>
 64c:	0000013d 	andeq	r0, r0, sp, lsr r1
 650:	00689102 	rsbeq	r9, r8, r2, lsl #2
 654:	0001120b 	andeq	r1, r1, fp, lsl #4
 658:	00066400 	andeq	r6, r6, r0, lsl #8
 65c:	01040c00 	tsteq	r4, r0, lsl #24
 660:	000f0000 	andeq	r0, pc, r0
 664:	0001f61c 	andeq	pc, r1, ip, lsl r6	; <UNPREDICTABLE>
 668:	058a0100 	streq	r0, [sl, #256]	; 0x100
 66c:	0000013d 	andeq	r0, r0, sp, lsr r1
 670:	20000164 	andcs	r0, r0, r4, ror #2
 674:	00000054 	andeq	r0, r0, r4, asr r0
 678:	068c9c01 	streq	r9, [ip], r1, lsl #24
 67c:	631b0000 	tstvs	fp, #0
 680:	108c0100 	addne	r0, ip, r0, lsl #2
 684:	00000112 	andeq	r0, r0, r2, lsl r1
 688:	00779102 	rsbseq	r9, r7, r2, lsl #2
 68c:	00012f1a 	andeq	r2, r1, sl, lsl pc
 690:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
 694:	20000100 	andcs	r0, r0, r0, lsl #2
 698:	00000064 	andeq	r0, r0, r4, rrx
 69c:	06b29c01 	ldrteq	r9, [r2], r1, lsl #24
 6a0:	72180000 	andsvc	r0, r8, #0
 6a4:	0100776f 	tsteq	r0, pc, ror #14
 6a8:	01041f7e 	tsteq	r4, lr, ror pc
 6ac:	91020000 	mrsls	r0, (UNDEF: 2)
 6b0:	c4170074 	ldrgt	r0, [r7], #-116	; 0xffffff8c
 6b4:	01000002 	tsteq	r0, r2
 6b8:	00da0674 	sbcseq	r0, sl, r4, ror r6
 6bc:	00262000 	eoreq	r2, r6, r0
 6c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c4:	000006d7 	ldrdeq	r0, [r0], -r7
 6c8:	00736d18 	rsbseq	r6, r3, r8, lsl sp
 6cc:	041f7401 	ldreq	r7, [pc], #-1025	; 6d4 <startup-0x1ffff92c>
 6d0:	02000001 	andeq	r0, r0, #1
 6d4:	17007491 			; <UNDEFINED> instruction: 0x17007491
 6d8:	000002ea 	andeq	r0, r0, sl, ror #5
 6dc:	a4066701 	strge	r6, [r6], #-1793	; 0xfffff8ff
 6e0:	36200000 	strtcc	r0, [r0], -r0
 6e4:	01000000 	mrseq	r0, (UNDEF: 0)
 6e8:	0007139c 	muleq	r7, ip, r3
 6ec:	73751800 	cmnvc	r5, #0, 16
 6f0:	1f670100 	svcne	0x00670100
 6f4:	00000104 	andeq	r0, r0, r4, lsl #2
 6f8:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 6fc:	200000ae 	andcs	r0, r0, lr, lsr #1
 700:	00000016 	andeq	r0, r0, r6, lsl r0
 704:	0100691b 	tsteq	r0, fp, lsl r9
 708:	013d0b6f 	teqeq	sp, pc, ror #22
 70c:	91020000 	mrsls	r0, (UNDEF: 2)
 710:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
 714:	000001fe 	strdeq	r0, [r0], -lr
 718:	60065c01 	andvs	r5, r6, r1, lsl #24
 71c:	44200000 	strtmi	r0, [r0], #-0
 720:	01000000 	mrseq	r0, (UNDEF: 0)
 724:	01b21e9c 			; <UNDEFINED> instruction: 0x01b21e9c
 728:	50010000 	andpl	r0, r1, r0
 72c:	00002806 	andeq	r2, r0, r6, lsl #16
 730:	00003820 	andeq	r3, r0, r0, lsr #16
 734:	1a9c0100 	bne	fe700b3c <apple+0xde70028c>
 738:	00000357 	andeq	r0, r0, r7, asr r3
 73c:	22064801 	andcs	r4, r6, #65536	; 0x10000
 740:	06200000 	strteq	r0, [r0], -r0
 744:	01000000 	mrseq	r0, (UNDEF: 0)
 748:	0007669c 	muleq	r7, ip, r6
 74c:	00781800 	rsbseq	r1, r8, r0, lsl #16
 750:	3d1e4801 	ldccc	8, cr4, [lr, #-4]
 754:	01000001 	tsteq	r0, r1
 758:	00791850 	rsbseq	r1, r9, r0, asr r8
 75c:	3d254801 	stccc	8, cr4, [r5, #-4]!
 760:	01000001 	tsteq	r0, r1
 764:	491e0051 	ldmdbmi	lr, {r0, r4, r6}
 768:	01000001 	tsteq	r0, r1
 76c:	001c0641 	andseq	r0, ip, r1, asr #12
 770:	00062000 	andeq	r2, r6, r0
 774:	9c010000 	stcls	0, cr0, [r1], {-0}
 778:	0002961a 	andeq	r9, r2, sl, lsl r6
 77c:	063a0100 	ldrteq	r0, [sl], -r0, lsl #2
 780:	20000016 	andcs	r0, r0, r6, lsl r0
 784:	00000006 	andeq	r0, r0, r6
 788:	07a79c01 	streq	r9, [r7, r1, lsl #24]!
 78c:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
 790:	1c3a0100 	ldfnes	f0, [sl], #-0
 794:	0000013d 	andeq	r0, r0, sp, lsr r1
 798:	79185001 	ldmdbvc	r8, {r0, ip, lr}
 79c:	233a0100 	teqcs	sl, #0, 2
 7a0:	0000013d 	andeq	r0, r0, sp, lsr r1
 7a4:	1e005101 	adfnes	f5, f0, f1
 7a8:	000002f6 	strdeq	r0, [r0], -r6
 7ac:	10063301 	andne	r3, r6, r1, lsl #6
 7b0:	06200000 	strteq	r0, [r0], -r0
 7b4:	01000000 	mrseq	r0, (UNDEF: 0)
 7b8:	028e1e9c 	addeq	r1, lr, #156, 28	; 0x9c0
 7bc:	27010000 	strcs	r0, [r1, -r0]
 7c0:	00000006 	andeq	r0, r0, r6
 7c4:	00000c20 	andeq	r0, r0, r0, lsr #24
 7c8:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0113 	bleq	2c0468 <startup-0x1fd3fb98>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13010b39 	movwne	r0, #6969	; 0x1b39
  20:	0d030000 	stceq	0, cr0, [r3, #-0]
  24:	3a0e0300 	bcc	380c2c <startup-0x1fc7f3d4>
  28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  2c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  30:	0400000b 	streq	r0, [r0], #-11
  34:	13490035 	movtne	r0, #36917	; 0x9035
  38:	24050000 	strcs	r0, [r5], #-0
  3c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  40:	000e030b 	andeq	r0, lr, fp, lsl #6
  44:	00160600 	andseq	r0, r6, r0, lsl #12
  48:	0b3a0e03 	bleq	e8385c <startup-0x1f17c7a4>
  4c:	0b390b3b 	bleq	e42d40 <startup-0x1f1bd2c0>
  50:	00001349 	andeq	r1, r0, r9, asr #6
  54:	0b000f07 	bleq	3c78 <startup-0x1fffc388>
  58:	0013490b 	andseq	r4, r3, fp, lsl #18
  5c:	00340800 	eorseq	r0, r4, r0, lsl #16
  60:	0b3a0e03 	bleq	e83874 <startup-0x1f17c78c>
  64:	0b390b3b 	bleq	e42d58 <startup-0x1f1bd2a8>
  68:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	0b002409 	bleq	909c <startup-0x1fff6f64>
  74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  78:	0a000008 	beq	a0 <startup-0x1fffff60>
  7c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	13490b39 	movtne	r0, #39737	; 0x9b39
  88:	00000b38 	andeq	r0, r0, r8, lsr fp
  8c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  90:	00130113 	andseq	r0, r3, r3, lsl r1
  94:	00210c00 	eoreq	r0, r1, r0, lsl #24
  98:	0b2f1349 	bleq	bc4dc4 <startup-0x1f43b23c>
  9c:	130d0000 	movwne	r0, #53248	; 0xd000
  a0:	0b0e0301 	bleq	380cac <startup-0x1fc7f354>
  a4:	3b0b3a0b 	blcc	2ce8d8 <startup-0x1fd31728>
  a8:	010b390b 	tsteq	fp, fp, lsl #18
  ac:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  b4:	00001301 	andeq	r1, r0, r1, lsl #6
  b8:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
  bc:	10000013 	andne	r0, r0, r3, lsl r0
  c0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  c8:	13490b39 	movtne	r0, #39737	; 0x9b39
  cc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  d0:	34110000 	ldrcc	r0, [r1], #-0
  d4:	3a0e0300 	bcc	380cdc <startup-0x1fc7f324>
  d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  dc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  e0:	12000018 	andne	r0, r0, #24
  e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	0b39053b 	bleq	e415e0 <startup-0x1f1bea20>
  f0:	01111927 	tsteq	r1, r7, lsr #18
  f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  fc:	13000013 	movwne	r0, #19
 100:	08030034 	stmdaeq	r3, {r2, r4, r5}
 104:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 108:	13490b39 	movtne	r0, #39737	; 0x9b39
 10c:	00001802 	andeq	r1, r0, r2, lsl #16
 110:	3f012e14 	svccc	0x00012e14
 114:	3a0e0319 	bcc	380d80 <startup-0x1fc7f280>
 118:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 11c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 120:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 124:	97184006 	ldrls	r4, [r8, -r6]
 128:	13011942 	movwne	r1, #6466	; 0x1942
 12c:	05150000 	ldreq	r0, [r5, #-0]
 130:	3a080300 	bcc	200d38 <startup-0x1fdff2c8>
 134:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 138:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 13c:	16000018 			; <UNDEFINED> instruction: 0x16000018
 140:	0111010b 	tsteq	r1, fp, lsl #2
 144:	00000612 	andeq	r0, r0, r2, lsl r6
 148:	3f012e17 	svccc	0x00012e17
 14c:	3a0e0319 	bcc	380db8 <startup-0x1fc7f248>
 150:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 154:	1119270b 	tstne	r9, fp, lsl #14
 158:	40061201 	andmi	r1, r6, r1, lsl #4
 15c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 160:	00001301 	andeq	r1, r0, r1, lsl #6
 164:	03000518 	movweq	r0, #1304	; 0x518
 168:	3b0b3a08 	blcc	2ce990 <startup-0x1fd31670>
 16c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 170:	00180213 	andseq	r0, r8, r3, lsl r2
 174:	00341900 	eorseq	r1, r4, r0, lsl #18
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	0b390b3b 	bleq	e42e70 <startup-0x1f1bd190>
 180:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 184:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 188:	03193f01 	tsteq	r9, #1, 30
 18c:	3b0b3a0e 	blcc	2ce9cc <startup-0x1fd31634>
 190:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 194:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 198:	97184006 	ldrls	r4, [r8, -r6]
 19c:	13011942 	movwne	r1, #6466	; 0x1942
 1a0:	341b0000 	ldrcc	r0, [fp], #-0
 1a4:	3a080300 	bcc	200dac <startup-0x1fdff254>
 1a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1b0:	1c000018 	stcne	0, cr0, [r0], {24}
 1b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1b8:	0b3a0e03 	bleq	e839cc <startup-0x1f17c634>
 1bc:	0b390b3b 	bleq	e42eb0 <startup-0x1f1bd150>
 1c0:	13491927 	movtne	r1, #39207	; 0x9927
 1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1cc:	00130119 	andseq	r0, r3, r9, lsl r1
 1d0:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 1d4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1d8:	0b3b0b3a 	bleq	ec2ec8 <startup-0x1f13d138>
 1dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 1e0:	01111349 	tsteq	r1, r9, asr #6
 1e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1e8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1ec:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 1f0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	0b390b3b 	bleq	e42eec <startup-0x1f1bd114>
 1fc:	01111927 	tsteq	r1, r7, lsr #18
 200:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 204:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000608 	andeq	r0, r0, r8, lsl #12
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000618 	andcs	r0, r0, r8, lsl r6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000471 	andeq	r0, r0, r1, ror r4
   4:	00550003 	subseq	r0, r5, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	726e6568 	rsbvc	r6, lr, #104, 10	; 0x1a000000
  28:	6e4f2f79 	mcrvs	15, 2, r2, cr15, cr9, {3}
  2c:	69724465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, lr}^
  30:	532f6576 			; <UNDEFINED> instruction: 0x532f6576
  34:	7669726b 	strbtvc	r7, [r9], -fp, ror #4
  38:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
  3c:	3254562f 	subscc	r5, r4, #49283072	; 0x2f00000
  40:	4f4d2f31 	svcmi	0x004d2f31
  44:	4f4d2f50 	svcmi	0x004d2f50
  48:	6e732f50 	mrcvs	15, 3, r2, cr3, cr0, {2}
  4c:	00656b61 	rsbeq	r6, r5, r1, ror #22
  50:	61747300 	cmnvs	r4, r0, lsl #6
  54:	70757472 	rsbsvc	r7, r5, r2, ror r4
  58:	0100632e 	tsteq	r0, lr, lsr #6
  5c:	05000000 	streq	r0, [r0, #-0]
  60:	02050001 	andeq	r0, r5, #1
  64:	20000000 	andcs	r0, r0, r0
  68:	13012703 	movwne	r2, #5891	; 0x1703
  6c:	212f2121 			; <UNDEFINED> instruction: 0x212f2121
  70:	01000302 	tsteq	r0, r2, lsl #6
  74:	00010501 	andeq	r0, r1, r1, lsl #10
  78:	00100205 	andseq	r0, r0, r5, lsl #4
  7c:	33032000 	movwcc	r2, #12288	; 0x3000
  80:	21020501 	tstcs	r2, r1, lsl #10
  84:	21010513 	tstcs	r1, r3, lsl r5
  88:	21020524 	tstcs	r2, r4, lsr #10
  8c:	21010513 	tstcs	r1, r3, lsl r5
  90:	21020524 	tstcs	r2, r4, lsr #10
  94:	21010513 	tstcs	r1, r3, lsl r5
  98:	21020524 	tstcs	r2, r4, lsr #10
  9c:	21010513 	tstcs	r1, r3, lsl r5
  a0:	05241505 	streq	r1, [r4, #-1285]!	; 0xfffffafb
  a4:	22053002 	andcs	r3, r5, #2
  a8:	30020520 	andcc	r0, r2, r0, lsr #10
  ac:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  b0:	10053d02 	andne	r3, r5, r2, lsl #26
  b4:	2f020520 	svccs	0x00020520
  b8:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  bc:	11053d02 	tstne	r5, r2, lsl #26
  c0:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
  c4:	30020587 	andcc	r0, r2, r7, lsl #11
  c8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  cc:	0c052f02 	stceq	15, cr2, [r5], {2}
  d0:	2f020520 	svccs	0x00020520
  d4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
  d8:	0c052f02 	stceq	15, cr2, [r5], {2}
  dc:	2f070520 	svccs	0x00070520
  e0:	02000a05 	andeq	r0, r0, #20480	; 0x5000
  e4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  e8:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
  ec:	07052e01 	streq	r2, [r5, -r1, lsl #28]
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	2102053c 	tstcs	r2, ip, lsr r5
  f8:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
  fc:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
 100:	0b054f07 	bleq	153d24 <startup-0x1feac2dc>
 104:	2e030522 	cfsh32cs	mvfx0, mvfx3, #18
 108:	02001c05 	andeq	r1, r0, #1280	; 0x500
 10c:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 110:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 114:	03052e03 	movweq	r2, #24067	; 0x5e03
 118:	01040200 	mrseq	r0, R12_usr
 11c:	3d05053c 	cfstr32cc	mvfx0, [r5, #-240]	; 0xffffff10
 120:	05390705 	ldreq	r0, [r9, #-1797]!	; 0xfffff8fb
 124:	23054101 	movwcs	r4, #20737	; 0x5101
 128:	4b07055a 	blmi	1c1698 <startup-0x1fe3e968>
 12c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
 130:	07053d05 	streq	r3, [r5, -r5, lsl #26]
 134:	41010539 	tstmi	r1, r9, lsr r5
 138:	4b02055d 	blmi	816b4 <startup-0x1ff7e94c>
 13c:	2f080b05 	svccs	0x00080b05
 140:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
 144:	0b052e03 	bleq	14b958 <startup-0x1feb46a8>
 148:	20190521 	andscs	r0, r9, r1, lsr #10
 14c:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 150:	1905210b 	stmdbne	r5, {r0, r1, r3, r8, sp}
 154:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 158:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 15c:	03052019 	movweq	r2, #20505	; 0x5019
 160:	220c052e 	andcs	r0, ip, #192937984	; 0xb800000
 164:	05201a05 	streq	r1, [r0, #-2565]!	; 0xfffff5fb
 168:	05853001 	streq	r3, [r5, #1]
 16c:	04053e06 	streq	r3, [r5], #-3590	; 0xfffff1fa
 170:	3d070520 	cfstr32cc	mvfx0, [r7, #-128]	; 0xffffff80
 174:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 178:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 17c:	07052001 	streq	r2, [r5, -r1]
 180:	4a04052f 	bmi	101644 <startup-0x1fefe9bc>
 184:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
 188:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 18c:	04052f07 	streq	r2, [r5], #-3847	; 0xfffff0f9
 190:	0013054a 	andseq	r0, r3, sl, asr #10
 194:	20010402 	andcs	r0, r1, r2, lsl #8
 198:	052f0705 	streq	r0, [pc, #-1797]!	; fffffa9b <apple+0xdffff1eb>
 19c:	13054a04 	movwne	r4, #23044	; 0x5a04
 1a0:	01040200 	mrseq	r0, R12_usr
 1a4:	2f090520 	svccs	0x00090520
 1a8:	69210105 	stmdbvs	r1!, {r0, r2, r8}
 1ac:	053d1005 	ldreq	r1, [sp, #-5]!
 1b0:	0205690a 	andeq	r6, r5, #163840	; 0x28000
 1b4:	2103052e 	tstcs	r3, lr, lsr #10
 1b8:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 1bc:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
 1c0:	3d15053d 	cfldr32cc	mvfx0, [r5, #-244]	; 0xffffff0c
 1c4:	052e1005 	streq	r1, [lr, #-5]!
 1c8:	1805201d 	stmdane	r5, {r0, r2, r3, r4, sp}
 1cc:	200e052e 	andcs	r0, lr, lr, lsr #10
 1d0:	02001c05 	andeq	r1, r0, #1280	; 0x500
 1d4:	05380204 	ldreq	r0, [r8, #-516]!	; 0xfffffdfc
 1d8:	04020002 	streq	r0, [r2], #-2
 1dc:	05433c01 	strbeq	r3, [r3, #-3073]	; 0xfffff3ff
 1e0:	01053d08 	tsteq	r5, r8, lsl #26
 1e4:	01040200 	mrseq	r0, R12_usr
 1e8:	031e0521 	tsteq	lr, #138412032	; 0x8400000
 1ec:	09057420 	stmdbeq	r5, {r5, sl, ip, sp, lr}
 1f0:	2101055b 	tstcs	r1, fp, asr r5
 1f4:	054a0b03 	strbeq	r0, [sl, #-2819]	; 0xfffff4fd
 1f8:	06054b16 			; <UNDEFINED> instruction: 0x06054b16
 1fc:	2f0a052e 	svccs	0x000a052e
 200:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 204:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 208:	28052203 	stmdacs	r5, {r0, r1, r9, sp}
 20c:	03040200 	movweq	r0, #16896	; 0x4200
 210:	0032052e 	eorseq	r0, r2, lr, lsr #10
 214:	66030402 	strvs	r0, [r3], -r2, lsl #8
 218:	02002b05 	andeq	r2, r0, #5120	; 0x1400
 21c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 220:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
 224:	19056603 	stmdbne	r5, {r0, r1, r9, sl, sp, lr}
 228:	03040200 	movweq	r0, #16896	; 0x4200
 22c:	0028054b 	eoreq	r0, r8, fp, asr #10
 230:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 234:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 238:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 23c:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 240:	11052e03 	tstne	r5, r3, lsl #28
 244:	03040200 	movweq	r0, #16896	; 0x4200
 248:	00030566 	andeq	r0, r3, r6, ror #10
 24c:	4b030402 	blmi	c125c <startup-0x1ff3eda4>
 250:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
 254:	057e0304 	ldrbeq	r0, [lr, #-772]!	; 0xfffffcfc
 258:	04020002 	streq	r0, [r2], #-2
 25c:	01053c01 	tsteq	r5, r1, lsl #24
 260:	16058550 			; <UNDEFINED> instruction: 0x16058550
 264:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
 268:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff86b <apple+0xdfffefbb>
 26c:	19052e02 	stmdbne	r5, {r1, r9, sl, fp, sp}
 270:	03040200 	movweq	r0, #16896	; 0x4200
 274:	00280522 	eoreq	r0, r8, r2, lsr #10
 278:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 27c:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
 280:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
 284:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
 288:	11052e03 	tstne	r5, r3, lsl #28
 28c:	03040200 	movweq	r0, #16896	; 0x4200
 290:	00190566 	andseq	r0, r9, r6, ror #10
 294:	4b030402 	blmi	c12a4 <startup-0x1ff3ed5c>
 298:	02002805 	andeq	r2, r0, #327680	; 0x50000
 29c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 2a0:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 2a4:	2b056603 	blcs	159ab8 <startup-0x1fea6548>
 2a8:	03040200 	movweq	r0, #16896	; 0x4200
 2ac:	0011052e 	andseq	r0, r1, lr, lsr #10
 2b0:	66030402 	strvs	r0, [r3], -r2, lsl #8
 2b4:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 2b8:	054b0304 	strbeq	r0, [fp, #-772]	; 0xfffffcfc
 2bc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
 2c0:	02057e03 	andeq	r7, r5, #3, 28	; 0x30
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	5001053c 	andpl	r0, r1, ip, lsr r5
 2cc:	670e0585 	strvs	r0, [lr, -r5, lsl #11]
 2d0:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 2d4:	4b02054e 	blmi	81814 <startup-0x1ff7e7ec>
 2d8:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
 2dc:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
 2e0:	2e150530 	cfmvr64hcs	r0, mvdx5
 2e4:	3d2e0e05 	stccc	14, cr0, [lr, #-20]!	; 0xffffffec
 2e8:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 2ec:	02052e0e 	andeq	r2, r5, #14, 28	; 0xe0
 2f0:	4b01053e 	blmi	417f0 <startup-0x1ffbe810>
 2f4:	4c02054e 	cfstr32mi	mvfx0, [r2], {78}	; 0x4e
 2f8:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
 2fc:	10052e06 	andne	r2, r5, r6, lsl #28
 300:	d60e052f 	strle	r0, [lr], -pc, lsr #10
 304:	052f1005 	streq	r1, [pc, #-5]!	; 307 <startup-0x1ffffcf9>
 308:	0205d60e 	andeq	sp, r5, #14680064	; 0xe00000
 30c:	4b010531 	blmi	417d8 <startup-0x1ffbe828>
 310:	33032b05 	movwcc	r2, #15109	; 0x3b05
 314:	59070582 	stmdbpl	r7, {r1, r7, r8, sl}
 318:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 31c:	03053d0c 	movweq	r3, #23820	; 0x5d0c
 320:	210e052e 	tstcs	lr, lr, lsr #10
 324:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 328:	25052119 	strcs	r2, [r5, #-281]	; 0xfffffee7
 32c:	7415052e 	ldrvc	r0, [r5], #-1326	; 0xfffffad2
 330:	052e3805 	streq	r3, [lr, #-2053]!	; 0xfffff7fb
 334:	34052e44 	strcc	r2, [r5], #-3652	; 0xfffff1bc
 338:	2e0a0574 	cfrshl64cs	mvdx10, mvdx4, r0
 33c:	02001705 	andeq	r1, r0, #1310720	; 0x140000
 340:	052f0104 	streq	r0, [pc, #-260]!	; 244 <startup-0x1ffffdbc>
 344:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
 348:	13052e01 	movwne	r2, #24065	; 0x5e01
 34c:	01040200 	mrseq	r0, R12_usr
 350:	00360574 	eorseq	r0, r6, r4, ror r5
 354:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 358:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
 35c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 360:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 364:	48057401 	stmdami	r5, {r0, sl, ip, sp, lr}
 368:	01040200 	mrseq	r0, R12_usr
 36c:	2f4e052d 	svccs	0x004e052d
 370:	02002f05 	andeq	r2, r0, #5, 30
 374:	052c0204 	streq	r0, [ip, #-516]!	; 0xfffffdfc
 378:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
 37c:	21053c01 	tstcs	r5, r1, lsl #24
 380:	01040200 	mrseq	r0, R12_usr
 384:	0005052e 	andeq	r0, r5, lr, lsr #10
 388:	20010402 	andcs	r0, r1, r2, lsl #8
 38c:	02002c05 	andeq	r2, r0, #1280	; 0x500
 390:	053b0204 	ldreq	r0, [fp, #-516]!	; 0xfffffdfc
 394:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 398:	1e053c01 	cdpne	12, 0, cr3, cr5, cr1, {0}
 39c:	01040200 	mrseq	r0, R12_usr
 3a0:	0003052e 	andeq	r0, r3, lr, lsr #10
 3a4:	20010402 	andcs	r0, r1, r2, lsl #8
 3a8:	05410a05 	strbeq	r0, [r1, #-2565]	; 0xfffff5fb
 3ac:	054d2101 	strbeq	r2, [sp, #-257]	; 0xfffffeff
 3b0:	17055a09 	strne	r5, [r5, -r9, lsl #20]
 3b4:	2e05052e 	cfsh32cs	mvfx0, mvfx5, #30
 3b8:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 3bc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3c0:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 3c4:	1f052e01 	svcne	0x00052e01
 3c8:	01040200 	mrseq	r0, R12_usr
 3cc:	2f0a052e 	svccs	0x000a052e
 3d0:	2e060532 	mcrcs	5, 0, r0, cr6, cr2, {1}
 3d4:	02000c05 	andeq	r0, r0, #1280	; 0x500
 3d8:	052f0104 	streq	r0, [pc, #-260]!	; 2dc <startup-0x1ffffd24>
 3dc:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 3e0:	20052e01 	andcs	r2, r5, r1, lsl #28
 3e4:	01040200 	mrseq	r0, R12_usr
 3e8:	0014052e 	andseq	r0, r4, lr, lsr #10
 3ec:	20010402 	andcs	r0, r1, r2, lsl #8
 3f0:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 3f4:	051f0104 	ldreq	r0, [pc, #-260]	; 2f8 <startup-0x1ffffd08>
 3f8:	29053006 	stmdbcs	r5, {r1, r2, ip, sp}
 3fc:	300b052d 	andcc	r0, fp, sp, lsr #10
 400:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
 404:	13052e1f 	movwne	r2, #24095	; 0x5e1f
 408:	1f120520 	svcne	0x00120520
 40c:	05300b05 	ldreq	r0, [r0, #-2821]!	; 0xfffff4fb
 410:	01052f09 	tsteq	r5, r9, lsl #30
 414:	0a054f21 	beq	1540a0 <startup-0x1feabf60>
 418:	02052f3e 	andeq	r2, r5, #62, 30	; 0xf8
 41c:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff4f5 <apple+0xdfffec45>
 420:	02052f0b 	andeq	r2, r5, #11, 30	; 0x2c
 424:	3f0c052e 	svccc	0x000c052e
 428:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 42c:	03053d0c 	movweq	r3, #23820	; 0x5d0c
 430:	3d07052e 	cfstr32cc	mvfx0, [r7, #-184]	; 0xffffff48
 434:	055b0305 	ldrbeq	r0, [fp, #-773]	; 0xfffffcfb
 438:	0c05ca16 			; <UNDEFINED> instruction: 0x0c05ca16
 43c:	4a04052e 	bmi	1018fc <startup-0x1fefe704>
 440:	05221605 	streq	r1, [r2, #-1541]!	; 0xfffff9fb
 444:	04052e0c 	streq	r2, [r5], #-3596	; 0xfffff1f4
 448:	22160558 	andscs	r0, r6, #88, 10	; 0x16000000
 44c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 450:	16055804 	strne	r5, [r5], -r4, lsl #16
 454:	2e0c0522 	cfsh32cs	mvfx0, mvfx12, #18
 458:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 45c:	06052307 	streq	r2, [r5], -r7, lsl #6
 460:	21200574 			; <UNDEFINED> instruction: 0x21200574
 464:	052e2805 	streq	r2, [lr, #-2053]!	; 0xfffff7fb
 468:	03052015 	movweq	r2, #20501	; 0x5015
 46c:	3c6b0332 	stclcc	3, cr0, [fp], #-200	; 0xffffff38
 470:	01000602 	tsteq	r0, r2, lsl #12
 474:	Address 0x00000474 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	666f0059 			; <UNDEFINED> instruction: 0x666f0059
   c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
  10:	6c007832 	stcvs	8, cr7, [r0], {50}	; 0x32
  14:	00726b63 	rsbseq	r6, r2, r3, ror #22
  18:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
  1c:	616e735f 	cmnvs	lr, pc, asr r3
  20:	626f656b 	rsbvs	r6, pc, #448790528	; 0x1ac00000
  24:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  28:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  2c:	3a430065 	bcc	10c01c8 <startup-0x1ef3fe38>
  30:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
  34:	682f7372 	stmdavs	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
  38:	79726e65 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
  3c:	656e4f2f 	strbvs	r4, [lr, #-3887]!	; 0xfffff0d1
  40:	76697244 	strbtvc	r7, [r9], -r4, asr #4
  44:	6b532f65 	blvs	14cbde0 <startup-0x1eb34220>
  48:	62766972 	rsbsvs	r6, r6, #1867776	; 0x1c8000
  4c:	2f64726f 	svccs	0x0064726f
  50:	31325456 	teqcc	r2, r6, asr r4
  54:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  58:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  5c:	616e732f 	cmnvs	lr, pc, lsr #6
  60:	732f656b 			; <UNDEFINED> instruction: 0x732f656b
  64:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  68:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  6c:	6f687300 	svcvs	0x00687300
  70:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
  74:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  78:	2064656e 	rsbcs	r6, r4, lr, ror #10
  7c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  80:	72727362 	rsbsvc	r7, r2, #-2013265919	; 0x88000001
  84:	72696400 	rsbvc	r6, r9, #0, 8
  88:	746f0078 	strbtvc	r0, [pc], #-120	; 90 <startup-0x1fffff70>
  8c:	72657079 	rsbvc	r7, r5, #121	; 0x79
  90:	61726400 	cmnvs	r2, r0, lsl #8
  94:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
  98:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  9c:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
  a0:	006d6f64 	rsbeq	r6, sp, r4, ror #30
  a4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
  a8:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  ac:	696c6c6f 	stmdbvs	ip!, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
  b0:	00736564 	rsbseq	r6, r3, r4, ror #10
  b4:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
  b8:	00686769 	rsbeq	r6, r8, r9, ror #14
  bc:	41555153 	cmpmi	r5, r3, asr r1
  c0:	575f4552 			; <UNDEFINED> instruction: 0x575f4552
  c4:	48544449 	ldmdami	r4, {r0, r3, r6, sl, lr}^
  c8:	70706100 	rsbsvc	r6, r0, r0, lsl #2
  cc:	626f656c 	rsbvs	r6, pc, #108, 10	; 0x1b000000
  d0:	4f50006a 	svcmi	0x0050006a
  d4:	00544e49 	subseq	r4, r4, r9, asr #28
  d8:	706d756e 	rsbvc	r7, sp, lr, ror #10
  dc:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
  e0:	6e750073 	mrcvs	0, 3, r0, cr5, cr3, {3}
  e4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  e8:	63206465 			; <UNDEFINED> instruction: 0x63206465
  ec:	00726168 	rsbseq	r6, r2, r8, ror #2
  f0:	5f746573 	svcpl	0x00746573
  f4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
  f8:	6f700064 	svcvs	0x00700064
  fc:	50007873 	andpl	r7, r0, r3, ror r8
 100:	4f495047 	svcmi	0x00495047
 104:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 108:	6f5f6c65 	svcvs	0x005f6c65
 10c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
 110:	61007061 	tstvs	r0, r1, rrx
 114:	00687266 	rsbeq	r7, r8, r6, ror #4
 118:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 11c:	78317465 	ldmdavc	r1!, {r0, r2, r5, r6, sl, ip, sp, lr}
 120:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 124:	31746573 	cmncc	r4, r3, ror r5
 128:	66610079 			; <UNDEFINED> instruction: 0x66610079
 12c:	61006c72 	tstvs	r0, r2, ror ip
 130:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 134:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 138:	5300776f 	movwpl	r7, #1903	; 0x76f
 13c:	45455243 	strbmi	r5, [r5, #-579]	; 0xfffffdbd
 140:	45485f4e 	strbmi	r5, [r8, #-3918]	; 0xfffff0b2
 144:	54484749 	strbpl	r4, [r8], #-1865	; 0xfffff8b7
 148:	61726700 	cmnvs	r2, r0, lsl #14
 14c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 150:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 154:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 158:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 15c:	3a43006e 	bcc	10c031c <startup-0x1ef3fce4>
 160:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 164:	685c7372 	ldmdavs	ip, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
 168:	79726e65 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 16c:	656e4f5c 	strbvs	r4, [lr, #-3932]!	; 0xfffff0a4
 170:	76697244 	strbtvc	r7, [r9], -r4, asr #4
 174:	6b535c65 	blvs	14d7310 <startup-0x1eb28cf0>
 178:	62766972 	rsbsvs	r6, r6, #1867776	; 0x1c8000
 17c:	5c64726f 	sfmpl	f7, 2, [r4], #-444	; 0xfffffe44
 180:	31325456 	teqcc	r2, r6, asr r4
 184:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 188:	504f4d5c 	subpl	r4, pc, ip, asr sp	; <UNPREDICTABLE>
 18c:	616e735c 	cmnvs	lr, ip, asr r3
 190:	6b00656b 	blvs	19744 <startup-0x1ffe68bc>
 194:	00627965 	rsbeq	r7, r2, r5, ror #18
 198:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 19c:	72696400 	rsbvc	r6, r9, #0, 8
 1a0:	72640079 	rsbvc	r0, r4, #121	; 0x79
 1a4:	70007761 	andvc	r7, r0, r1, ror #14
 1a8:	72647075 	rsbvc	r7, r4, #117	; 0x75
 1ac:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 1b0:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 1b4:	615f7469 	cmpvs	pc, r9, ror #8
 1b8:	73007070 	movwvc	r7, #112	; 0x70
 1bc:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1c0:	73655200 	cmnvc	r5, #0, 4
 1c4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1c8:	52003064 	andpl	r3, r0, #100	; 0x64
 1cc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 1d0:	31646576 	smccc	18006	; 0x4656
 1d4:	73655200 	cmnvc	r5, #0, 4
 1d8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1dc:	52003264 	andpl	r3, r0, #100, 4	; 0x40000006
 1e0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 1e4:	33646576 	cmncc	r4, #494927872	; 0x1d800000
 1e8:	72646f00 	rsbvc	r6, r4, #0, 30
 1ec:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 1f0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1f4:	65720079 	ldrbvs	r0, [r2, #-121]!	; 0xffffff87
 1f8:	6f436461 	svcvs	0x00436461
 1fc:	6564006c 	strbvs	r0, [r4, #-108]!	; 0xffffff94
 200:	5f79616c 	svcpl	0x0079616c
 204:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 208:	4e470073 	mcrmi	0, 2, r0, cr7, cr3, {3}
 20c:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 210:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 214:	20312e32 	eorscs	r2, r1, r2, lsr lr
 218:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 21c:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 220:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 224:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 228:	5b202965 	blpl	80a7c4 <startup-0x1f7f583c>
 22c:	2f4d5241 	svccs	0x004d5241
 230:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 234:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 238:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 23c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 240:	6f697369 	svcvs	0x00697369
 244:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 248:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 24c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 250:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 254:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 258:	616f6c66 	cmnvs	pc, r6, ror #24
 25c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 260:	6f733d69 	svcvs	0x00733d69
 264:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 268:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 26c:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 270:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 274:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 278:	304f2d20 	subcc	r2, pc, r0, lsr #26
 27c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 280:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 284:	64690039 	strbtvs	r0, [r9], #-57	; 0xffffffc7
 288:	67694872 			; <UNDEFINED> instruction: 0x67694872
 28c:	74730068 	ldrbtvc	r0, [r3], #-104	; 0xffffff98
 290:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 294:	72670070 	rsbvc	r0, r7, #112	; 0x70
 298:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 29c:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 2a0:	5f6c6578 	svcpl	0x006c6578
 2a4:	00746573 	rsbseq	r6, r4, r3, ror r5
 2a8:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 2ac:	00726465 	rsbseq	r6, r2, r5, ror #8
 2b0:	45524353 	ldrbmi	r4, [r2, #-851]	; 0xfffffcad
 2b4:	575f4e45 	ldrbpl	r4, [pc, -r5, asr #28]
 2b8:	48544449 	ldmdami	r4, {r0, r3, r6, sl, lr}^
 2bc:	72646900 	rsbvc	r6, r4, #0, 18
 2c0:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 2c4:	616c6564 	cmnvs	ip, r4, ror #10
 2c8:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2cc:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 2d0:	6b616e73 	blvs	185bca4 <startup-0x1e7a435c>
 2d4:	6a626f65 	bvs	189c070 <startup-0x1e763f90>
 2d8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 2dc:	6a626f5f 	bvs	189c060 <startup-0x1e763fa0>
 2e0:	5f746365 	svcpl	0x00746365
 2e4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 2e8:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 2ec:	5f79616c 	svcpl	0x0079616c
 2f0:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 2f4:	7267006f 	rsbvc	r0, r7, #111	; 0x6f
 2f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2fc:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 300:	6c617469 	cfstrdvs	mvd7, [r1], #-420	; 0xfffffe5c
 304:	00657a69 	rsbeq	r7, r5, r9, ror #20
 308:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 30c:	79327465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}
 310:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 314:	675f656c 	ldrbvs	r6, [pc, -ip, ror #10]
 318:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 31c:	00797274 	rsbseq	r7, r9, r4, ror r2
 320:	61656c63 	cmnvs	r5, r3, ror #24
 324:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 328:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 32c:	616e7300 	cmnvs	lr, r0, lsl #6
 330:	675f656b 	ldrbvs	r6, [pc, -fp, ror #10]
 334:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 338:	00797274 	rsbseq	r7, r9, r4, ror r2
 33c:	6a624f74 	bvs	1894114 <startup-0x1e76beec>
 340:	646f6d00 	strbtvs	r6, [pc], #-3328	; 348 <startup-0x1ffffcb8>
 344:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
 348:	6f706d75 	svcvs	0x00706d75
 34c:	73746e69 	cmnvc	r4, #1680	; 0x690
 350:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 354:	6700656c 	strvs	r6, [r0, -ip, ror #10]
 358:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 35c:	705f6369 	subsvc	r6, pc, r9, ror #6
 360:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 364:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 368:	50007261 	andpl	r7, r0, r1, ror #4
 36c:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 370:	6d005443 	cfstrsvs	mvf5, [r0, #-268]	; 0xfffffef4
 374:	5f65766f 	svcpl	0x0065766f
 378:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 37c:	6a626f65 	bvs	189c118 <startup-0x1e763ee8>
 380:	00746365 	rsbseq	r6, r4, r5, ror #6

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000006 	andeq	r0, r0, r6
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	20000016 	andcs	r0, r0, r6, lsl r0
  3c:	00000006 	andeq	r0, r0, r6
  40:	0000000c 	andeq	r0, r0, ip
  44:	00000000 	andeq	r0, r0, r0
  48:	2000001c 	andcs	r0, r0, ip, lsl r0
  4c:	00000006 	andeq	r0, r0, r6
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	20000022 	andcs	r0, r0, r2, lsr #32
  5c:	00000006 	andeq	r0, r0, r6
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000028 	andcs	r0, r0, r8, lsr #32
  6c:	00000038 	andeq	r0, r0, r8, lsr r0
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0000070d 	andeq	r0, r0, sp, lsl #14
  7c:	00000018 	andeq	r0, r0, r8, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000060 	andcs	r0, r0, r0, rrx
  88:	00000044 	andeq	r0, r0, r4, asr #32
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0000070d 	andeq	r0, r0, sp, lsl #14
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	200000a4 	andcs	r0, r0, r4, lsr #1
  a4:	00000036 	andeq	r0, r0, r6, lsr r0
  a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ac:	41018e02 	tstmi	r1, r2, lsl #28
  b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b4:	00000007 	andeq	r0, r0, r7
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000da 	ldrdcs	r0, [r0], -sl
  c4:	00000026 	andeq	r0, r0, r6, lsr #32
  c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  cc:	41018e02 	tstmi	r1, r2, lsl #28
  d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d4:	00000007 	andeq	r0, r0, r7
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000100 	andcs	r0, r0, r0, lsl #2
  e4:	00000064 	andeq	r0, r0, r4, rrx
  e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  ec:	41018e02 	tstmi	r1, r2, lsl #28
  f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f4:	00000007 	andeq	r0, r0, r7
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000164 	andcs	r0, r0, r4, ror #2
 104:	00000054 	andeq	r0, r0, r4, asr r0
 108:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 10c:	41018e02 	tstmi	r1, r2, lsl #28
 110:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 114:	00000007 	andeq	r0, r0, r7
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 124:	00000068 	andeq	r0, r0, r8, rrx
 128:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 12c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 130:	280e4101 	stmdacs	lr, {r0, r8, lr}
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	20000220 	andcs	r0, r0, r0, lsr #4
 144:	00000014 	andeq	r0, r0, r4, lsl r0
 148:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 14c:	41018e02 	tstmi	r1, r2, lsl #28
 150:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 154:	00000007 	andeq	r0, r0, r7
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	20000234 	andcs	r0, r0, r4, lsr r2
 164:	00000094 	muleq	r0, r4, r0
 168:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 16c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 170:	280e4101 	stmdacs	lr, {r0, r8, lr}
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200002c8 	andcs	r0, r0, r8, asr #5
 184:	00000094 	muleq	r0, r4, r0
 188:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 18c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 190:	280e4101 	stmdacs	lr, {r0, r8, lr}
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	0000001c 	andeq	r0, r0, ip, lsl r0
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	2000035c 	andcs	r0, r0, ip, asr r3
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ac:	41018e02 	tstmi	r1, r2, lsl #28
 1b0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1b4:	00000007 	andeq	r0, r0, r7
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	2000037c 	andcs	r0, r0, ip, ror r3
 1c4:	00000044 	andeq	r0, r0, r4, asr #32
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	200003c0 	andcs	r0, r0, r0, asr #7
 1e4:	00000070 	andeq	r0, r0, r0, ror r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	20000430 	andcs	r0, r0, r0, lsr r4
 204:	000000c0 	andeq	r0, r0, r0, asr #1
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 224:	00000064 	andeq	r0, r0, r4, rrx
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000554 	andcs	r0, r0, r4, asr r5
 244:	000000c4 	andeq	r0, r0, r4, asr #1
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	200e4101 	andcs	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000000c 	andeq	r0, r0, ip
 25c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 260:	7c010001 	stcvc	0, cr0, [r1], {1}
 264:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 268:	0000000c 	andeq	r0, r0, ip
 26c:	00000258 	andeq	r0, r0, r8, asr r2
 270:	20000619 	andcs	r0, r0, r9, lsl r6
 274:	000001cc 	andeq	r0, r0, ip, asr #3
